/* automatically generated by rust-bindgen 0.63.0 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const GRASSHOPPER_ROUND_KEYS_COUNT: u32 = 10;
pub const GRASSHOPPER_BLOCK_SIZE: u32 = 16;
pub const GRASSHOPPER_KEY_SIZE: u32 = 32;
pub const GRASSHOPPER_MIN_BITS: u32 = 8;
pub const GRASSHOPPER_MAX_BITS: u32 = 128;
pub const GRASSHOPPER_BITS: u32 = 64;
pub const GRASSHOPPER_BIT_PARTS_8: u32 = 16;
pub const GRASSHOPPER_BIT_PARTS_16: u32 = 8;
pub const GRASSHOPPER_BIT_PARTS_32: u32 = 4;
pub const GRASSHOPPER_BIT_PARTS_64: u32 = 2;
pub const GRASSHOPPER_BIT_PARTS: u32 = 2;
pub const GRASSHOPPER_MAX_BIT_PARTS: u32 = 16;
pub const GRASSHOPPER_GALOIS_POWER: u32 = 8;
pub const GRASSHOPPER_GALOIS_FIELD_SIZE: u32 = 255;
pub const SN_kuznyechik_mgm: &[u8; 15usize] = b"kuznyechik-mgm\0";
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const OPENSSL_SYS_WIN64A: u32 = 1;
pub const OPENSSL_CONFIGURED_API: u32 = 30000;
pub const OPENSSL_VERSION_MAJOR: u32 = 3;
pub const OPENSSL_VERSION_MINOR: u32 = 0;
pub const OPENSSL_VERSION_PATCH: u32 = 5;
pub const OPENSSL_VERSION_PRE_RELEASE: &[u8; 1usize] = b"\0";
pub const OPENSSL_VERSION_BUILD_METADATA: &[u8; 1usize] = b"\0";
pub const OPENSSL_SHLIB_VERSION: u32 = 3;
pub const OPENSSL_VERSION_STR: &[u8; 6usize] = b"3.0.5\0";
pub const OPENSSL_FULL_VERSION_STR: &[u8; 6usize] = b"3.0.5\0";
pub const OPENSSL_RELEASE_DATE: &[u8; 11usize] = b"5 Jul 2022\0";
pub const OPENSSL_VERSION_TEXT: &[u8; 25usize] = b"OpenSSL 3.0.5 5 Jul 2022\0";
pub const _OPENSSL_VERSION_PRE_RELEASE: u32 = 0;
pub const OPENSSL_VERSION_NUMBER: u32 = 805306448;
pub const OPENSSL_API_LEVEL: u32 = 30000;
pub const PRId8: &[u8; 4usize] = b"hhd\0";
pub const PRId16: &[u8; 3usize] = b"hd\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRId64: &[u8; 4usize] = b"lld\0";
pub const PRIdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIdLEAST16: &[u8; 3usize] = b"hd\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &[u8; 4usize] = b"lld\0";
pub const PRIdFAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIdFAST16: &[u8; 2usize] = b"d\0";
pub const PRIdFAST32: &[u8; 2usize] = b"d\0";
pub const PRIdFAST64: &[u8; 4usize] = b"lld\0";
pub const PRIdMAX: &[u8; 4usize] = b"lld\0";
pub const PRIdPTR: &[u8; 4usize] = b"lld\0";
pub const PRIi8: &[u8; 4usize] = b"hhi\0";
pub const PRIi16: &[u8; 3usize] = b"hi\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIi64: &[u8; 4usize] = b"lli\0";
pub const PRIiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIiLEAST16: &[u8; 3usize] = b"hi\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &[u8; 4usize] = b"lli\0";
pub const PRIiFAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIiFAST16: &[u8; 2usize] = b"i\0";
pub const PRIiFAST32: &[u8; 2usize] = b"i\0";
pub const PRIiFAST64: &[u8; 4usize] = b"lli\0";
pub const PRIiMAX: &[u8; 4usize] = b"lli\0";
pub const PRIiPTR: &[u8; 4usize] = b"lli\0";
pub const PRIo8: &[u8; 4usize] = b"hho\0";
pub const PRIo16: &[u8; 3usize] = b"ho\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIo64: &[u8; 4usize] = b"llo\0";
pub const PRIoLEAST8: &[u8; 4usize] = b"hho\0";
pub const PRIoLEAST16: &[u8; 3usize] = b"ho\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &[u8; 4usize] = b"llo\0";
pub const PRIoFAST8: &[u8; 4usize] = b"hho\0";
pub const PRIoFAST16: &[u8; 2usize] = b"o\0";
pub const PRIoFAST32: &[u8; 2usize] = b"o\0";
pub const PRIoFAST64: &[u8; 4usize] = b"llo\0";
pub const PRIoMAX: &[u8; 4usize] = b"llo\0";
pub const PRIoPTR: &[u8; 4usize] = b"llo\0";
pub const PRIu8: &[u8; 4usize] = b"hhu\0";
pub const PRIu16: &[u8; 3usize] = b"hu\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIu64: &[u8; 4usize] = b"llu\0";
pub const PRIuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIuLEAST16: &[u8; 3usize] = b"hu\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &[u8; 4usize] = b"llu\0";
pub const PRIuFAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIuFAST16: &[u8; 2usize] = b"u\0";
pub const PRIuFAST32: &[u8; 2usize] = b"u\0";
pub const PRIuFAST64: &[u8; 4usize] = b"llu\0";
pub const PRIuMAX: &[u8; 4usize] = b"llu\0";
pub const PRIuPTR: &[u8; 4usize] = b"llu\0";
pub const PRIx8: &[u8; 4usize] = b"hhx\0";
pub const PRIx16: &[u8; 3usize] = b"hx\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIx64: &[u8; 4usize] = b"llx\0";
pub const PRIxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIxLEAST16: &[u8; 3usize] = b"hx\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &[u8; 4usize] = b"llx\0";
pub const PRIxFAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIxFAST16: &[u8; 2usize] = b"x\0";
pub const PRIxFAST32: &[u8; 2usize] = b"x\0";
pub const PRIxFAST64: &[u8; 4usize] = b"llx\0";
pub const PRIxMAX: &[u8; 4usize] = b"llx\0";
pub const PRIxPTR: &[u8; 4usize] = b"llx\0";
pub const PRIX8: &[u8; 4usize] = b"hhX\0";
pub const PRIX16: &[u8; 3usize] = b"hX\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRIX64: &[u8; 4usize] = b"llX\0";
pub const PRIXLEAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIXLEAST16: &[u8; 3usize] = b"hX\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &[u8; 4usize] = b"llX\0";
pub const PRIXFAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIXFAST16: &[u8; 2usize] = b"X\0";
pub const PRIXFAST32: &[u8; 2usize] = b"X\0";
pub const PRIXFAST64: &[u8; 4usize] = b"llX\0";
pub const PRIXMAX: &[u8; 4usize] = b"llX\0";
pub const PRIXPTR: &[u8; 4usize] = b"llX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNd64: &[u8; 4usize] = b"lld\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &[u8; 4usize] = b"lld\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &[u8; 2usize] = b"d\0";
pub const SCNdFAST32: &[u8; 2usize] = b"d\0";
pub const SCNdFAST64: &[u8; 4usize] = b"lld\0";
pub const SCNdMAX: &[u8; 4usize] = b"lld\0";
pub const SCNdPTR: &[u8; 4usize] = b"lld\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNi64: &[u8; 4usize] = b"lli\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &[u8; 4usize] = b"lli\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &[u8; 2usize] = b"i\0";
pub const SCNiFAST32: &[u8; 2usize] = b"i\0";
pub const SCNiFAST64: &[u8; 4usize] = b"lli\0";
pub const SCNiMAX: &[u8; 4usize] = b"lli\0";
pub const SCNiPTR: &[u8; 4usize] = b"lli\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNo64: &[u8; 4usize] = b"llo\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &[u8; 4usize] = b"llo\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &[u8; 2usize] = b"o\0";
pub const SCNoFAST32: &[u8; 2usize] = b"o\0";
pub const SCNoFAST64: &[u8; 4usize] = b"llo\0";
pub const SCNoMAX: &[u8; 4usize] = b"llo\0";
pub const SCNoPTR: &[u8; 4usize] = b"llo\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNu64: &[u8; 4usize] = b"llu\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &[u8; 4usize] = b"llu\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &[u8; 2usize] = b"u\0";
pub const SCNuFAST32: &[u8; 2usize] = b"u\0";
pub const SCNuFAST64: &[u8; 4usize] = b"llu\0";
pub const SCNuMAX: &[u8; 4usize] = b"llu\0";
pub const SCNuPTR: &[u8; 4usize] = b"llu\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNx64: &[u8; 4usize] = b"llx\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &[u8; 4usize] = b"llx\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &[u8; 2usize] = b"x\0";
pub const SCNxFAST32: &[u8; 2usize] = b"x\0";
pub const SCNxFAST64: &[u8; 4usize] = b"llx\0";
pub const SCNxMAX: &[u8; 4usize] = b"llx\0";
pub const SCNxPTR: &[u8; 4usize] = b"llx\0";
pub const OSSL_PARAM_INTEGER: u32 = 1;
pub const OSSL_PARAM_UNSIGNED_INTEGER: u32 = 2;
pub const OSSL_PARAM_REAL: u32 = 3;
pub const OSSL_PARAM_UTF8_STRING: u32 = 4;
pub const OSSL_PARAM_OCTET_STRING: u32 = 5;
pub const OSSL_PARAM_UTF8_PTR: u32 = 6;
pub const OSSL_PARAM_OCTET_PTR: u32 = 7;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const TIME_UTC: u32 = 1;
pub const ASN1_F_A2D_ASN1_OBJECT: u32 = 0;
pub const ASN1_F_A2I_ASN1_INTEGER: u32 = 0;
pub const ASN1_F_A2I_ASN1_STRING: u32 = 0;
pub const ASN1_F_APPEND_EXP: u32 = 0;
pub const ASN1_F_ASN1_BIO_INIT: u32 = 0;
pub const ASN1_F_ASN1_BIT_STRING_SET_BIT: u32 = 0;
pub const ASN1_F_ASN1_CB: u32 = 0;
pub const ASN1_F_ASN1_CHECK_TLEN: u32 = 0;
pub const ASN1_F_ASN1_COLLECT: u32 = 0;
pub const ASN1_F_ASN1_D2I_EX_PRIMITIVE: u32 = 0;
pub const ASN1_F_ASN1_D2I_FP: u32 = 0;
pub const ASN1_F_ASN1_D2I_READ_BIO: u32 = 0;
pub const ASN1_F_ASN1_DIGEST: u32 = 0;
pub const ASN1_F_ASN1_DO_ADB: u32 = 0;
pub const ASN1_F_ASN1_DO_LOCK: u32 = 0;
pub const ASN1_F_ASN1_DUP: u32 = 0;
pub const ASN1_F_ASN1_ENC_SAVE: u32 = 0;
pub const ASN1_F_ASN1_EX_C2I: u32 = 0;
pub const ASN1_F_ASN1_FIND_END: u32 = 0;
pub const ASN1_F_ASN1_GENERALIZEDTIME_ADJ: u32 = 0;
pub const ASN1_F_ASN1_GENERATE_V3: u32 = 0;
pub const ASN1_F_ASN1_GET_INT64: u32 = 0;
pub const ASN1_F_ASN1_GET_OBJECT: u32 = 0;
pub const ASN1_F_ASN1_GET_UINT64: u32 = 0;
pub const ASN1_F_ASN1_I2D_BIO: u32 = 0;
pub const ASN1_F_ASN1_I2D_FP: u32 = 0;
pub const ASN1_F_ASN1_ITEM_D2I_FP: u32 = 0;
pub const ASN1_F_ASN1_ITEM_DUP: u32 = 0;
pub const ASN1_F_ASN1_ITEM_EMBED_D2I: u32 = 0;
pub const ASN1_F_ASN1_ITEM_EMBED_NEW: u32 = 0;
pub const ASN1_F_ASN1_ITEM_FLAGS_I2D: u32 = 0;
pub const ASN1_F_ASN1_ITEM_I2D_BIO: u32 = 0;
pub const ASN1_F_ASN1_ITEM_I2D_FP: u32 = 0;
pub const ASN1_F_ASN1_ITEM_PACK: u32 = 0;
pub const ASN1_F_ASN1_ITEM_SIGN: u32 = 0;
pub const ASN1_F_ASN1_ITEM_SIGN_CTX: u32 = 0;
pub const ASN1_F_ASN1_ITEM_UNPACK: u32 = 0;
pub const ASN1_F_ASN1_ITEM_VERIFY: u32 = 0;
pub const ASN1_F_ASN1_MBSTRING_NCOPY: u32 = 0;
pub const ASN1_F_ASN1_OBJECT_NEW: u32 = 0;
pub const ASN1_F_ASN1_OUTPUT_DATA: u32 = 0;
pub const ASN1_F_ASN1_PCTX_NEW: u32 = 0;
pub const ASN1_F_ASN1_PRIMITIVE_NEW: u32 = 0;
pub const ASN1_F_ASN1_SCTX_NEW: u32 = 0;
pub const ASN1_F_ASN1_SIGN: u32 = 0;
pub const ASN1_F_ASN1_STR2TYPE: u32 = 0;
pub const ASN1_F_ASN1_STRING_GET_INT64: u32 = 0;
pub const ASN1_F_ASN1_STRING_GET_UINT64: u32 = 0;
pub const ASN1_F_ASN1_STRING_SET: u32 = 0;
pub const ASN1_F_ASN1_STRING_TABLE_ADD: u32 = 0;
pub const ASN1_F_ASN1_STRING_TO_BN: u32 = 0;
pub const ASN1_F_ASN1_STRING_TYPE_NEW: u32 = 0;
pub const ASN1_F_ASN1_TEMPLATE_EX_D2I: u32 = 0;
pub const ASN1_F_ASN1_TEMPLATE_NEW: u32 = 0;
pub const ASN1_F_ASN1_TEMPLATE_NOEXP_D2I: u32 = 0;
pub const ASN1_F_ASN1_TIME_ADJ: u32 = 0;
pub const ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING: u32 = 0;
pub const ASN1_F_ASN1_TYPE_GET_OCTETSTRING: u32 = 0;
pub const ASN1_F_ASN1_UTCTIME_ADJ: u32 = 0;
pub const ASN1_F_ASN1_VERIFY: u32 = 0;
pub const ASN1_F_B64_READ_ASN1: u32 = 0;
pub const ASN1_F_B64_WRITE_ASN1: u32 = 0;
pub const ASN1_F_BIO_NEW_NDEF: u32 = 0;
pub const ASN1_F_BITSTR_CB: u32 = 0;
pub const ASN1_F_BN_TO_ASN1_STRING: u32 = 0;
pub const ASN1_F_C2I_ASN1_BIT_STRING: u32 = 0;
pub const ASN1_F_C2I_ASN1_INTEGER: u32 = 0;
pub const ASN1_F_C2I_ASN1_OBJECT: u32 = 0;
pub const ASN1_F_C2I_IBUF: u32 = 0;
pub const ASN1_F_C2I_UINT64_INT: u32 = 0;
pub const ASN1_F_COLLECT_DATA: u32 = 0;
pub const ASN1_F_D2I_ASN1_OBJECT: u32 = 0;
pub const ASN1_F_D2I_ASN1_UINTEGER: u32 = 0;
pub const ASN1_F_D2I_AUTOPRIVATEKEY: u32 = 0;
pub const ASN1_F_D2I_PRIVATEKEY: u32 = 0;
pub const ASN1_F_D2I_PUBLICKEY: u32 = 0;
pub const ASN1_F_DO_BUF: u32 = 0;
pub const ASN1_F_DO_CREATE: u32 = 0;
pub const ASN1_F_DO_DUMP: u32 = 0;
pub const ASN1_F_DO_TCREATE: u32 = 0;
pub const ASN1_F_I2A_ASN1_OBJECT: u32 = 0;
pub const ASN1_F_I2D_ASN1_BIO_STREAM: u32 = 0;
pub const ASN1_F_I2D_ASN1_OBJECT: u32 = 0;
pub const ASN1_F_I2D_DSA_PUBKEY: u32 = 0;
pub const ASN1_F_I2D_EC_PUBKEY: u32 = 0;
pub const ASN1_F_I2D_PRIVATEKEY: u32 = 0;
pub const ASN1_F_I2D_PUBLICKEY: u32 = 0;
pub const ASN1_F_I2D_RSA_PUBKEY: u32 = 0;
pub const ASN1_F_LONG_C2I: u32 = 0;
pub const ASN1_F_NDEF_PREFIX: u32 = 0;
pub const ASN1_F_NDEF_SUFFIX: u32 = 0;
pub const ASN1_F_OID_MODULE_INIT: u32 = 0;
pub const ASN1_F_PARSE_TAGGING: u32 = 0;
pub const ASN1_F_PKCS5_PBE2_SET_IV: u32 = 0;
pub const ASN1_F_PKCS5_PBE2_SET_SCRYPT: u32 = 0;
pub const ASN1_F_PKCS5_PBE_SET: u32 = 0;
pub const ASN1_F_PKCS5_PBE_SET0_ALGOR: u32 = 0;
pub const ASN1_F_PKCS5_PBKDF2_SET: u32 = 0;
pub const ASN1_F_PKCS5_SCRYPT_SET: u32 = 0;
pub const ASN1_F_SMIME_READ_ASN1: u32 = 0;
pub const ASN1_F_SMIME_TEXT: u32 = 0;
pub const ASN1_F_STABLE_GET: u32 = 0;
pub const ASN1_F_STBL_MODULE_INIT: u32 = 0;
pub const ASN1_F_UINT32_C2I: u32 = 0;
pub const ASN1_F_UINT32_NEW: u32 = 0;
pub const ASN1_F_UINT64_C2I: u32 = 0;
pub const ASN1_F_UINT64_NEW: u32 = 0;
pub const ASN1_F_X509_CRL_ADD0_REVOKED: u32 = 0;
pub const ASN1_F_X509_INFO_NEW: u32 = 0;
pub const ASN1_F_X509_NAME_ENCODE: u32 = 0;
pub const ASN1_F_X509_NAME_EX_D2I: u32 = 0;
pub const ASN1_F_X509_NAME_EX_NEW: u32 = 0;
pub const ASN1_F_X509_PKEY_NEW: u32 = 0;
pub const ASYNC_F_ASYNC_CTX_NEW: u32 = 0;
pub const ASYNC_F_ASYNC_INIT_THREAD: u32 = 0;
pub const ASYNC_F_ASYNC_JOB_NEW: u32 = 0;
pub const ASYNC_F_ASYNC_PAUSE_JOB: u32 = 0;
pub const ASYNC_F_ASYNC_START_FUNC: u32 = 0;
pub const ASYNC_F_ASYNC_START_JOB: u32 = 0;
pub const ASYNC_F_ASYNC_WAIT_CTX_SET_WAIT_FD: u32 = 0;
pub const BIO_F_ACPT_STATE: u32 = 0;
pub const BIO_F_ADDRINFO_WRAP: u32 = 0;
pub const BIO_F_ADDR_STRINGS: u32 = 0;
pub const BIO_F_BIO_ACCEPT: u32 = 0;
pub const BIO_F_BIO_ACCEPT_EX: u32 = 0;
pub const BIO_F_BIO_ACCEPT_NEW: u32 = 0;
pub const BIO_F_BIO_ADDR_NEW: u32 = 0;
pub const BIO_F_BIO_BIND: u32 = 0;
pub const BIO_F_BIO_CALLBACK_CTRL: u32 = 0;
pub const BIO_F_BIO_CONNECT: u32 = 0;
pub const BIO_F_BIO_CONNECT_NEW: u32 = 0;
pub const BIO_F_BIO_CTRL: u32 = 0;
pub const BIO_F_BIO_GETS: u32 = 0;
pub const BIO_F_BIO_GET_HOST_IP: u32 = 0;
pub const BIO_F_BIO_GET_NEW_INDEX: u32 = 0;
pub const BIO_F_BIO_GET_PORT: u32 = 0;
pub const BIO_F_BIO_LISTEN: u32 = 0;
pub const BIO_F_BIO_LOOKUP: u32 = 0;
pub const BIO_F_BIO_LOOKUP_EX: u32 = 0;
pub const BIO_F_BIO_MAKE_PAIR: u32 = 0;
pub const BIO_F_BIO_METH_NEW: u32 = 0;
pub const BIO_F_BIO_NEW: u32 = 0;
pub const BIO_F_BIO_NEW_DGRAM_SCTP: u32 = 0;
pub const BIO_F_BIO_NEW_FILE: u32 = 0;
pub const BIO_F_BIO_NEW_MEM_BUF: u32 = 0;
pub const BIO_F_BIO_NREAD: u32 = 0;
pub const BIO_F_BIO_NREAD0: u32 = 0;
pub const BIO_F_BIO_NWRITE: u32 = 0;
pub const BIO_F_BIO_NWRITE0: u32 = 0;
pub const BIO_F_BIO_PARSE_HOSTSERV: u32 = 0;
pub const BIO_F_BIO_PUTS: u32 = 0;
pub const BIO_F_BIO_READ: u32 = 0;
pub const BIO_F_BIO_READ_EX: u32 = 0;
pub const BIO_F_BIO_READ_INTERN: u32 = 0;
pub const BIO_F_BIO_SOCKET: u32 = 0;
pub const BIO_F_BIO_SOCKET_NBIO: u32 = 0;
pub const BIO_F_BIO_SOCK_INFO: u32 = 0;
pub const BIO_F_BIO_SOCK_INIT: u32 = 0;
pub const BIO_F_BIO_WRITE: u32 = 0;
pub const BIO_F_BIO_WRITE_EX: u32 = 0;
pub const BIO_F_BIO_WRITE_INTERN: u32 = 0;
pub const BIO_F_BUFFER_CTRL: u32 = 0;
pub const BIO_F_CONN_CTRL: u32 = 0;
pub const BIO_F_CONN_STATE: u32 = 0;
pub const BIO_F_DGRAM_SCTP_NEW: u32 = 0;
pub const BIO_F_DGRAM_SCTP_READ: u32 = 0;
pub const BIO_F_DGRAM_SCTP_WRITE: u32 = 0;
pub const BIO_F_DOAPR_OUTCH: u32 = 0;
pub const BIO_F_FILE_CTRL: u32 = 0;
pub const BIO_F_FILE_READ: u32 = 0;
pub const BIO_F_LINEBUFFER_CTRL: u32 = 0;
pub const BIO_F_LINEBUFFER_NEW: u32 = 0;
pub const BIO_F_MEM_WRITE: u32 = 0;
pub const BIO_F_NBIOF_NEW: u32 = 0;
pub const BIO_F_SLG_WRITE: u32 = 0;
pub const BIO_F_SSL_NEW: u32 = 0;
pub const BN_F_BNRAND: u32 = 0;
pub const BN_F_BNRAND_RANGE: u32 = 0;
pub const BN_F_BN_BLINDING_CONVERT_EX: u32 = 0;
pub const BN_F_BN_BLINDING_CREATE_PARAM: u32 = 0;
pub const BN_F_BN_BLINDING_INVERT_EX: u32 = 0;
pub const BN_F_BN_BLINDING_NEW: u32 = 0;
pub const BN_F_BN_BLINDING_UPDATE: u32 = 0;
pub const BN_F_BN_BN2DEC: u32 = 0;
pub const BN_F_BN_BN2HEX: u32 = 0;
pub const BN_F_BN_COMPUTE_WNAF: u32 = 0;
pub const BN_F_BN_CTX_GET: u32 = 0;
pub const BN_F_BN_CTX_NEW: u32 = 0;
pub const BN_F_BN_CTX_START: u32 = 0;
pub const BN_F_BN_DIV: u32 = 0;
pub const BN_F_BN_DIV_RECP: u32 = 0;
pub const BN_F_BN_EXP: u32 = 0;
pub const BN_F_BN_EXPAND_INTERNAL: u32 = 0;
pub const BN_F_BN_GENCB_NEW: u32 = 0;
pub const BN_F_BN_GENERATE_DSA_NONCE: u32 = 0;
pub const BN_F_BN_GENERATE_PRIME_EX: u32 = 0;
pub const BN_F_BN_GF2M_MOD: u32 = 0;
pub const BN_F_BN_GF2M_MOD_EXP: u32 = 0;
pub const BN_F_BN_GF2M_MOD_MUL: u32 = 0;
pub const BN_F_BN_GF2M_MOD_SOLVE_QUAD: u32 = 0;
pub const BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR: u32 = 0;
pub const BN_F_BN_GF2M_MOD_SQR: u32 = 0;
pub const BN_F_BN_GF2M_MOD_SQRT: u32 = 0;
pub const BN_F_BN_LSHIFT: u32 = 0;
pub const BN_F_BN_MOD_EXP2_MONT: u32 = 0;
pub const BN_F_BN_MOD_EXP_MONT: u32 = 0;
pub const BN_F_BN_MOD_EXP_MONT_CONSTTIME: u32 = 0;
pub const BN_F_BN_MOD_EXP_MONT_WORD: u32 = 0;
pub const BN_F_BN_MOD_EXP_RECP: u32 = 0;
pub const BN_F_BN_MOD_EXP_SIMPLE: u32 = 0;
pub const BN_F_BN_MOD_INVERSE: u32 = 0;
pub const BN_F_BN_MOD_INVERSE_NO_BRANCH: u32 = 0;
pub const BN_F_BN_MOD_LSHIFT_QUICK: u32 = 0;
pub const BN_F_BN_MOD_SQRT: u32 = 0;
pub const BN_F_BN_MONT_CTX_NEW: u32 = 0;
pub const BN_F_BN_MPI2BN: u32 = 0;
pub const BN_F_BN_NEW: u32 = 0;
pub const BN_F_BN_POOL_GET: u32 = 0;
pub const BN_F_BN_RAND: u32 = 0;
pub const BN_F_BN_RAND_RANGE: u32 = 0;
pub const BN_F_BN_RECP_CTX_NEW: u32 = 0;
pub const BN_F_BN_RSHIFT: u32 = 0;
pub const BN_F_BN_SET_WORDS: u32 = 0;
pub const BN_F_BN_STACK_PUSH: u32 = 0;
pub const BN_F_BN_USUB: u32 = 0;
pub const BUF_F_BUF_MEM_GROW: u32 = 0;
pub const BUF_F_BUF_MEM_GROW_CLEAN: u32 = 0;
pub const BUF_F_BUF_MEM_NEW: u32 = 0;
pub const CMS_F_CHECK_CONTENT: u32 = 0;
pub const CMS_F_CMS_ADD0_CERT: u32 = 0;
pub const CMS_F_CMS_ADD0_RECIPIENT_KEY: u32 = 0;
pub const CMS_F_CMS_ADD0_RECIPIENT_PASSWORD: u32 = 0;
pub const CMS_F_CMS_ADD1_RECEIPTREQUEST: u32 = 0;
pub const CMS_F_CMS_ADD1_RECIPIENT_CERT: u32 = 0;
pub const CMS_F_CMS_ADD1_SIGNER: u32 = 0;
pub const CMS_F_CMS_ADD1_SIGNINGTIME: u32 = 0;
pub const CMS_F_CMS_COMPRESS: u32 = 0;
pub const CMS_F_CMS_COMPRESSEDDATA_CREATE: u32 = 0;
pub const CMS_F_CMS_COMPRESSEDDATA_INIT_BIO: u32 = 0;
pub const CMS_F_CMS_COPY_CONTENT: u32 = 0;
pub const CMS_F_CMS_COPY_MESSAGEDIGEST: u32 = 0;
pub const CMS_F_CMS_DATA: u32 = 0;
pub const CMS_F_CMS_DATAFINAL: u32 = 0;
pub const CMS_F_CMS_DATAINIT: u32 = 0;
pub const CMS_F_CMS_DECRYPT: u32 = 0;
pub const CMS_F_CMS_DECRYPT_SET1_KEY: u32 = 0;
pub const CMS_F_CMS_DECRYPT_SET1_PASSWORD: u32 = 0;
pub const CMS_F_CMS_DECRYPT_SET1_PKEY: u32 = 0;
pub const CMS_F_CMS_DIGESTALGORITHM_FIND_CTX: u32 = 0;
pub const CMS_F_CMS_DIGESTALGORITHM_INIT_BIO: u32 = 0;
pub const CMS_F_CMS_DIGESTEDDATA_DO_FINAL: u32 = 0;
pub const CMS_F_CMS_DIGEST_VERIFY: u32 = 0;
pub const CMS_F_CMS_ENCODE_RECEIPT: u32 = 0;
pub const CMS_F_CMS_ENCRYPT: u32 = 0;
pub const CMS_F_CMS_ENCRYPTEDCONTENT_INIT: u32 = 0;
pub const CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO: u32 = 0;
pub const CMS_F_CMS_ENCRYPTEDDATA_DECRYPT: u32 = 0;
pub const CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT: u32 = 0;
pub const CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY: u32 = 0;
pub const CMS_F_CMS_ENVELOPEDDATA_CREATE: u32 = 0;
pub const CMS_F_CMS_ENVELOPEDDATA_INIT_BIO: u32 = 0;
pub const CMS_F_CMS_ENVELOPED_DATA_INIT: u32 = 0;
pub const CMS_F_CMS_ENV_ASN1_CTRL: u32 = 0;
pub const CMS_F_CMS_FINAL: u32 = 0;
pub const CMS_F_CMS_GET0_CERTIFICATE_CHOICES: u32 = 0;
pub const CMS_F_CMS_GET0_CONTENT: u32 = 0;
pub const CMS_F_CMS_GET0_ECONTENT_TYPE: u32 = 0;
pub const CMS_F_CMS_GET0_ENVELOPED: u32 = 0;
pub const CMS_F_CMS_GET0_REVOCATION_CHOICES: u32 = 0;
pub const CMS_F_CMS_GET0_SIGNED: u32 = 0;
pub const CMS_F_CMS_MSGSIGDIGEST_ADD1: u32 = 0;
pub const CMS_F_CMS_RECEIPTREQUEST_CREATE0: u32 = 0;
pub const CMS_F_CMS_RECEIPT_VERIFY: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_DECRYPT: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_ENCRYPT: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_SET0_KEY: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD: u32 = 0;
pub const CMS_F_CMS_RECIPIENTINFO_SET0_PKEY: u32 = 0;
pub const CMS_F_CMS_SD_ASN1_CTRL: u32 = 0;
pub const CMS_F_CMS_SET1_IAS: u32 = 0;
pub const CMS_F_CMS_SET1_KEYID: u32 = 0;
pub const CMS_F_CMS_SET1_SIGNERIDENTIFIER: u32 = 0;
pub const CMS_F_CMS_SET_DETACHED: u32 = 0;
pub const CMS_F_CMS_SIGN: u32 = 0;
pub const CMS_F_CMS_SIGNED_DATA_INIT: u32 = 0;
pub const CMS_F_CMS_SIGNERINFO_CONTENT_SIGN: u32 = 0;
pub const CMS_F_CMS_SIGNERINFO_SIGN: u32 = 0;
pub const CMS_F_CMS_SIGNERINFO_VERIFY: u32 = 0;
pub const CMS_F_CMS_SIGNERINFO_VERIFY_CERT: u32 = 0;
pub const CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT: u32 = 0;
pub const CMS_F_CMS_SIGN_RECEIPT: u32 = 0;
pub const CMS_F_CMS_SI_CHECK_ATTRIBUTES: u32 = 0;
pub const CMS_F_CMS_STREAM: u32 = 0;
pub const CMS_F_CMS_UNCOMPRESS: u32 = 0;
pub const CMS_F_CMS_VERIFY: u32 = 0;
pub const CMS_F_KEK_UNWRAP_KEY: u32 = 0;
pub const COMP_F_BIO_ZLIB_FLUSH: u32 = 0;
pub const COMP_F_BIO_ZLIB_NEW: u32 = 0;
pub const COMP_F_BIO_ZLIB_READ: u32 = 0;
pub const COMP_F_BIO_ZLIB_WRITE: u32 = 0;
pub const COMP_F_COMP_CTX_NEW: u32 = 0;
pub const CONF_F_CONF_DUMP_FP: u32 = 0;
pub const CONF_F_CONF_LOAD: u32 = 0;
pub const CONF_F_CONF_LOAD_FP: u32 = 0;
pub const CONF_F_CONF_PARSE_LIST: u32 = 0;
pub const CONF_F_DEF_LOAD: u32 = 0;
pub const CONF_F_DEF_LOAD_BIO: u32 = 0;
pub const CONF_F_GET_NEXT_FILE: u32 = 0;
pub const CONF_F_MODULE_ADD: u32 = 0;
pub const CONF_F_MODULE_INIT: u32 = 0;
pub const CONF_F_MODULE_LOAD_DSO: u32 = 0;
pub const CONF_F_MODULE_RUN: u32 = 0;
pub const CONF_F_NCONF_DUMP_BIO: u32 = 0;
pub const CONF_F_NCONF_DUMP_FP: u32 = 0;
pub const CONF_F_NCONF_GET_NUMBER_E: u32 = 0;
pub const CONF_F_NCONF_GET_SECTION: u32 = 0;
pub const CONF_F_NCONF_GET_STRING: u32 = 0;
pub const CONF_F_NCONF_LOAD: u32 = 0;
pub const CONF_F_NCONF_LOAD_BIO: u32 = 0;
pub const CONF_F_NCONF_LOAD_FP: u32 = 0;
pub const CONF_F_NCONF_NEW: u32 = 0;
pub const CONF_F_PROCESS_INCLUDE: u32 = 0;
pub const CONF_F_SSL_MODULE_INIT: u32 = 0;
pub const CONF_F_STR_COPY: u32 = 0;
pub const CRYPTO_F_CMAC_CTX_NEW: u32 = 0;
pub const CRYPTO_F_CRYPTO_DUP_EX_DATA: u32 = 0;
pub const CRYPTO_F_CRYPTO_FREE_EX_DATA: u32 = 0;
pub const CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX: u32 = 0;
pub const CRYPTO_F_CRYPTO_MEMDUP: u32 = 0;
pub const CRYPTO_F_CRYPTO_NEW_EX_DATA: u32 = 0;
pub const CRYPTO_F_CRYPTO_OCB128_COPY_CTX: u32 = 0;
pub const CRYPTO_F_CRYPTO_OCB128_INIT: u32 = 0;
pub const CRYPTO_F_CRYPTO_SET_EX_DATA: u32 = 0;
pub const CRYPTO_F_GET_AND_LOCK: u32 = 0;
pub const CRYPTO_F_OPENSSL_ATEXIT: u32 = 0;
pub const CRYPTO_F_OPENSSL_BUF2HEXSTR: u32 = 0;
pub const CRYPTO_F_OPENSSL_FOPEN: u32 = 0;
pub const CRYPTO_F_OPENSSL_HEXSTR2BUF: u32 = 0;
pub const CRYPTO_F_OPENSSL_INIT_CRYPTO: u32 = 0;
pub const CRYPTO_F_OPENSSL_LH_NEW: u32 = 0;
pub const CRYPTO_F_OPENSSL_SK_DEEP_COPY: u32 = 0;
pub const CRYPTO_F_OPENSSL_SK_DUP: u32 = 0;
pub const CRYPTO_F_PKEY_HMAC_INIT: u32 = 0;
pub const CRYPTO_F_PKEY_POLY1305_INIT: u32 = 0;
pub const CRYPTO_F_PKEY_SIPHASH_INIT: u32 = 0;
pub const CRYPTO_F_SK_RESERVE: u32 = 0;
pub const CT_F_CTLOG_NEW: u32 = 0;
pub const CT_F_CTLOG_NEW_FROM_BASE64: u32 = 0;
pub const CT_F_CTLOG_NEW_FROM_CONF: u32 = 0;
pub const CT_F_CTLOG_STORE_LOAD_CTX_NEW: u32 = 0;
pub const CT_F_CTLOG_STORE_LOAD_FILE: u32 = 0;
pub const CT_F_CTLOG_STORE_LOAD_LOG: u32 = 0;
pub const CT_F_CTLOG_STORE_NEW: u32 = 0;
pub const CT_F_CT_BASE64_DECODE: u32 = 0;
pub const CT_F_CT_POLICY_EVAL_CTX_NEW: u32 = 0;
pub const CT_F_CT_V1_LOG_ID_FROM_PKEY: u32 = 0;
pub const CT_F_I2O_SCT: u32 = 0;
pub const CT_F_I2O_SCT_LIST: u32 = 0;
pub const CT_F_I2O_SCT_SIGNATURE: u32 = 0;
pub const CT_F_O2I_SCT: u32 = 0;
pub const CT_F_O2I_SCT_LIST: u32 = 0;
pub const CT_F_O2I_SCT_SIGNATURE: u32 = 0;
pub const CT_F_SCT_CTX_NEW: u32 = 0;
pub const CT_F_SCT_CTX_VERIFY: u32 = 0;
pub const CT_F_SCT_NEW: u32 = 0;
pub const CT_F_SCT_NEW_FROM_BASE64: u32 = 0;
pub const CT_F_SCT_SET0_LOG_ID: u32 = 0;
pub const CT_F_SCT_SET1_EXTENSIONS: u32 = 0;
pub const CT_F_SCT_SET1_LOG_ID: u32 = 0;
pub const CT_F_SCT_SET1_SIGNATURE: u32 = 0;
pub const CT_F_SCT_SET_LOG_ENTRY_TYPE: u32 = 0;
pub const CT_F_SCT_SET_SIGNATURE_NID: u32 = 0;
pub const CT_F_SCT_SET_VERSION: u32 = 0;
pub const DH_F_COMPUTE_KEY: u32 = 0;
pub const DH_F_DHPARAMS_PRINT_FP: u32 = 0;
pub const DH_F_DH_BUILTIN_GENPARAMS: u32 = 0;
pub const DH_F_DH_CHECK_EX: u32 = 0;
pub const DH_F_DH_CHECK_PARAMS_EX: u32 = 0;
pub const DH_F_DH_CHECK_PUB_KEY_EX: u32 = 0;
pub const DH_F_DH_CMS_DECRYPT: u32 = 0;
pub const DH_F_DH_CMS_SET_PEERKEY: u32 = 0;
pub const DH_F_DH_CMS_SET_SHARED_INFO: u32 = 0;
pub const DH_F_DH_METH_DUP: u32 = 0;
pub const DH_F_DH_METH_NEW: u32 = 0;
pub const DH_F_DH_METH_SET1_NAME: u32 = 0;
pub const DH_F_DH_NEW_BY_NID: u32 = 0;
pub const DH_F_DH_NEW_METHOD: u32 = 0;
pub const DH_F_DH_PARAM_DECODE: u32 = 0;
pub const DH_F_DH_PKEY_PUBLIC_CHECK: u32 = 0;
pub const DH_F_DH_PRIV_DECODE: u32 = 0;
pub const DH_F_DH_PRIV_ENCODE: u32 = 0;
pub const DH_F_DH_PUB_DECODE: u32 = 0;
pub const DH_F_DH_PUB_ENCODE: u32 = 0;
pub const DH_F_DO_DH_PRINT: u32 = 0;
pub const DH_F_GENERATE_KEY: u32 = 0;
pub const DH_F_PKEY_DH_CTRL_STR: u32 = 0;
pub const DH_F_PKEY_DH_DERIVE: u32 = 0;
pub const DH_F_PKEY_DH_INIT: u32 = 0;
pub const DH_F_PKEY_DH_KEYGEN: u32 = 0;
pub const DSA_F_DSAPARAMS_PRINT: u32 = 0;
pub const DSA_F_DSAPARAMS_PRINT_FP: u32 = 0;
pub const DSA_F_DSA_BUILTIN_PARAMGEN: u32 = 0;
pub const DSA_F_DSA_BUILTIN_PARAMGEN2: u32 = 0;
pub const DSA_F_DSA_DO_SIGN: u32 = 0;
pub const DSA_F_DSA_DO_VERIFY: u32 = 0;
pub const DSA_F_DSA_METH_DUP: u32 = 0;
pub const DSA_F_DSA_METH_NEW: u32 = 0;
pub const DSA_F_DSA_METH_SET1_NAME: u32 = 0;
pub const DSA_F_DSA_NEW_METHOD: u32 = 0;
pub const DSA_F_DSA_PARAM_DECODE: u32 = 0;
pub const DSA_F_DSA_PRINT_FP: u32 = 0;
pub const DSA_F_DSA_PRIV_DECODE: u32 = 0;
pub const DSA_F_DSA_PRIV_ENCODE: u32 = 0;
pub const DSA_F_DSA_PUB_DECODE: u32 = 0;
pub const DSA_F_DSA_PUB_ENCODE: u32 = 0;
pub const DSA_F_DSA_SIGN: u32 = 0;
pub const DSA_F_DSA_SIGN_SETUP: u32 = 0;
pub const DSA_F_DSA_SIG_NEW: u32 = 0;
pub const DSA_F_OLD_DSA_PRIV_DECODE: u32 = 0;
pub const DSA_F_PKEY_DSA_CTRL: u32 = 0;
pub const DSA_F_PKEY_DSA_CTRL_STR: u32 = 0;
pub const DSA_F_PKEY_DSA_KEYGEN: u32 = 0;
pub const EC_F_BN_TO_FELEM: u32 = 0;
pub const EC_F_D2I_ECPARAMETERS: u32 = 0;
pub const EC_F_D2I_ECPKPARAMETERS: u32 = 0;
pub const EC_F_D2I_ECPRIVATEKEY: u32 = 0;
pub const EC_F_DO_EC_KEY_PRINT: u32 = 0;
pub const EC_F_ECDH_CMS_DECRYPT: u32 = 0;
pub const EC_F_ECDH_CMS_SET_SHARED_INFO: u32 = 0;
pub const EC_F_ECDH_COMPUTE_KEY: u32 = 0;
pub const EC_F_ECDH_SIMPLE_COMPUTE_KEY: u32 = 0;
pub const EC_F_ECDSA_DO_SIGN_EX: u32 = 0;
pub const EC_F_ECDSA_DO_VERIFY: u32 = 0;
pub const EC_F_ECDSA_SIGN_EX: u32 = 0;
pub const EC_F_ECDSA_SIGN_SETUP: u32 = 0;
pub const EC_F_ECDSA_SIG_NEW: u32 = 0;
pub const EC_F_ECDSA_VERIFY: u32 = 0;
pub const EC_F_ECD_ITEM_VERIFY: u32 = 0;
pub const EC_F_ECKEY_PARAM2TYPE: u32 = 0;
pub const EC_F_ECKEY_PARAM_DECODE: u32 = 0;
pub const EC_F_ECKEY_PRIV_DECODE: u32 = 0;
pub const EC_F_ECKEY_PRIV_ENCODE: u32 = 0;
pub const EC_F_ECKEY_PUB_DECODE: u32 = 0;
pub const EC_F_ECKEY_PUB_ENCODE: u32 = 0;
pub const EC_F_ECKEY_TYPE2PARAM: u32 = 0;
pub const EC_F_ECPARAMETERS_PRINT: u32 = 0;
pub const EC_F_ECPARAMETERS_PRINT_FP: u32 = 0;
pub const EC_F_ECPKPARAMETERS_PRINT: u32 = 0;
pub const EC_F_ECPKPARAMETERS_PRINT_FP: u32 = 0;
pub const EC_F_ECP_NISTZ256_GET_AFFINE: u32 = 0;
pub const EC_F_ECP_NISTZ256_INV_MOD_ORD: u32 = 0;
pub const EC_F_ECP_NISTZ256_MULT_PRECOMPUTE: u32 = 0;
pub const EC_F_ECP_NISTZ256_POINTS_MUL: u32 = 0;
pub const EC_F_ECP_NISTZ256_PRE_COMP_NEW: u32 = 0;
pub const EC_F_ECP_NISTZ256_WINDOWED_MUL: u32 = 0;
pub const EC_F_ECX_KEY_OP: u32 = 0;
pub const EC_F_ECX_PRIV_ENCODE: u32 = 0;
pub const EC_F_ECX_PUB_ENCODE: u32 = 0;
pub const EC_F_EC_ASN1_GROUP2CURVE: u32 = 0;
pub const EC_F_EC_ASN1_GROUP2FIELDID: u32 = 0;
pub const EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_FIELD_INV: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_LADDER_POST: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_LADDER_PRE: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_OCT2POINT: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_POINT2OCT: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_POINTS_MUL: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES: u32 = 0;
pub const EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES: u32 = 0;
pub const EC_F_EC_GFP_MONT_FIELD_DECODE: u32 = 0;
pub const EC_F_EC_GFP_MONT_FIELD_ENCODE: u32 = 0;
pub const EC_F_EC_GFP_MONT_FIELD_INV: u32 = 0;
pub const EC_F_EC_GFP_MONT_FIELD_MUL: u32 = 0;
pub const EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE: u32 = 0;
pub const EC_F_EC_GFP_MONT_FIELD_SQR: u32 = 0;
pub const EC_F_EC_GFP_MONT_GROUP_SET_CURVE: u32 = 0;
pub const EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE: u32 = 0;
pub const EC_F_EC_GFP_NISTP224_POINTS_MUL: u32 = 0;
pub const EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES: u32 = 0;
pub const EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE: u32 = 0;
pub const EC_F_EC_GFP_NISTP256_POINTS_MUL: u32 = 0;
pub const EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES: u32 = 0;
pub const EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE: u32 = 0;
pub const EC_F_EC_GFP_NISTP521_POINTS_MUL: u32 = 0;
pub const EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES: u32 = 0;
pub const EC_F_EC_GFP_NIST_FIELD_MUL: u32 = 0;
pub const EC_F_EC_GFP_NIST_FIELD_SQR: u32 = 0;
pub const EC_F_EC_GFP_NIST_GROUP_SET_CURVE: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_FIELD_INV: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_MAKE_AFFINE: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_OCT2POINT: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_POINT2OCT: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES: u32 = 0;
pub const EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES: u32 = 0;
pub const EC_F_EC_GROUP_CHECK: u32 = 0;
pub const EC_F_EC_GROUP_CHECK_DISCRIMINANT: u32 = 0;
pub const EC_F_EC_GROUP_COPY: u32 = 0;
pub const EC_F_EC_GROUP_GET_CURVE: u32 = 0;
pub const EC_F_EC_GROUP_GET_CURVE_GF2M: u32 = 0;
pub const EC_F_EC_GROUP_GET_CURVE_GFP: u32 = 0;
pub const EC_F_EC_GROUP_GET_DEGREE: u32 = 0;
pub const EC_F_EC_GROUP_GET_ECPARAMETERS: u32 = 0;
pub const EC_F_EC_GROUP_GET_ECPKPARAMETERS: u32 = 0;
pub const EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS: u32 = 0;
pub const EC_F_EC_GROUP_GET_TRINOMIAL_BASIS: u32 = 0;
pub const EC_F_EC_GROUP_NEW: u32 = 0;
pub const EC_F_EC_GROUP_NEW_BY_CURVE_NAME: u32 = 0;
pub const EC_F_EC_GROUP_NEW_FROM_DATA: u32 = 0;
pub const EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS: u32 = 0;
pub const EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS: u32 = 0;
pub const EC_F_EC_GROUP_SET_CURVE: u32 = 0;
pub const EC_F_EC_GROUP_SET_CURVE_GF2M: u32 = 0;
pub const EC_F_EC_GROUP_SET_CURVE_GFP: u32 = 0;
pub const EC_F_EC_GROUP_SET_GENERATOR: u32 = 0;
pub const EC_F_EC_GROUP_SET_SEED: u32 = 0;
pub const EC_F_EC_KEY_CHECK_KEY: u32 = 0;
pub const EC_F_EC_KEY_COPY: u32 = 0;
pub const EC_F_EC_KEY_GENERATE_KEY: u32 = 0;
pub const EC_F_EC_KEY_NEW: u32 = 0;
pub const EC_F_EC_KEY_NEW_METHOD: u32 = 0;
pub const EC_F_EC_KEY_OCT2PRIV: u32 = 0;
pub const EC_F_EC_KEY_PRINT: u32 = 0;
pub const EC_F_EC_KEY_PRINT_FP: u32 = 0;
pub const EC_F_EC_KEY_PRIV2BUF: u32 = 0;
pub const EC_F_EC_KEY_PRIV2OCT: u32 = 0;
pub const EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES: u32 = 0;
pub const EC_F_EC_KEY_SIMPLE_CHECK_KEY: u32 = 0;
pub const EC_F_EC_KEY_SIMPLE_OCT2PRIV: u32 = 0;
pub const EC_F_EC_KEY_SIMPLE_PRIV2OCT: u32 = 0;
pub const EC_F_EC_PKEY_CHECK: u32 = 0;
pub const EC_F_EC_PKEY_PARAM_CHECK: u32 = 0;
pub const EC_F_EC_POINTS_MAKE_AFFINE: u32 = 0;
pub const EC_F_EC_POINTS_MUL: u32 = 0;
pub const EC_F_EC_POINT_ADD: u32 = 0;
pub const EC_F_EC_POINT_BN2POINT: u32 = 0;
pub const EC_F_EC_POINT_CMP: u32 = 0;
pub const EC_F_EC_POINT_COPY: u32 = 0;
pub const EC_F_EC_POINT_DBL: u32 = 0;
pub const EC_F_EC_POINT_GET_AFFINE_COORDINATES: u32 = 0;
pub const EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M: u32 = 0;
pub const EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP: u32 = 0;
pub const EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP: u32 = 0;
pub const EC_F_EC_POINT_INVERT: u32 = 0;
pub const EC_F_EC_POINT_IS_AT_INFINITY: u32 = 0;
pub const EC_F_EC_POINT_IS_ON_CURVE: u32 = 0;
pub const EC_F_EC_POINT_MAKE_AFFINE: u32 = 0;
pub const EC_F_EC_POINT_NEW: u32 = 0;
pub const EC_F_EC_POINT_OCT2POINT: u32 = 0;
pub const EC_F_EC_POINT_POINT2BUF: u32 = 0;
pub const EC_F_EC_POINT_POINT2OCT: u32 = 0;
pub const EC_F_EC_POINT_SET_AFFINE_COORDINATES: u32 = 0;
pub const EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M: u32 = 0;
pub const EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP: u32 = 0;
pub const EC_F_EC_POINT_SET_COMPRESSED_COORDINATES: u32 = 0;
pub const EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M: u32 = 0;
pub const EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP: u32 = 0;
pub const EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP: u32 = 0;
pub const EC_F_EC_POINT_SET_TO_INFINITY: u32 = 0;
pub const EC_F_EC_PRE_COMP_NEW: u32 = 0;
pub const EC_F_EC_SCALAR_MUL_LADDER: u32 = 0;
pub const EC_F_EC_WNAF_MUL: u32 = 0;
pub const EC_F_EC_WNAF_PRECOMPUTE_MULT: u32 = 0;
pub const EC_F_I2D_ECPARAMETERS: u32 = 0;
pub const EC_F_I2D_ECPKPARAMETERS: u32 = 0;
pub const EC_F_I2D_ECPRIVATEKEY: u32 = 0;
pub const EC_F_I2O_ECPUBLICKEY: u32 = 0;
pub const EC_F_NISTP224_PRE_COMP_NEW: u32 = 0;
pub const EC_F_NISTP256_PRE_COMP_NEW: u32 = 0;
pub const EC_F_NISTP521_PRE_COMP_NEW: u32 = 0;
pub const EC_F_O2I_ECPUBLICKEY: u32 = 0;
pub const EC_F_OLD_EC_PRIV_DECODE: u32 = 0;
pub const EC_F_OSSL_ECDH_COMPUTE_KEY: u32 = 0;
pub const EC_F_OSSL_ECDSA_SIGN_SIG: u32 = 0;
pub const EC_F_OSSL_ECDSA_VERIFY_SIG: u32 = 0;
pub const EC_F_PKEY_ECD_CTRL: u32 = 0;
pub const EC_F_PKEY_ECD_DIGESTSIGN: u32 = 0;
pub const EC_F_PKEY_ECD_DIGESTSIGN25519: u32 = 0;
pub const EC_F_PKEY_ECD_DIGESTSIGN448: u32 = 0;
pub const EC_F_PKEY_ECX_DERIVE: u32 = 0;
pub const EC_F_PKEY_EC_CTRL: u32 = 0;
pub const EC_F_PKEY_EC_CTRL_STR: u32 = 0;
pub const EC_F_PKEY_EC_DERIVE: u32 = 0;
pub const EC_F_PKEY_EC_INIT: u32 = 0;
pub const EC_F_PKEY_EC_KDF_DERIVE: u32 = 0;
pub const EC_F_PKEY_EC_KEYGEN: u32 = 0;
pub const EC_F_PKEY_EC_PARAMGEN: u32 = 0;
pub const EC_F_PKEY_EC_SIGN: u32 = 0;
pub const EC_F_VALIDATE_ECX_DERIVE: u32 = 0;
pub const ENGINE_F_DIGEST_UPDATE: u32 = 0;
pub const ENGINE_F_DYNAMIC_CTRL: u32 = 0;
pub const ENGINE_F_DYNAMIC_GET_DATA_CTX: u32 = 0;
pub const ENGINE_F_DYNAMIC_LOAD: u32 = 0;
pub const ENGINE_F_DYNAMIC_SET_DATA_CTX: u32 = 0;
pub const ENGINE_F_ENGINE_ADD: u32 = 0;
pub const ENGINE_F_ENGINE_BY_ID: u32 = 0;
pub const ENGINE_F_ENGINE_CMD_IS_EXECUTABLE: u32 = 0;
pub const ENGINE_F_ENGINE_CTRL: u32 = 0;
pub const ENGINE_F_ENGINE_CTRL_CMD: u32 = 0;
pub const ENGINE_F_ENGINE_CTRL_CMD_STRING: u32 = 0;
pub const ENGINE_F_ENGINE_FINISH: u32 = 0;
pub const ENGINE_F_ENGINE_GET_CIPHER: u32 = 0;
pub const ENGINE_F_ENGINE_GET_DIGEST: u32 = 0;
pub const ENGINE_F_ENGINE_GET_FIRST: u32 = 0;
pub const ENGINE_F_ENGINE_GET_LAST: u32 = 0;
pub const ENGINE_F_ENGINE_GET_NEXT: u32 = 0;
pub const ENGINE_F_ENGINE_GET_PKEY_ASN1_METH: u32 = 0;
pub const ENGINE_F_ENGINE_GET_PKEY_METH: u32 = 0;
pub const ENGINE_F_ENGINE_GET_PREV: u32 = 0;
pub const ENGINE_F_ENGINE_INIT: u32 = 0;
pub const ENGINE_F_ENGINE_LIST_ADD: u32 = 0;
pub const ENGINE_F_ENGINE_LIST_REMOVE: u32 = 0;
pub const ENGINE_F_ENGINE_LOAD_PRIVATE_KEY: u32 = 0;
pub const ENGINE_F_ENGINE_LOAD_PUBLIC_KEY: u32 = 0;
pub const ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT: u32 = 0;
pub const ENGINE_F_ENGINE_NEW: u32 = 0;
pub const ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR: u32 = 0;
pub const ENGINE_F_ENGINE_REMOVE: u32 = 0;
pub const ENGINE_F_ENGINE_SET_DEFAULT_STRING: u32 = 0;
pub const ENGINE_F_ENGINE_SET_ID: u32 = 0;
pub const ENGINE_F_ENGINE_SET_NAME: u32 = 0;
pub const ENGINE_F_ENGINE_TABLE_REGISTER: u32 = 0;
pub const ENGINE_F_ENGINE_UNLOCKED_FINISH: u32 = 0;
pub const ENGINE_F_ENGINE_UP_REF: u32 = 0;
pub const ENGINE_F_INT_CLEANUP_ITEM: u32 = 0;
pub const ENGINE_F_INT_CTRL_HELPER: u32 = 0;
pub const ENGINE_F_INT_ENGINE_CONFIGURE: u32 = 0;
pub const ENGINE_F_INT_ENGINE_MODULE_INIT: u32 = 0;
pub const ENGINE_F_OSSL_HMAC_INIT: u32 = 0;
pub const EVP_F_AESNI_INIT_KEY: u32 = 0;
pub const EVP_F_AESNI_XTS_INIT_KEY: u32 = 0;
pub const EVP_F_AES_GCM_CTRL: u32 = 0;
pub const EVP_F_AES_INIT_KEY: u32 = 0;
pub const EVP_F_AES_OCB_CIPHER: u32 = 0;
pub const EVP_F_AES_T4_INIT_KEY: u32 = 0;
pub const EVP_F_AES_T4_XTS_INIT_KEY: u32 = 0;
pub const EVP_F_AES_WRAP_CIPHER: u32 = 0;
pub const EVP_F_AES_XTS_INIT_KEY: u32 = 0;
pub const EVP_F_ALG_MODULE_INIT: u32 = 0;
pub const EVP_F_ARIA_CCM_INIT_KEY: u32 = 0;
pub const EVP_F_ARIA_GCM_CTRL: u32 = 0;
pub const EVP_F_ARIA_GCM_INIT_KEY: u32 = 0;
pub const EVP_F_ARIA_INIT_KEY: u32 = 0;
pub const EVP_F_B64_NEW: u32 = 0;
pub const EVP_F_CAMELLIA_INIT_KEY: u32 = 0;
pub const EVP_F_CHACHA20_POLY1305_CTRL: u32 = 0;
pub const EVP_F_CMLL_T4_INIT_KEY: u32 = 0;
pub const EVP_F_DES_EDE3_WRAP_CIPHER: u32 = 0;
pub const EVP_F_DO_SIGVER_INIT: u32 = 0;
pub const EVP_F_ENC_NEW: u32 = 0;
pub const EVP_F_EVP_CIPHERINIT_EX: u32 = 0;
pub const EVP_F_EVP_CIPHER_ASN1_TO_PARAM: u32 = 0;
pub const EVP_F_EVP_CIPHER_CTX_COPY: u32 = 0;
pub const EVP_F_EVP_CIPHER_CTX_CTRL: u32 = 0;
pub const EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH: u32 = 0;
pub const EVP_F_EVP_CIPHER_PARAM_TO_ASN1: u32 = 0;
pub const EVP_F_EVP_DECRYPTFINAL_EX: u32 = 0;
pub const EVP_F_EVP_DECRYPTUPDATE: u32 = 0;
pub const EVP_F_EVP_DIGESTFINALXOF: u32 = 0;
pub const EVP_F_EVP_DIGESTINIT_EX: u32 = 0;
pub const EVP_F_EVP_ENCRYPTDECRYPTUPDATE: u32 = 0;
pub const EVP_F_EVP_ENCRYPTFINAL_EX: u32 = 0;
pub const EVP_F_EVP_ENCRYPTUPDATE: u32 = 0;
pub const EVP_F_EVP_MD_CTX_COPY_EX: u32 = 0;
pub const EVP_F_EVP_MD_SIZE: u32 = 0;
pub const EVP_F_EVP_OPENINIT: u32 = 0;
pub const EVP_F_EVP_PBE_ALG_ADD: u32 = 0;
pub const EVP_F_EVP_PBE_ALG_ADD_TYPE: u32 = 0;
pub const EVP_F_EVP_PBE_CIPHERINIT: u32 = 0;
pub const EVP_F_EVP_PBE_SCRYPT: u32 = 0;
pub const EVP_F_EVP_PKCS82PKEY: u32 = 0;
pub const EVP_F_EVP_PKEY2PKCS8: u32 = 0;
pub const EVP_F_EVP_PKEY_ASN1_ADD0: u32 = 0;
pub const EVP_F_EVP_PKEY_CHECK: u32 = 0;
pub const EVP_F_EVP_PKEY_COPY_PARAMETERS: u32 = 0;
pub const EVP_F_EVP_PKEY_CTX_CTRL: u32 = 0;
pub const EVP_F_EVP_PKEY_CTX_CTRL_STR: u32 = 0;
pub const EVP_F_EVP_PKEY_CTX_DUP: u32 = 0;
pub const EVP_F_EVP_PKEY_CTX_MD: u32 = 0;
pub const EVP_F_EVP_PKEY_DECRYPT: u32 = 0;
pub const EVP_F_EVP_PKEY_DECRYPT_INIT: u32 = 0;
pub const EVP_F_EVP_PKEY_DECRYPT_OLD: u32 = 0;
pub const EVP_F_EVP_PKEY_DERIVE: u32 = 0;
pub const EVP_F_EVP_PKEY_DERIVE_INIT: u32 = 0;
pub const EVP_F_EVP_PKEY_DERIVE_SET_PEER: u32 = 0;
pub const EVP_F_EVP_PKEY_ENCRYPT: u32 = 0;
pub const EVP_F_EVP_PKEY_ENCRYPT_INIT: u32 = 0;
pub const EVP_F_EVP_PKEY_ENCRYPT_OLD: u32 = 0;
pub const EVP_F_EVP_PKEY_GET0_DH: u32 = 0;
pub const EVP_F_EVP_PKEY_GET0_DSA: u32 = 0;
pub const EVP_F_EVP_PKEY_GET0_EC_KEY: u32 = 0;
pub const EVP_F_EVP_PKEY_GET0_HMAC: u32 = 0;
pub const EVP_F_EVP_PKEY_GET0_POLY1305: u32 = 0;
pub const EVP_F_EVP_PKEY_GET0_RSA: u32 = 0;
pub const EVP_F_EVP_PKEY_GET0_SIPHASH: u32 = 0;
pub const EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY: u32 = 0;
pub const EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY: u32 = 0;
pub const EVP_F_EVP_PKEY_KEYGEN: u32 = 0;
pub const EVP_F_EVP_PKEY_KEYGEN_INIT: u32 = 0;
pub const EVP_F_EVP_PKEY_METH_ADD0: u32 = 0;
pub const EVP_F_EVP_PKEY_METH_NEW: u32 = 0;
pub const EVP_F_EVP_PKEY_NEW: u32 = 0;
pub const EVP_F_EVP_PKEY_NEW_CMAC_KEY: u32 = 0;
pub const EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY: u32 = 0;
pub const EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY: u32 = 0;
pub const EVP_F_EVP_PKEY_PARAMGEN: u32 = 0;
pub const EVP_F_EVP_PKEY_PARAMGEN_INIT: u32 = 0;
pub const EVP_F_EVP_PKEY_PARAM_CHECK: u32 = 0;
pub const EVP_F_EVP_PKEY_PUBLIC_CHECK: u32 = 0;
pub const EVP_F_EVP_PKEY_SET1_ENGINE: u32 = 0;
pub const EVP_F_EVP_PKEY_SET_ALIAS_TYPE: u32 = 0;
pub const EVP_F_EVP_PKEY_SIGN: u32 = 0;
pub const EVP_F_EVP_PKEY_SIGN_INIT: u32 = 0;
pub const EVP_F_EVP_PKEY_VERIFY: u32 = 0;
pub const EVP_F_EVP_PKEY_VERIFY_INIT: u32 = 0;
pub const EVP_F_EVP_PKEY_VERIFY_RECOVER: u32 = 0;
pub const EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT: u32 = 0;
pub const EVP_F_EVP_SIGNFINAL: u32 = 0;
pub const EVP_F_EVP_VERIFYFINAL: u32 = 0;
pub const EVP_F_INT_CTX_NEW: u32 = 0;
pub const EVP_F_OK_NEW: u32 = 0;
pub const EVP_F_PKCS5_PBE_KEYIVGEN: u32 = 0;
pub const EVP_F_PKCS5_V2_PBE_KEYIVGEN: u32 = 0;
pub const EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN: u32 = 0;
pub const EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN: u32 = 0;
pub const EVP_F_PKEY_SET_TYPE: u32 = 0;
pub const EVP_F_RC2_MAGIC_TO_METH: u32 = 0;
pub const EVP_F_RC5_CTRL: u32 = 0;
pub const EVP_F_R_32_12_16_INIT_KEY: u32 = 0;
pub const EVP_F_S390X_AES_GCM_CTRL: u32 = 0;
pub const EVP_F_UPDATE: u32 = 0;
pub const KDF_F_PKEY_HKDF_CTRL_STR: u32 = 0;
pub const KDF_F_PKEY_HKDF_DERIVE: u32 = 0;
pub const KDF_F_PKEY_HKDF_INIT: u32 = 0;
pub const KDF_F_PKEY_SCRYPT_CTRL_STR: u32 = 0;
pub const KDF_F_PKEY_SCRYPT_CTRL_UINT64: u32 = 0;
pub const KDF_F_PKEY_SCRYPT_DERIVE: u32 = 0;
pub const KDF_F_PKEY_SCRYPT_INIT: u32 = 0;
pub const KDF_F_PKEY_SCRYPT_SET_MEMBUF: u32 = 0;
pub const KDF_F_PKEY_TLS1_PRF_CTRL_STR: u32 = 0;
pub const KDF_F_PKEY_TLS1_PRF_DERIVE: u32 = 0;
pub const KDF_F_PKEY_TLS1_PRF_INIT: u32 = 0;
pub const KDF_F_TLS1_PRF_ALG: u32 = 0;
pub const KDF_R_INVALID_DIGEST: u32 = 0;
pub const KDF_R_MISSING_ITERATION_COUNT: u32 = 0;
pub const KDF_R_MISSING_KEY: u32 = 0;
pub const KDF_R_MISSING_MESSAGE_DIGEST: u32 = 0;
pub const KDF_R_MISSING_PARAMETER: u32 = 0;
pub const KDF_R_MISSING_PASS: u32 = 0;
pub const KDF_R_MISSING_SALT: u32 = 0;
pub const KDF_R_MISSING_SECRET: u32 = 0;
pub const KDF_R_MISSING_SEED: u32 = 0;
pub const KDF_R_UNKNOWN_PARAMETER_TYPE: u32 = 0;
pub const KDF_R_VALUE_ERROR: u32 = 0;
pub const KDF_R_VALUE_MISSING: u32 = 0;
pub const OBJ_F_OBJ_ADD_OBJECT: u32 = 0;
pub const OBJ_F_OBJ_ADD_SIGID: u32 = 0;
pub const OBJ_F_OBJ_CREATE: u32 = 0;
pub const OBJ_F_OBJ_DUP: u32 = 0;
pub const OBJ_F_OBJ_NAME_NEW_INDEX: u32 = 0;
pub const OBJ_F_OBJ_NID2LN: u32 = 0;
pub const OBJ_F_OBJ_NID2OBJ: u32 = 0;
pub const OBJ_F_OBJ_NID2SN: u32 = 0;
pub const OBJ_F_OBJ_TXT2OBJ: u32 = 0;
pub const OCSP_F_D2I_OCSP_NONCE: u32 = 0;
pub const OCSP_F_OCSP_BASIC_ADD1_STATUS: u32 = 0;
pub const OCSP_F_OCSP_BASIC_SIGN: u32 = 0;
pub const OCSP_F_OCSP_BASIC_SIGN_CTX: u32 = 0;
pub const OCSP_F_OCSP_BASIC_VERIFY: u32 = 0;
pub const OCSP_F_OCSP_CERT_ID_NEW: u32 = 0;
pub const OCSP_F_OCSP_CHECK_DELEGATED: u32 = 0;
pub const OCSP_F_OCSP_CHECK_IDS: u32 = 0;
pub const OCSP_F_OCSP_CHECK_ISSUER: u32 = 0;
pub const OCSP_F_OCSP_CHECK_VALIDITY: u32 = 0;
pub const OCSP_F_OCSP_MATCH_ISSUERID: u32 = 0;
pub const OCSP_F_OCSP_PARSE_URL: u32 = 0;
pub const OCSP_F_OCSP_REQUEST_SIGN: u32 = 0;
pub const OCSP_F_OCSP_REQUEST_VERIFY: u32 = 0;
pub const OCSP_F_OCSP_RESPONSE_GET1_BASIC: u32 = 0;
pub const OCSP_F_PARSE_HTTP_LINE1: u32 = 0;
pub const PEM_F_B2I_DSS: u32 = 0;
pub const PEM_F_B2I_PVK_BIO: u32 = 0;
pub const PEM_F_B2I_RSA: u32 = 0;
pub const PEM_F_CHECK_BITLEN_DSA: u32 = 0;
pub const PEM_F_CHECK_BITLEN_RSA: u32 = 0;
pub const PEM_F_D2I_PKCS8PRIVATEKEY_BIO: u32 = 0;
pub const PEM_F_D2I_PKCS8PRIVATEKEY_FP: u32 = 0;
pub const PEM_F_DO_B2I: u32 = 0;
pub const PEM_F_DO_B2I_BIO: u32 = 0;
pub const PEM_F_DO_BLOB_HEADER: u32 = 0;
pub const PEM_F_DO_I2B: u32 = 0;
pub const PEM_F_DO_PK8PKEY: u32 = 0;
pub const PEM_F_DO_PK8PKEY_FP: u32 = 0;
pub const PEM_F_DO_PVK_BODY: u32 = 0;
pub const PEM_F_DO_PVK_HEADER: u32 = 0;
pub const PEM_F_GET_HEADER_AND_DATA: u32 = 0;
pub const PEM_F_GET_NAME: u32 = 0;
pub const PEM_F_I2B_PVK: u32 = 0;
pub const PEM_F_I2B_PVK_BIO: u32 = 0;
pub const PEM_F_LOAD_IV: u32 = 0;
pub const PEM_F_PEM_ASN1_READ: u32 = 0;
pub const PEM_F_PEM_ASN1_READ_BIO: u32 = 0;
pub const PEM_F_PEM_ASN1_WRITE: u32 = 0;
pub const PEM_F_PEM_ASN1_WRITE_BIO: u32 = 0;
pub const PEM_F_PEM_DEF_CALLBACK: u32 = 0;
pub const PEM_F_PEM_DO_HEADER: u32 = 0;
pub const PEM_F_PEM_GET_EVP_CIPHER_INFO: u32 = 0;
pub const PEM_F_PEM_READ: u32 = 0;
pub const PEM_F_PEM_READ_BIO: u32 = 0;
pub const PEM_F_PEM_READ_BIO_DHPARAMS: u32 = 0;
pub const PEM_F_PEM_READ_BIO_EX: u32 = 0;
pub const PEM_F_PEM_READ_BIO_PARAMETERS: u32 = 0;
pub const PEM_F_PEM_READ_BIO_PRIVATEKEY: u32 = 0;
pub const PEM_F_PEM_READ_DHPARAMS: u32 = 0;
pub const PEM_F_PEM_READ_PRIVATEKEY: u32 = 0;
pub const PEM_F_PEM_SIGNFINAL: u32 = 0;
pub const PEM_F_PEM_WRITE: u32 = 0;
pub const PEM_F_PEM_WRITE_BIO: u32 = 0;
pub const PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL: u32 = 0;
pub const PEM_F_PEM_WRITE_PRIVATEKEY: u32 = 0;
pub const PEM_F_PEM_X509_INFO_READ: u32 = 0;
pub const PEM_F_PEM_X509_INFO_READ_BIO: u32 = 0;
pub const PEM_F_PEM_X509_INFO_WRITE_BIO: u32 = 0;
pub const PKCS12_F_OPENSSL_ASC2UNI: u32 = 0;
pub const PKCS12_F_OPENSSL_UNI2ASC: u32 = 0;
pub const PKCS12_F_OPENSSL_UNI2UTF8: u32 = 0;
pub const PKCS12_F_OPENSSL_UTF82UNI: u32 = 0;
pub const PKCS12_F_PKCS12_CREATE: u32 = 0;
pub const PKCS12_F_PKCS12_GEN_MAC: u32 = 0;
pub const PKCS12_F_PKCS12_INIT: u32 = 0;
pub const PKCS12_F_PKCS12_ITEM_DECRYPT_D2I: u32 = 0;
pub const PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT: u32 = 0;
pub const PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG: u32 = 0;
pub const PKCS12_F_PKCS12_KEY_GEN_ASC: u32 = 0;
pub const PKCS12_F_PKCS12_KEY_GEN_UNI: u32 = 0;
pub const PKCS12_F_PKCS12_KEY_GEN_UTF8: u32 = 0;
pub const PKCS12_F_PKCS12_NEWPASS: u32 = 0;
pub const PKCS12_F_PKCS12_PACK_P7DATA: u32 = 0;
pub const PKCS12_F_PKCS12_PACK_P7ENCDATA: u32 = 0;
pub const PKCS12_F_PKCS12_PARSE: u32 = 0;
pub const PKCS12_F_PKCS12_PBE_CRYPT: u32 = 0;
pub const PKCS12_F_PKCS12_PBE_KEYIVGEN: u32 = 0;
pub const PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF: u32 = 0;
pub const PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8: u32 = 0;
pub const PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT: u32 = 0;
pub const PKCS12_F_PKCS12_SETUP_MAC: u32 = 0;
pub const PKCS12_F_PKCS12_SET_MAC: u32 = 0;
pub const PKCS12_F_PKCS12_UNPACK_AUTHSAFES: u32 = 0;
pub const PKCS12_F_PKCS12_UNPACK_P7DATA: u32 = 0;
pub const PKCS12_F_PKCS12_VERIFY_MAC: u32 = 0;
pub const PKCS12_F_PKCS8_ENCRYPT: u32 = 0;
pub const PKCS12_F_PKCS8_SET0_PBE: u32 = 0;
pub const PKCS7_F_DO_PKCS7_SIGNED_ATTRIB: u32 = 0;
pub const PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME: u32 = 0;
pub const PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP: u32 = 0;
pub const PKCS7_F_PKCS7_ADD_CERTIFICATE: u32 = 0;
pub const PKCS7_F_PKCS7_ADD_CRL: u32 = 0;
pub const PKCS7_F_PKCS7_ADD_RECIPIENT_INFO: u32 = 0;
pub const PKCS7_F_PKCS7_ADD_SIGNATURE: u32 = 0;
pub const PKCS7_F_PKCS7_ADD_SIGNER: u32 = 0;
pub const PKCS7_F_PKCS7_BIO_ADD_DIGEST: u32 = 0;
pub const PKCS7_F_PKCS7_COPY_EXISTING_DIGEST: u32 = 0;
pub const PKCS7_F_PKCS7_CTRL: u32 = 0;
pub const PKCS7_F_PKCS7_DATADECODE: u32 = 0;
pub const PKCS7_F_PKCS7_DATAFINAL: u32 = 0;
pub const PKCS7_F_PKCS7_DATAINIT: u32 = 0;
pub const PKCS7_F_PKCS7_DATAVERIFY: u32 = 0;
pub const PKCS7_F_PKCS7_DECRYPT: u32 = 0;
pub const PKCS7_F_PKCS7_DECRYPT_RINFO: u32 = 0;
pub const PKCS7_F_PKCS7_ENCODE_RINFO: u32 = 0;
pub const PKCS7_F_PKCS7_ENCRYPT: u32 = 0;
pub const PKCS7_F_PKCS7_FINAL: u32 = 0;
pub const PKCS7_F_PKCS7_FIND_DIGEST: u32 = 0;
pub const PKCS7_F_PKCS7_GET0_SIGNERS: u32 = 0;
pub const PKCS7_F_PKCS7_RECIP_INFO_SET: u32 = 0;
pub const PKCS7_F_PKCS7_SET_CIPHER: u32 = 0;
pub const PKCS7_F_PKCS7_SET_CONTENT: u32 = 0;
pub const PKCS7_F_PKCS7_SET_DIGEST: u32 = 0;
pub const PKCS7_F_PKCS7_SET_TYPE: u32 = 0;
pub const PKCS7_F_PKCS7_SIGN: u32 = 0;
pub const PKCS7_F_PKCS7_SIGNATUREVERIFY: u32 = 0;
pub const PKCS7_F_PKCS7_SIGNER_INFO_SET: u32 = 0;
pub const PKCS7_F_PKCS7_SIGNER_INFO_SIGN: u32 = 0;
pub const PKCS7_F_PKCS7_SIGN_ADD_SIGNER: u32 = 0;
pub const PKCS7_F_PKCS7_SIMPLE_SMIMECAP: u32 = 0;
pub const PKCS7_F_PKCS7_VERIFY: u32 = 0;
pub const RAND_F_DATA_COLLECT_METHOD: u32 = 0;
pub const RAND_F_DRBG_BYTES: u32 = 0;
pub const RAND_F_DRBG_GET_ENTROPY: u32 = 0;
pub const RAND_F_DRBG_SETUP: u32 = 0;
pub const RAND_F_GET_ENTROPY: u32 = 0;
pub const RAND_F_RAND_BYTES: u32 = 0;
pub const RAND_F_RAND_DRBG_ENABLE_LOCKING: u32 = 0;
pub const RAND_F_RAND_DRBG_GENERATE: u32 = 0;
pub const RAND_F_RAND_DRBG_GET_ENTROPY: u32 = 0;
pub const RAND_F_RAND_DRBG_GET_NONCE: u32 = 0;
pub const RAND_F_RAND_DRBG_INSTANTIATE: u32 = 0;
pub const RAND_F_RAND_DRBG_NEW: u32 = 0;
pub const RAND_F_RAND_DRBG_RESEED: u32 = 0;
pub const RAND_F_RAND_DRBG_RESTART: u32 = 0;
pub const RAND_F_RAND_DRBG_SET: u32 = 0;
pub const RAND_F_RAND_DRBG_SET_DEFAULTS: u32 = 0;
pub const RAND_F_RAND_DRBG_UNINSTANTIATE: u32 = 0;
pub const RAND_F_RAND_LOAD_FILE: u32 = 0;
pub const RAND_F_RAND_POOL_ACQUIRE_ENTROPY: u32 = 0;
pub const RAND_F_RAND_POOL_ADD: u32 = 0;
pub const RAND_F_RAND_POOL_ADD_BEGIN: u32 = 0;
pub const RAND_F_RAND_POOL_ADD_END: u32 = 0;
pub const RAND_F_RAND_POOL_ATTACH: u32 = 0;
pub const RAND_F_RAND_POOL_BYTES_NEEDED: u32 = 0;
pub const RAND_F_RAND_POOL_GROW: u32 = 0;
pub const RAND_F_RAND_POOL_NEW: u32 = 0;
pub const RAND_F_RAND_PSEUDO_BYTES: u32 = 0;
pub const RAND_F_RAND_WRITE_FILE: u32 = 0;
pub const RSA_F_CHECK_PADDING_MD: u32 = 0;
pub const RSA_F_ENCODE_PKCS1: u32 = 0;
pub const RSA_F_INT_RSA_VERIFY: u32 = 0;
pub const RSA_F_OLD_RSA_PRIV_DECODE: u32 = 0;
pub const RSA_F_PKEY_PSS_INIT: u32 = 0;
pub const RSA_F_PKEY_RSA_CTRL: u32 = 0;
pub const RSA_F_PKEY_RSA_CTRL_STR: u32 = 0;
pub const RSA_F_PKEY_RSA_SIGN: u32 = 0;
pub const RSA_F_PKEY_RSA_VERIFY: u32 = 0;
pub const RSA_F_PKEY_RSA_VERIFYRECOVER: u32 = 0;
pub const RSA_F_RSA_ALGOR_TO_MD: u32 = 0;
pub const RSA_F_RSA_BUILTIN_KEYGEN: u32 = 0;
pub const RSA_F_RSA_CHECK_KEY: u32 = 0;
pub const RSA_F_RSA_CHECK_KEY_EX: u32 = 0;
pub const RSA_F_RSA_CMS_DECRYPT: u32 = 0;
pub const RSA_F_RSA_CMS_VERIFY: u32 = 0;
pub const RSA_F_RSA_ITEM_VERIFY: u32 = 0;
pub const RSA_F_RSA_METH_DUP: u32 = 0;
pub const RSA_F_RSA_METH_NEW: u32 = 0;
pub const RSA_F_RSA_METH_SET1_NAME: u32 = 0;
pub const RSA_F_RSA_MGF1_TO_MD: u32 = 0;
pub const RSA_F_RSA_MULTIP_INFO_NEW: u32 = 0;
pub const RSA_F_RSA_NEW_METHOD: u32 = 0;
pub const RSA_F_RSA_NULL: u32 = 0;
pub const RSA_F_RSA_NULL_PRIVATE_DECRYPT: u32 = 0;
pub const RSA_F_RSA_NULL_PRIVATE_ENCRYPT: u32 = 0;
pub const RSA_F_RSA_NULL_PUBLIC_DECRYPT: u32 = 0;
pub const RSA_F_RSA_NULL_PUBLIC_ENCRYPT: u32 = 0;
pub const RSA_F_RSA_OSSL_PRIVATE_DECRYPT: u32 = 0;
pub const RSA_F_RSA_OSSL_PRIVATE_ENCRYPT: u32 = 0;
pub const RSA_F_RSA_OSSL_PUBLIC_DECRYPT: u32 = 0;
pub const RSA_F_RSA_OSSL_PUBLIC_ENCRYPT: u32 = 0;
pub const RSA_F_RSA_PADDING_ADD_NONE: u32 = 0;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_OAEP: u32 = 0;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1: u32 = 0;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_PSS: u32 = 0;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1: u32 = 0;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1: u32 = 0;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2: u32 = 0;
pub const RSA_F_RSA_PADDING_ADD_SSLV23: u32 = 0;
pub const RSA_F_RSA_PADDING_ADD_X931: u32 = 0;
pub const RSA_F_RSA_PADDING_CHECK_NONE: u32 = 0;
pub const RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP: u32 = 0;
pub const RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1: u32 = 0;
pub const RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1: u32 = 0;
pub const RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2: u32 = 0;
pub const RSA_F_RSA_PADDING_CHECK_SSLV23: u32 = 0;
pub const RSA_F_RSA_PADDING_CHECK_X931: u32 = 0;
pub const RSA_F_RSA_PARAM_DECODE: u32 = 0;
pub const RSA_F_RSA_PRINT: u32 = 0;
pub const RSA_F_RSA_PRINT_FP: u32 = 0;
pub const RSA_F_RSA_PRIV_DECODE: u32 = 0;
pub const RSA_F_RSA_PRIV_ENCODE: u32 = 0;
pub const RSA_F_RSA_PSS_GET_PARAM: u32 = 0;
pub const RSA_F_RSA_PSS_TO_CTX: u32 = 0;
pub const RSA_F_RSA_PUB_DECODE: u32 = 0;
pub const RSA_F_RSA_SETUP_BLINDING: u32 = 0;
pub const RSA_F_RSA_SIGN: u32 = 0;
pub const RSA_F_RSA_SIGN_ASN1_OCTET_STRING: u32 = 0;
pub const RSA_F_RSA_VERIFY: u32 = 0;
pub const RSA_F_RSA_VERIFY_ASN1_OCTET_STRING: u32 = 0;
pub const RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1: u32 = 0;
pub const RSA_F_SETUP_TBUF: u32 = 0;
pub const OSSL_STORE_F_FILE_CTRL: u32 = 0;
pub const OSSL_STORE_F_FILE_FIND: u32 = 0;
pub const OSSL_STORE_F_FILE_GET_PASS: u32 = 0;
pub const OSSL_STORE_F_FILE_LOAD: u32 = 0;
pub const OSSL_STORE_F_FILE_LOAD_TRY_DECODE: u32 = 0;
pub const OSSL_STORE_F_FILE_NAME_TO_URI: u32 = 0;
pub const OSSL_STORE_F_FILE_OPEN: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_ATTACH_PEM_BIO: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_EXPECT: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_FILE_ATTACH_PEM_BIO_INT: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_FIND: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_GET0_LOADER_INT: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_GET1_CERT: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_GET1_CRL: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_GET1_NAME: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_GET1_NAME_DESCRIPTION: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_GET1_PARAMS: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_GET1_PKEY: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_NEW_CERT: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_NEW_CRL: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_NEW_EMBEDDED: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_NEW_NAME: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_NEW_PARAMS: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_NEW_PKEY: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INFO_SET0_NAME_DESCRIPTION: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_INIT_ONCE: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_LOADER_NEW: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_OPEN: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_OPEN_INT: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_REGISTER_LOADER_INT: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_SEARCH_BY_ALIAS: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_SEARCH_BY_ISSUER_SERIAL: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_SEARCH_BY_KEY_FINGERPRINT: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_SEARCH_BY_NAME: u32 = 0;
pub const OSSL_STORE_F_OSSL_STORE_UNREGISTER_LOADER_INT: u32 = 0;
pub const OSSL_STORE_F_TRY_DECODE_PARAMS: u32 = 0;
pub const OSSL_STORE_F_TRY_DECODE_PKCS12: u32 = 0;
pub const OSSL_STORE_F_TRY_DECODE_PKCS8ENCRYPTED: u32 = 0;
pub const TS_F_DEF_SERIAL_CB: u32 = 0;
pub const TS_F_DEF_TIME_CB: u32 = 0;
pub const TS_F_ESS_ADD_SIGNING_CERT: u32 = 0;
pub const TS_F_ESS_ADD_SIGNING_CERT_V2: u32 = 0;
pub const TS_F_ESS_CERT_ID_NEW_INIT: u32 = 0;
pub const TS_F_ESS_CERT_ID_V2_NEW_INIT: u32 = 0;
pub const TS_F_ESS_SIGNING_CERT_NEW_INIT: u32 = 0;
pub const TS_F_ESS_SIGNING_CERT_V2_NEW_INIT: u32 = 0;
pub const TS_F_INT_TS_RESP_VERIFY_TOKEN: u32 = 0;
pub const TS_F_PKCS7_TO_TS_TST_INFO: u32 = 0;
pub const TS_F_TS_ACCURACY_SET_MICROS: u32 = 0;
pub const TS_F_TS_ACCURACY_SET_MILLIS: u32 = 0;
pub const TS_F_TS_ACCURACY_SET_SECONDS: u32 = 0;
pub const TS_F_TS_CHECK_IMPRINTS: u32 = 0;
pub const TS_F_TS_CHECK_NONCES: u32 = 0;
pub const TS_F_TS_CHECK_POLICY: u32 = 0;
pub const TS_F_TS_CHECK_SIGNING_CERTS: u32 = 0;
pub const TS_F_TS_CHECK_STATUS_INFO: u32 = 0;
pub const TS_F_TS_COMPUTE_IMPRINT: u32 = 0;
pub const TS_F_TS_CONF_INVALID: u32 = 0;
pub const TS_F_TS_CONF_LOAD_CERT: u32 = 0;
pub const TS_F_TS_CONF_LOAD_CERTS: u32 = 0;
pub const TS_F_TS_CONF_LOAD_KEY: u32 = 0;
pub const TS_F_TS_CONF_LOOKUP_FAIL: u32 = 0;
pub const TS_F_TS_CONF_SET_DEFAULT_ENGINE: u32 = 0;
pub const TS_F_TS_GET_STATUS_TEXT: u32 = 0;
pub const TS_F_TS_MSG_IMPRINT_SET_ALGO: u32 = 0;
pub const TS_F_TS_REQ_SET_MSG_IMPRINT: u32 = 0;
pub const TS_F_TS_REQ_SET_NONCE: u32 = 0;
pub const TS_F_TS_REQ_SET_POLICY_ID: u32 = 0;
pub const TS_F_TS_RESP_CREATE_RESPONSE: u32 = 0;
pub const TS_F_TS_RESP_CREATE_TST_INFO: u32 = 0;
pub const TS_F_TS_RESP_CTX_ADD_FAILURE_INFO: u32 = 0;
pub const TS_F_TS_RESP_CTX_ADD_MD: u32 = 0;
pub const TS_F_TS_RESP_CTX_ADD_POLICY: u32 = 0;
pub const TS_F_TS_RESP_CTX_NEW: u32 = 0;
pub const TS_F_TS_RESP_CTX_SET_ACCURACY: u32 = 0;
pub const TS_F_TS_RESP_CTX_SET_CERTS: u32 = 0;
pub const TS_F_TS_RESP_CTX_SET_DEF_POLICY: u32 = 0;
pub const TS_F_TS_RESP_CTX_SET_SIGNER_CERT: u32 = 0;
pub const TS_F_TS_RESP_CTX_SET_STATUS_INFO: u32 = 0;
pub const TS_F_TS_RESP_GET_POLICY: u32 = 0;
pub const TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION: u32 = 0;
pub const TS_F_TS_RESP_SET_STATUS_INFO: u32 = 0;
pub const TS_F_TS_RESP_SET_TST_INFO: u32 = 0;
pub const TS_F_TS_RESP_SIGN: u32 = 0;
pub const TS_F_TS_RESP_VERIFY_SIGNATURE: u32 = 0;
pub const TS_F_TS_TST_INFO_SET_ACCURACY: u32 = 0;
pub const TS_F_TS_TST_INFO_SET_MSG_IMPRINT: u32 = 0;
pub const TS_F_TS_TST_INFO_SET_NONCE: u32 = 0;
pub const TS_F_TS_TST_INFO_SET_POLICY_ID: u32 = 0;
pub const TS_F_TS_TST_INFO_SET_SERIAL: u32 = 0;
pub const TS_F_TS_TST_INFO_SET_TIME: u32 = 0;
pub const TS_F_TS_TST_INFO_SET_TSA: u32 = 0;
pub const TS_F_TS_VERIFY: u32 = 0;
pub const TS_F_TS_VERIFY_CERT: u32 = 0;
pub const TS_F_TS_VERIFY_CTX_NEW: u32 = 0;
pub const UI_F_CLOSE_CONSOLE: u32 = 0;
pub const UI_F_ECHO_CONSOLE: u32 = 0;
pub const UI_F_GENERAL_ALLOCATE_BOOLEAN: u32 = 0;
pub const UI_F_GENERAL_ALLOCATE_PROMPT: u32 = 0;
pub const UI_F_NOECHO_CONSOLE: u32 = 0;
pub const UI_F_OPEN_CONSOLE: u32 = 0;
pub const UI_F_UI_CONSTRUCT_PROMPT: u32 = 0;
pub const UI_F_UI_CREATE_METHOD: u32 = 0;
pub const UI_F_UI_CTRL: u32 = 0;
pub const UI_F_UI_DUP_ERROR_STRING: u32 = 0;
pub const UI_F_UI_DUP_INFO_STRING: u32 = 0;
pub const UI_F_UI_DUP_INPUT_BOOLEAN: u32 = 0;
pub const UI_F_UI_DUP_INPUT_STRING: u32 = 0;
pub const UI_F_UI_DUP_USER_DATA: u32 = 0;
pub const UI_F_UI_DUP_VERIFY_STRING: u32 = 0;
pub const UI_F_UI_GET0_RESULT: u32 = 0;
pub const UI_F_UI_GET_RESULT_LENGTH: u32 = 0;
pub const UI_F_UI_NEW_METHOD: u32 = 0;
pub const UI_F_UI_PROCESS: u32 = 0;
pub const UI_F_UI_SET_RESULT: u32 = 0;
pub const UI_F_UI_SET_RESULT_EX: u32 = 0;
pub const X509_F_ADD_CERT_DIR: u32 = 0;
pub const X509_F_BUILD_CHAIN: u32 = 0;
pub const X509_F_BY_FILE_CTRL: u32 = 0;
pub const X509_F_CHECK_NAME_CONSTRAINTS: u32 = 0;
pub const X509_F_CHECK_POLICY: u32 = 0;
pub const X509_F_DANE_I2D: u32 = 0;
pub const X509_F_DIR_CTRL: u32 = 0;
pub const X509_F_GET_CERT_BY_SUBJECT: u32 = 0;
pub const X509_F_I2D_X509_AUX: u32 = 0;
pub const X509_F_LOOKUP_CERTS_SK: u32 = 0;
pub const X509_F_NETSCAPE_SPKI_B64_DECODE: u32 = 0;
pub const X509_F_NETSCAPE_SPKI_B64_ENCODE: u32 = 0;
pub const X509_F_NEW_DIR: u32 = 0;
pub const X509_F_X509AT_ADD1_ATTR: u32 = 0;
pub const X509_F_X509V3_ADD_EXT: u32 = 0;
pub const X509_F_X509_ATTRIBUTE_CREATE_BY_NID: u32 = 0;
pub const X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ: u32 = 0;
pub const X509_F_X509_ATTRIBUTE_CREATE_BY_TXT: u32 = 0;
pub const X509_F_X509_ATTRIBUTE_GET0_DATA: u32 = 0;
pub const X509_F_X509_ATTRIBUTE_SET1_DATA: u32 = 0;
pub const X509_F_X509_CHECK_PRIVATE_KEY: u32 = 0;
pub const X509_F_X509_CRL_DIFF: u32 = 0;
pub const X509_F_X509_CRL_METHOD_NEW: u32 = 0;
pub const X509_F_X509_CRL_PRINT_FP: u32 = 0;
pub const X509_F_X509_EXTENSION_CREATE_BY_NID: u32 = 0;
pub const X509_F_X509_EXTENSION_CREATE_BY_OBJ: u32 = 0;
pub const X509_F_X509_GET_PUBKEY_PARAMETERS: u32 = 0;
pub const X509_F_X509_LOAD_CERT_CRL_FILE: u32 = 0;
pub const X509_F_X509_LOAD_CERT_FILE: u32 = 0;
pub const X509_F_X509_LOAD_CRL_FILE: u32 = 0;
pub const X509_F_X509_LOOKUP_METH_NEW: u32 = 0;
pub const X509_F_X509_LOOKUP_NEW: u32 = 0;
pub const X509_F_X509_NAME_ADD_ENTRY: u32 = 0;
pub const X509_F_X509_NAME_CANON: u32 = 0;
pub const X509_F_X509_NAME_ENTRY_CREATE_BY_NID: u32 = 0;
pub const X509_F_X509_NAME_ENTRY_CREATE_BY_TXT: u32 = 0;
pub const X509_F_X509_NAME_ENTRY_SET_OBJECT: u32 = 0;
pub const X509_F_X509_NAME_ONELINE: u32 = 0;
pub const X509_F_X509_NAME_PRINT: u32 = 0;
pub const X509_F_X509_OBJECT_NEW: u32 = 0;
pub const X509_F_X509_PRINT_EX_FP: u32 = 0;
pub const X509_F_X509_PUBKEY_DECODE: u32 = 0;
pub const X509_F_X509_PUBKEY_GET: u32 = 0;
pub const X509_F_X509_PUBKEY_GET0: u32 = 0;
pub const X509_F_X509_PUBKEY_SET: u32 = 0;
pub const X509_F_X509_REQ_CHECK_PRIVATE_KEY: u32 = 0;
pub const X509_F_X509_REQ_PRINT_EX: u32 = 0;
pub const X509_F_X509_REQ_PRINT_FP: u32 = 0;
pub const X509_F_X509_REQ_TO_X509: u32 = 0;
pub const X509_F_X509_STORE_ADD_CERT: u32 = 0;
pub const X509_F_X509_STORE_ADD_CRL: u32 = 0;
pub const X509_F_X509_STORE_ADD_LOOKUP: u32 = 0;
pub const X509_F_X509_STORE_CTX_GET1_ISSUER: u32 = 0;
pub const X509_F_X509_STORE_CTX_INIT: u32 = 0;
pub const X509_F_X509_STORE_CTX_NEW: u32 = 0;
pub const X509_F_X509_STORE_CTX_PURPOSE_INHERIT: u32 = 0;
pub const X509_F_X509_STORE_NEW: u32 = 0;
pub const X509_F_X509_TO_X509_REQ: u32 = 0;
pub const X509_F_X509_TRUST_ADD: u32 = 0;
pub const X509_F_X509_TRUST_SET: u32 = 0;
pub const X509_F_X509_VERIFY_CERT: u32 = 0;
pub const X509_F_X509_VERIFY_PARAM_NEW: u32 = 0;
pub const X509V3_F_A2I_GENERAL_NAME: u32 = 0;
pub const X509V3_F_ADDR_VALIDATE_PATH_INTERNAL: u32 = 0;
pub const X509V3_F_ASIDENTIFIERCHOICE_CANONIZE: u32 = 0;
pub const X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL: u32 = 0;
pub const X509V3_F_BIGNUM_TO_STRING: u32 = 0;
pub const X509V3_F_COPY_EMAIL: u32 = 0;
pub const X509V3_F_COPY_ISSUER: u32 = 0;
pub const X509V3_F_DO_DIRNAME: u32 = 0;
pub const X509V3_F_DO_EXT_I2D: u32 = 0;
pub const X509V3_F_DO_EXT_NCONF: u32 = 0;
pub const X509V3_F_GNAMES_FROM_SECTNAME: u32 = 0;
pub const X509V3_F_I2S_ASN1_ENUMERATED: u32 = 0;
pub const X509V3_F_I2S_ASN1_IA5STRING: u32 = 0;
pub const X509V3_F_I2S_ASN1_INTEGER: u32 = 0;
pub const X509V3_F_I2V_AUTHORITY_INFO_ACCESS: u32 = 0;
pub const X509V3_F_LEVEL_ADD_NODE: u32 = 0;
pub const X509V3_F_NOTICE_SECTION: u32 = 0;
pub const X509V3_F_NREF_NOS: u32 = 0;
pub const X509V3_F_POLICY_CACHE_CREATE: u32 = 0;
pub const X509V3_F_POLICY_CACHE_NEW: u32 = 0;
pub const X509V3_F_POLICY_DATA_NEW: u32 = 0;
pub const X509V3_F_POLICY_SECTION: u32 = 0;
pub const X509V3_F_PROCESS_PCI_VALUE: u32 = 0;
pub const X509V3_F_R2I_CERTPOL: u32 = 0;
pub const X509V3_F_R2I_PCI: u32 = 0;
pub const X509V3_F_S2I_ASN1_IA5STRING: u32 = 0;
pub const X509V3_F_S2I_ASN1_INTEGER: u32 = 0;
pub const X509V3_F_S2I_ASN1_OCTET_STRING: u32 = 0;
pub const X509V3_F_S2I_SKEY_ID: u32 = 0;
pub const X509V3_F_SET_DIST_POINT_NAME: u32 = 0;
pub const X509V3_F_SXNET_ADD_ID_ASC: u32 = 0;
pub const X509V3_F_SXNET_ADD_ID_INTEGER: u32 = 0;
pub const X509V3_F_SXNET_ADD_ID_ULONG: u32 = 0;
pub const X509V3_F_SXNET_GET_ID_ASC: u32 = 0;
pub const X509V3_F_SXNET_GET_ID_ULONG: u32 = 0;
pub const X509V3_F_TREE_INIT: u32 = 0;
pub const X509V3_F_V2I_ASIDENTIFIERS: u32 = 0;
pub const X509V3_F_V2I_ASN1_BIT_STRING: u32 = 0;
pub const X509V3_F_V2I_AUTHORITY_INFO_ACCESS: u32 = 0;
pub const X509V3_F_V2I_AUTHORITY_KEYID: u32 = 0;
pub const X509V3_F_V2I_BASIC_CONSTRAINTS: u32 = 0;
pub const X509V3_F_V2I_CRLD: u32 = 0;
pub const X509V3_F_V2I_EXTENDED_KEY_USAGE: u32 = 0;
pub const X509V3_F_V2I_GENERAL_NAMES: u32 = 0;
pub const X509V3_F_V2I_GENERAL_NAME_EX: u32 = 0;
pub const X509V3_F_V2I_IDP: u32 = 0;
pub const X509V3_F_V2I_IPADDRBLOCKS: u32 = 0;
pub const X509V3_F_V2I_ISSUER_ALT: u32 = 0;
pub const X509V3_F_V2I_NAME_CONSTRAINTS: u32 = 0;
pub const X509V3_F_V2I_POLICY_CONSTRAINTS: u32 = 0;
pub const X509V3_F_V2I_POLICY_MAPPINGS: u32 = 0;
pub const X509V3_F_V2I_SUBJECT_ALT: u32 = 0;
pub const X509V3_F_V2I_TLS_FEATURE: u32 = 0;
pub const X509V3_F_V3_GENERIC_EXTENSION: u32 = 0;
pub const X509V3_F_X509V3_ADD1_I2D: u32 = 0;
pub const X509V3_F_X509V3_ADD_VALUE: u32 = 0;
pub const X509V3_F_X509V3_EXT_ADD: u32 = 0;
pub const X509V3_F_X509V3_EXT_ADD_ALIAS: u32 = 0;
pub const X509V3_F_X509V3_EXT_I2D: u32 = 0;
pub const X509V3_F_X509V3_EXT_NCONF: u32 = 0;
pub const X509V3_F_X509V3_GET_SECTION: u32 = 0;
pub const X509V3_F_X509V3_GET_STRING: u32 = 0;
pub const X509V3_F_X509V3_GET_VALUE_BOOL: u32 = 0;
pub const X509V3_F_X509V3_PARSE_LIST: u32 = 0;
pub const X509V3_F_X509_PURPOSE_ADD: u32 = 0;
pub const X509V3_F_X509_PURPOSE_SET: u32 = 0;
pub const CRYPTO_R_BAD_ALGORITHM_NAME: u32 = 117;
pub const CRYPTO_R_CONFLICTING_NAMES: u32 = 118;
pub const CRYPTO_R_HEX_STRING_TOO_SHORT: u32 = 121;
pub const CRYPTO_R_ILLEGAL_HEX_DIGIT: u32 = 102;
pub const CRYPTO_R_INSUFFICIENT_DATA_SPACE: u32 = 106;
pub const CRYPTO_R_INSUFFICIENT_PARAM_SIZE: u32 = 107;
pub const CRYPTO_R_INSUFFICIENT_SECURE_DATA_SPACE: u32 = 108;
pub const CRYPTO_R_INVALID_NEGATIVE_VALUE: u32 = 122;
pub const CRYPTO_R_INVALID_NULL_ARGUMENT: u32 = 109;
pub const CRYPTO_R_INVALID_OSSL_PARAM_TYPE: u32 = 110;
pub const CRYPTO_R_ODD_NUMBER_OF_DIGITS: u32 = 103;
pub const CRYPTO_R_PROVIDER_ALREADY_EXISTS: u32 = 104;
pub const CRYPTO_R_PROVIDER_SECTION_ERROR: u32 = 105;
pub const CRYPTO_R_RANDOM_SECTION_ERROR: u32 = 119;
pub const CRYPTO_R_SECURE_MALLOC_FAILURE: u32 = 111;
pub const CRYPTO_R_STRING_TOO_LONG: u32 = 112;
pub const CRYPTO_R_TOO_MANY_BYTES: u32 = 113;
pub const CRYPTO_R_TOO_MANY_RECORDS: u32 = 114;
pub const CRYPTO_R_TOO_SMALL_BUFFER: u32 = 116;
pub const CRYPTO_R_UNKNOWN_NAME_IN_RANDOM_SECTION: u32 = 120;
pub const CRYPTO_R_ZERO_LENGTH_NUMBER: u32 = 115;
pub const SSLEAY_VERSION_NUMBER: u32 = 805306448;
pub const OPENSSL_VERSION: u32 = 0;
pub const OPENSSL_CFLAGS: u32 = 1;
pub const OPENSSL_BUILT_ON: u32 = 2;
pub const OPENSSL_PLATFORM: u32 = 3;
pub const OPENSSL_DIR: u32 = 4;
pub const OPENSSL_ENGINES_DIR: u32 = 5;
pub const OPENSSL_VERSION_STRING: u32 = 6;
pub const OPENSSL_FULL_VERSION_STRING: u32 = 7;
pub const OPENSSL_MODULES_DIR: u32 = 8;
pub const OPENSSL_CPU_INFO: u32 = 9;
pub const OPENSSL_INFO_CONFIG_DIR: u32 = 1001;
pub const OPENSSL_INFO_ENGINES_DIR: u32 = 1002;
pub const OPENSSL_INFO_MODULES_DIR: u32 = 1003;
pub const OPENSSL_INFO_DSO_EXTENSION: u32 = 1004;
pub const OPENSSL_INFO_DIR_FILENAME_SEPARATOR: u32 = 1005;
pub const OPENSSL_INFO_LIST_SEPARATOR: u32 = 1006;
pub const OPENSSL_INFO_SEED_SOURCE: u32 = 1007;
pub const OPENSSL_INFO_CPU_SETTINGS: u32 = 1008;
pub const CRYPTO_EX_INDEX_SSL: u32 = 0;
pub const CRYPTO_EX_INDEX_SSL_CTX: u32 = 1;
pub const CRYPTO_EX_INDEX_SSL_SESSION: u32 = 2;
pub const CRYPTO_EX_INDEX_X509: u32 = 3;
pub const CRYPTO_EX_INDEX_X509_STORE: u32 = 4;
pub const CRYPTO_EX_INDEX_X509_STORE_CTX: u32 = 5;
pub const CRYPTO_EX_INDEX_DH: u32 = 6;
pub const CRYPTO_EX_INDEX_DSA: u32 = 7;
pub const CRYPTO_EX_INDEX_EC_KEY: u32 = 8;
pub const CRYPTO_EX_INDEX_RSA: u32 = 9;
pub const CRYPTO_EX_INDEX_ENGINE: u32 = 10;
pub const CRYPTO_EX_INDEX_UI: u32 = 11;
pub const CRYPTO_EX_INDEX_BIO: u32 = 12;
pub const CRYPTO_EX_INDEX_APP: u32 = 13;
pub const CRYPTO_EX_INDEX_UI_METHOD: u32 = 14;
pub const CRYPTO_EX_INDEX_RAND_DRBG: u32 = 15;
pub const CRYPTO_EX_INDEX_DRBG: u32 = 15;
pub const CRYPTO_EX_INDEX_OSSL_LIB_CTX: u32 = 16;
pub const CRYPTO_EX_INDEX_EVP_PKEY: u32 = 17;
pub const CRYPTO_EX_INDEX__COUNT: u32 = 18;
pub const CRYPTO_LOCK: u32 = 1;
pub const CRYPTO_UNLOCK: u32 = 2;
pub const CRYPTO_READ: u32 = 4;
pub const CRYPTO_WRITE: u32 = 8;
pub const OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS: u32 = 1;
pub const OPENSSL_INIT_LOAD_CRYPTO_STRINGS: u32 = 2;
pub const OPENSSL_INIT_ADD_ALL_CIPHERS: u32 = 4;
pub const OPENSSL_INIT_ADD_ALL_DIGESTS: u32 = 8;
pub const OPENSSL_INIT_NO_ADD_ALL_CIPHERS: u32 = 16;
pub const OPENSSL_INIT_NO_ADD_ALL_DIGESTS: u32 = 32;
pub const OPENSSL_INIT_LOAD_CONFIG: u32 = 64;
pub const OPENSSL_INIT_NO_LOAD_CONFIG: u32 = 128;
pub const OPENSSL_INIT_ASYNC: u32 = 256;
pub const OPENSSL_INIT_ENGINE_RDRAND: u32 = 512;
pub const OPENSSL_INIT_ENGINE_DYNAMIC: u32 = 1024;
pub const OPENSSL_INIT_ENGINE_OPENSSL: u32 = 2048;
pub const OPENSSL_INIT_ENGINE_CRYPTODEV: u32 = 4096;
pub const OPENSSL_INIT_ENGINE_CAPI: u32 = 8192;
pub const OPENSSL_INIT_ENGINE_PADLOCK: u32 = 16384;
pub const OPENSSL_INIT_ENGINE_AFALG: u32 = 32768;
pub const OPENSSL_INIT_ATFORK: u32 = 131072;
pub const OPENSSL_INIT_NO_ATEXIT: u32 = 524288;
pub const OPENSSL_INIT_ENGINE_ALL_BUILTIN: u32 = 30208;
pub const CRYPTO_ONCE_STATIC_INIT: u32 = 0;
pub const BN_R_ARG2_LT_ARG3: u32 = 100;
pub const BN_R_BAD_RECIPROCAL: u32 = 101;
pub const BN_R_BIGNUM_TOO_LONG: u32 = 114;
pub const BN_R_BITS_TOO_SMALL: u32 = 118;
pub const BN_R_CALLED_WITH_EVEN_MODULUS: u32 = 102;
pub const BN_R_DIV_BY_ZERO: u32 = 103;
pub const BN_R_ENCODING_ERROR: u32 = 104;
pub const BN_R_EXPAND_ON_STATIC_BIGNUM_DATA: u32 = 105;
pub const BN_R_INPUT_NOT_REDUCED: u32 = 110;
pub const BN_R_INVALID_LENGTH: u32 = 106;
pub const BN_R_INVALID_RANGE: u32 = 115;
pub const BN_R_INVALID_SHIFT: u32 = 119;
pub const BN_R_NOT_A_SQUARE: u32 = 111;
pub const BN_R_NOT_INITIALIZED: u32 = 107;
pub const BN_R_NO_INVERSE: u32 = 108;
pub const BN_R_NO_PRIME_CANDIDATE: u32 = 121;
pub const BN_R_NO_SOLUTION: u32 = 116;
pub const BN_R_NO_SUITABLE_DIGEST: u32 = 120;
pub const BN_R_PRIVATE_KEY_TOO_LARGE: u32 = 117;
pub const BN_R_P_IS_NOT_PRIME: u32 = 112;
pub const BN_R_TOO_MANY_ITERATIONS: u32 = 113;
pub const BN_R_TOO_MANY_TEMPORARY_VARIABLES: u32 = 109;
pub const BN_BYTES: u32 = 8;
pub const BN_BITS2: u32 = 64;
pub const BN_BITS: u32 = 128;
pub const BN_FLG_MALLOCED: u32 = 1;
pub const BN_FLG_STATIC_DATA: u32 = 2;
pub const BN_FLG_CONSTTIME: u32 = 4;
pub const BN_FLG_SECURE: u32 = 8;
pub const BN_FLG_EXP_CONSTTIME: u32 = 4;
pub const BN_FLG_FREE: u32 = 32768;
pub const BN_RAND_TOP_ANY: i32 = -1;
pub const BN_RAND_TOP_ONE: u32 = 0;
pub const BN_RAND_TOP_TWO: u32 = 1;
pub const BN_RAND_BOTTOM_ANY: u32 = 0;
pub const BN_RAND_BOTTOM_ODD: u32 = 1;
pub const BN_prime_checks: u32 = 0;
pub const BN_BLINDING_NO_UPDATE: u32 = 1;
pub const BN_BLINDING_NO_RECREATE: u32 = 2;
pub const OSSL_FUNC_CORE_GETTABLE_PARAMS: u32 = 1;
pub const OSSL_FUNC_CORE_GET_PARAMS: u32 = 2;
pub const OSSL_FUNC_CORE_THREAD_START: u32 = 3;
pub const OSSL_FUNC_CORE_GET_LIBCTX: u32 = 4;
pub const OSSL_FUNC_CORE_NEW_ERROR: u32 = 5;
pub const OSSL_FUNC_CORE_SET_ERROR_DEBUG: u32 = 6;
pub const OSSL_FUNC_CORE_VSET_ERROR: u32 = 7;
pub const OSSL_FUNC_CORE_SET_ERROR_MARK: u32 = 8;
pub const OSSL_FUNC_CORE_CLEAR_LAST_ERROR_MARK: u32 = 9;
pub const OSSL_FUNC_CORE_POP_ERROR_TO_MARK: u32 = 10;
pub const OSSL_FUNC_CORE_OBJ_ADD_SIGID: u32 = 11;
pub const OSSL_FUNC_CORE_OBJ_CREATE: u32 = 12;
pub const OSSL_FUNC_CRYPTO_MALLOC: u32 = 20;
pub const OSSL_FUNC_CRYPTO_ZALLOC: u32 = 21;
pub const OSSL_FUNC_CRYPTO_FREE: u32 = 22;
pub const OSSL_FUNC_CRYPTO_CLEAR_FREE: u32 = 23;
pub const OSSL_FUNC_CRYPTO_REALLOC: u32 = 24;
pub const OSSL_FUNC_CRYPTO_CLEAR_REALLOC: u32 = 25;
pub const OSSL_FUNC_CRYPTO_SECURE_MALLOC: u32 = 26;
pub const OSSL_FUNC_CRYPTO_SECURE_ZALLOC: u32 = 27;
pub const OSSL_FUNC_CRYPTO_SECURE_FREE: u32 = 28;
pub const OSSL_FUNC_CRYPTO_SECURE_CLEAR_FREE: u32 = 29;
pub const OSSL_FUNC_CRYPTO_SECURE_ALLOCATED: u32 = 30;
pub const OSSL_FUNC_OPENSSL_CLEANSE: u32 = 31;
pub const OSSL_FUNC_BIO_NEW_FILE: u32 = 40;
pub const OSSL_FUNC_BIO_NEW_MEMBUF: u32 = 41;
pub const OSSL_FUNC_BIO_READ_EX: u32 = 42;
pub const OSSL_FUNC_BIO_WRITE_EX: u32 = 43;
pub const OSSL_FUNC_BIO_UP_REF: u32 = 44;
pub const OSSL_FUNC_BIO_FREE: u32 = 45;
pub const OSSL_FUNC_BIO_VPRINTF: u32 = 46;
pub const OSSL_FUNC_BIO_VSNPRINTF: u32 = 47;
pub const OSSL_FUNC_BIO_PUTS: u32 = 48;
pub const OSSL_FUNC_BIO_GETS: u32 = 49;
pub const OSSL_FUNC_BIO_CTRL: u32 = 50;
pub const OSSL_FUNC_SELF_TEST_CB: u32 = 100;
pub const OSSL_FUNC_GET_ENTROPY: u32 = 101;
pub const OSSL_FUNC_CLEANUP_ENTROPY: u32 = 102;
pub const OSSL_FUNC_GET_NONCE: u32 = 103;
pub const OSSL_FUNC_CLEANUP_NONCE: u32 = 104;
pub const OSSL_FUNC_PROVIDER_REGISTER_CHILD_CB: u32 = 105;
pub const OSSL_FUNC_PROVIDER_DEREGISTER_CHILD_CB: u32 = 106;
pub const OSSL_FUNC_PROVIDER_NAME: u32 = 107;
pub const OSSL_FUNC_PROVIDER_GET0_PROVIDER_CTX: u32 = 108;
pub const OSSL_FUNC_PROVIDER_GET0_DISPATCH: u32 = 109;
pub const OSSL_FUNC_PROVIDER_UP_REF: u32 = 110;
pub const OSSL_FUNC_PROVIDER_FREE: u32 = 111;
pub const OSSL_FUNC_PROVIDER_TEARDOWN: u32 = 1024;
pub const OSSL_FUNC_PROVIDER_GETTABLE_PARAMS: u32 = 1025;
pub const OSSL_FUNC_PROVIDER_GET_PARAMS: u32 = 1026;
pub const OSSL_FUNC_PROVIDER_QUERY_OPERATION: u32 = 1027;
pub const OSSL_FUNC_PROVIDER_UNQUERY_OPERATION: u32 = 1028;
pub const OSSL_FUNC_PROVIDER_GET_REASON_STRINGS: u32 = 1029;
pub const OSSL_FUNC_PROVIDER_GET_CAPABILITIES: u32 = 1030;
pub const OSSL_FUNC_PROVIDER_SELF_TEST: u32 = 1031;
pub const OSSL_OP_DIGEST: u32 = 1;
pub const OSSL_OP_CIPHER: u32 = 2;
pub const OSSL_OP_MAC: u32 = 3;
pub const OSSL_OP_KDF: u32 = 4;
pub const OSSL_OP_RAND: u32 = 5;
pub const OSSL_OP_KEYMGMT: u32 = 10;
pub const OSSL_OP_KEYEXCH: u32 = 11;
pub const OSSL_OP_SIGNATURE: u32 = 12;
pub const OSSL_OP_ASYM_CIPHER: u32 = 13;
pub const OSSL_OP_KEM: u32 = 14;
pub const OSSL_OP_ENCODER: u32 = 20;
pub const OSSL_OP_DECODER: u32 = 21;
pub const OSSL_OP_STORE: u32 = 22;
pub const OSSL_OP__HIGHEST: u32 = 22;
pub const OSSL_FUNC_DIGEST_NEWCTX: u32 = 1;
pub const OSSL_FUNC_DIGEST_INIT: u32 = 2;
pub const OSSL_FUNC_DIGEST_UPDATE: u32 = 3;
pub const OSSL_FUNC_DIGEST_FINAL: u32 = 4;
pub const OSSL_FUNC_DIGEST_DIGEST: u32 = 5;
pub const OSSL_FUNC_DIGEST_FREECTX: u32 = 6;
pub const OSSL_FUNC_DIGEST_DUPCTX: u32 = 7;
pub const OSSL_FUNC_DIGEST_GET_PARAMS: u32 = 8;
pub const OSSL_FUNC_DIGEST_SET_CTX_PARAMS: u32 = 9;
pub const OSSL_FUNC_DIGEST_GET_CTX_PARAMS: u32 = 10;
pub const OSSL_FUNC_DIGEST_GETTABLE_PARAMS: u32 = 11;
pub const OSSL_FUNC_DIGEST_SETTABLE_CTX_PARAMS: u32 = 12;
pub const OSSL_FUNC_DIGEST_GETTABLE_CTX_PARAMS: u32 = 13;
pub const OSSL_FUNC_CIPHER_NEWCTX: u32 = 1;
pub const OSSL_FUNC_CIPHER_ENCRYPT_INIT: u32 = 2;
pub const OSSL_FUNC_CIPHER_DECRYPT_INIT: u32 = 3;
pub const OSSL_FUNC_CIPHER_UPDATE: u32 = 4;
pub const OSSL_FUNC_CIPHER_FINAL: u32 = 5;
pub const OSSL_FUNC_CIPHER_CIPHER: u32 = 6;
pub const OSSL_FUNC_CIPHER_FREECTX: u32 = 7;
pub const OSSL_FUNC_CIPHER_DUPCTX: u32 = 8;
pub const OSSL_FUNC_CIPHER_GET_PARAMS: u32 = 9;
pub const OSSL_FUNC_CIPHER_GET_CTX_PARAMS: u32 = 10;
pub const OSSL_FUNC_CIPHER_SET_CTX_PARAMS: u32 = 11;
pub const OSSL_FUNC_CIPHER_GETTABLE_PARAMS: u32 = 12;
pub const OSSL_FUNC_CIPHER_GETTABLE_CTX_PARAMS: u32 = 13;
pub const OSSL_FUNC_CIPHER_SETTABLE_CTX_PARAMS: u32 = 14;
pub const OSSL_FUNC_MAC_NEWCTX: u32 = 1;
pub const OSSL_FUNC_MAC_DUPCTX: u32 = 2;
pub const OSSL_FUNC_MAC_FREECTX: u32 = 3;
pub const OSSL_FUNC_MAC_INIT: u32 = 4;
pub const OSSL_FUNC_MAC_UPDATE: u32 = 5;
pub const OSSL_FUNC_MAC_FINAL: u32 = 6;
pub const OSSL_FUNC_MAC_GET_PARAMS: u32 = 7;
pub const OSSL_FUNC_MAC_GET_CTX_PARAMS: u32 = 8;
pub const OSSL_FUNC_MAC_SET_CTX_PARAMS: u32 = 9;
pub const OSSL_FUNC_MAC_GETTABLE_PARAMS: u32 = 10;
pub const OSSL_FUNC_MAC_GETTABLE_CTX_PARAMS: u32 = 11;
pub const OSSL_FUNC_MAC_SETTABLE_CTX_PARAMS: u32 = 12;
pub const OSSL_FUNC_KDF_NEWCTX: u32 = 1;
pub const OSSL_FUNC_KDF_DUPCTX: u32 = 2;
pub const OSSL_FUNC_KDF_FREECTX: u32 = 3;
pub const OSSL_FUNC_KDF_RESET: u32 = 4;
pub const OSSL_FUNC_KDF_DERIVE: u32 = 5;
pub const OSSL_FUNC_KDF_GETTABLE_PARAMS: u32 = 6;
pub const OSSL_FUNC_KDF_GETTABLE_CTX_PARAMS: u32 = 7;
pub const OSSL_FUNC_KDF_SETTABLE_CTX_PARAMS: u32 = 8;
pub const OSSL_FUNC_KDF_GET_PARAMS: u32 = 9;
pub const OSSL_FUNC_KDF_GET_CTX_PARAMS: u32 = 10;
pub const OSSL_FUNC_KDF_SET_CTX_PARAMS: u32 = 11;
pub const OSSL_FUNC_RAND_NEWCTX: u32 = 1;
pub const OSSL_FUNC_RAND_FREECTX: u32 = 2;
pub const OSSL_FUNC_RAND_INSTANTIATE: u32 = 3;
pub const OSSL_FUNC_RAND_UNINSTANTIATE: u32 = 4;
pub const OSSL_FUNC_RAND_GENERATE: u32 = 5;
pub const OSSL_FUNC_RAND_RESEED: u32 = 6;
pub const OSSL_FUNC_RAND_NONCE: u32 = 7;
pub const OSSL_FUNC_RAND_ENABLE_LOCKING: u32 = 8;
pub const OSSL_FUNC_RAND_LOCK: u32 = 9;
pub const OSSL_FUNC_RAND_UNLOCK: u32 = 10;
pub const OSSL_FUNC_RAND_GETTABLE_PARAMS: u32 = 11;
pub const OSSL_FUNC_RAND_GETTABLE_CTX_PARAMS: u32 = 12;
pub const OSSL_FUNC_RAND_SETTABLE_CTX_PARAMS: u32 = 13;
pub const OSSL_FUNC_RAND_GET_PARAMS: u32 = 14;
pub const OSSL_FUNC_RAND_GET_CTX_PARAMS: u32 = 15;
pub const OSSL_FUNC_RAND_SET_CTX_PARAMS: u32 = 16;
pub const OSSL_FUNC_RAND_VERIFY_ZEROIZATION: u32 = 17;
pub const OSSL_FUNC_RAND_GET_SEED: u32 = 18;
pub const OSSL_FUNC_RAND_CLEAR_SEED: u32 = 19;
pub const OSSL_KEYMGMT_SELECT_PRIVATE_KEY: u32 = 1;
pub const OSSL_KEYMGMT_SELECT_PUBLIC_KEY: u32 = 2;
pub const OSSL_KEYMGMT_SELECT_DOMAIN_PARAMETERS: u32 = 4;
pub const OSSL_KEYMGMT_SELECT_OTHER_PARAMETERS: u32 = 128;
pub const OSSL_KEYMGMT_SELECT_ALL_PARAMETERS: u32 = 132;
pub const OSSL_KEYMGMT_SELECT_KEYPAIR: u32 = 3;
pub const OSSL_KEYMGMT_SELECT_ALL: u32 = 135;
pub const OSSL_KEYMGMT_VALIDATE_FULL_CHECK: u32 = 0;
pub const OSSL_KEYMGMT_VALIDATE_QUICK_CHECK: u32 = 1;
pub const OSSL_FUNC_KEYMGMT_NEW: u32 = 1;
pub const OSSL_FUNC_KEYMGMT_GEN_INIT: u32 = 2;
pub const OSSL_FUNC_KEYMGMT_GEN_SET_TEMPLATE: u32 = 3;
pub const OSSL_FUNC_KEYMGMT_GEN_SET_PARAMS: u32 = 4;
pub const OSSL_FUNC_KEYMGMT_GEN_SETTABLE_PARAMS: u32 = 5;
pub const OSSL_FUNC_KEYMGMT_GEN: u32 = 6;
pub const OSSL_FUNC_KEYMGMT_GEN_CLEANUP: u32 = 7;
pub const OSSL_FUNC_KEYMGMT_LOAD: u32 = 8;
pub const OSSL_FUNC_KEYMGMT_FREE: u32 = 10;
pub const OSSL_FUNC_KEYMGMT_GET_PARAMS: u32 = 11;
pub const OSSL_FUNC_KEYMGMT_GETTABLE_PARAMS: u32 = 12;
pub const OSSL_FUNC_KEYMGMT_SET_PARAMS: u32 = 13;
pub const OSSL_FUNC_KEYMGMT_SETTABLE_PARAMS: u32 = 14;
pub const OSSL_FUNC_KEYMGMT_QUERY_OPERATION_NAME: u32 = 20;
pub const OSSL_FUNC_KEYMGMT_HAS: u32 = 21;
pub const OSSL_FUNC_KEYMGMT_VALIDATE: u32 = 22;
pub const OSSL_FUNC_KEYMGMT_MATCH: u32 = 23;
pub const OSSL_FUNC_KEYMGMT_IMPORT: u32 = 40;
pub const OSSL_FUNC_KEYMGMT_IMPORT_TYPES: u32 = 41;
pub const OSSL_FUNC_KEYMGMT_EXPORT: u32 = 42;
pub const OSSL_FUNC_KEYMGMT_EXPORT_TYPES: u32 = 43;
pub const OSSL_FUNC_KEYMGMT_DUP: u32 = 44;
pub const OSSL_FUNC_KEYEXCH_NEWCTX: u32 = 1;
pub const OSSL_FUNC_KEYEXCH_INIT: u32 = 2;
pub const OSSL_FUNC_KEYEXCH_DERIVE: u32 = 3;
pub const OSSL_FUNC_KEYEXCH_SET_PEER: u32 = 4;
pub const OSSL_FUNC_KEYEXCH_FREECTX: u32 = 5;
pub const OSSL_FUNC_KEYEXCH_DUPCTX: u32 = 6;
pub const OSSL_FUNC_KEYEXCH_SET_CTX_PARAMS: u32 = 7;
pub const OSSL_FUNC_KEYEXCH_SETTABLE_CTX_PARAMS: u32 = 8;
pub const OSSL_FUNC_KEYEXCH_GET_CTX_PARAMS: u32 = 9;
pub const OSSL_FUNC_KEYEXCH_GETTABLE_CTX_PARAMS: u32 = 10;
pub const OSSL_FUNC_SIGNATURE_NEWCTX: u32 = 1;
pub const OSSL_FUNC_SIGNATURE_SIGN_INIT: u32 = 2;
pub const OSSL_FUNC_SIGNATURE_SIGN: u32 = 3;
pub const OSSL_FUNC_SIGNATURE_VERIFY_INIT: u32 = 4;
pub const OSSL_FUNC_SIGNATURE_VERIFY: u32 = 5;
pub const OSSL_FUNC_SIGNATURE_VERIFY_RECOVER_INIT: u32 = 6;
pub const OSSL_FUNC_SIGNATURE_VERIFY_RECOVER: u32 = 7;
pub const OSSL_FUNC_SIGNATURE_DIGEST_SIGN_INIT: u32 = 8;
pub const OSSL_FUNC_SIGNATURE_DIGEST_SIGN_UPDATE: u32 = 9;
pub const OSSL_FUNC_SIGNATURE_DIGEST_SIGN_FINAL: u32 = 10;
pub const OSSL_FUNC_SIGNATURE_DIGEST_SIGN: u32 = 11;
pub const OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_INIT: u32 = 12;
pub const OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_UPDATE: u32 = 13;
pub const OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_FINAL: u32 = 14;
pub const OSSL_FUNC_SIGNATURE_DIGEST_VERIFY: u32 = 15;
pub const OSSL_FUNC_SIGNATURE_FREECTX: u32 = 16;
pub const OSSL_FUNC_SIGNATURE_DUPCTX: u32 = 17;
pub const OSSL_FUNC_SIGNATURE_GET_CTX_PARAMS: u32 = 18;
pub const OSSL_FUNC_SIGNATURE_GETTABLE_CTX_PARAMS: u32 = 19;
pub const OSSL_FUNC_SIGNATURE_SET_CTX_PARAMS: u32 = 20;
pub const OSSL_FUNC_SIGNATURE_SETTABLE_CTX_PARAMS: u32 = 21;
pub const OSSL_FUNC_SIGNATURE_GET_CTX_MD_PARAMS: u32 = 22;
pub const OSSL_FUNC_SIGNATURE_GETTABLE_CTX_MD_PARAMS: u32 = 23;
pub const OSSL_FUNC_SIGNATURE_SET_CTX_MD_PARAMS: u32 = 24;
pub const OSSL_FUNC_SIGNATURE_SETTABLE_CTX_MD_PARAMS: u32 = 25;
pub const OSSL_FUNC_ASYM_CIPHER_NEWCTX: u32 = 1;
pub const OSSL_FUNC_ASYM_CIPHER_ENCRYPT_INIT: u32 = 2;
pub const OSSL_FUNC_ASYM_CIPHER_ENCRYPT: u32 = 3;
pub const OSSL_FUNC_ASYM_CIPHER_DECRYPT_INIT: u32 = 4;
pub const OSSL_FUNC_ASYM_CIPHER_DECRYPT: u32 = 5;
pub const OSSL_FUNC_ASYM_CIPHER_FREECTX: u32 = 6;
pub const OSSL_FUNC_ASYM_CIPHER_DUPCTX: u32 = 7;
pub const OSSL_FUNC_ASYM_CIPHER_GET_CTX_PARAMS: u32 = 8;
pub const OSSL_FUNC_ASYM_CIPHER_GETTABLE_CTX_PARAMS: u32 = 9;
pub const OSSL_FUNC_ASYM_CIPHER_SET_CTX_PARAMS: u32 = 10;
pub const OSSL_FUNC_ASYM_CIPHER_SETTABLE_CTX_PARAMS: u32 = 11;
pub const OSSL_FUNC_KEM_NEWCTX: u32 = 1;
pub const OSSL_FUNC_KEM_ENCAPSULATE_INIT: u32 = 2;
pub const OSSL_FUNC_KEM_ENCAPSULATE: u32 = 3;
pub const OSSL_FUNC_KEM_DECAPSULATE_INIT: u32 = 4;
pub const OSSL_FUNC_KEM_DECAPSULATE: u32 = 5;
pub const OSSL_FUNC_KEM_FREECTX: u32 = 6;
pub const OSSL_FUNC_KEM_DUPCTX: u32 = 7;
pub const OSSL_FUNC_KEM_GET_CTX_PARAMS: u32 = 8;
pub const OSSL_FUNC_KEM_GETTABLE_CTX_PARAMS: u32 = 9;
pub const OSSL_FUNC_KEM_SET_CTX_PARAMS: u32 = 10;
pub const OSSL_FUNC_KEM_SETTABLE_CTX_PARAMS: u32 = 11;
pub const OSSL_FUNC_ENCODER_NEWCTX: u32 = 1;
pub const OSSL_FUNC_ENCODER_FREECTX: u32 = 2;
pub const OSSL_FUNC_ENCODER_GET_PARAMS: u32 = 3;
pub const OSSL_FUNC_ENCODER_GETTABLE_PARAMS: u32 = 4;
pub const OSSL_FUNC_ENCODER_SET_CTX_PARAMS: u32 = 5;
pub const OSSL_FUNC_ENCODER_SETTABLE_CTX_PARAMS: u32 = 6;
pub const OSSL_FUNC_ENCODER_DOES_SELECTION: u32 = 10;
pub const OSSL_FUNC_ENCODER_ENCODE: u32 = 11;
pub const OSSL_FUNC_ENCODER_IMPORT_OBJECT: u32 = 20;
pub const OSSL_FUNC_ENCODER_FREE_OBJECT: u32 = 21;
pub const OSSL_FUNC_DECODER_NEWCTX: u32 = 1;
pub const OSSL_FUNC_DECODER_FREECTX: u32 = 2;
pub const OSSL_FUNC_DECODER_GET_PARAMS: u32 = 3;
pub const OSSL_FUNC_DECODER_GETTABLE_PARAMS: u32 = 4;
pub const OSSL_FUNC_DECODER_SET_CTX_PARAMS: u32 = 5;
pub const OSSL_FUNC_DECODER_SETTABLE_CTX_PARAMS: u32 = 6;
pub const OSSL_FUNC_DECODER_DOES_SELECTION: u32 = 10;
pub const OSSL_FUNC_DECODER_DECODE: u32 = 11;
pub const OSSL_FUNC_DECODER_EXPORT_OBJECT: u32 = 20;
pub const OSSL_FUNC_STORE_OPEN: u32 = 1;
pub const OSSL_FUNC_STORE_ATTACH: u32 = 2;
pub const OSSL_FUNC_STORE_SETTABLE_CTX_PARAMS: u32 = 3;
pub const OSSL_FUNC_STORE_SET_CTX_PARAMS: u32 = 4;
pub const OSSL_FUNC_STORE_LOAD: u32 = 5;
pub const OSSL_FUNC_STORE_EOF: u32 = 6;
pub const OSSL_FUNC_STORE_CLOSE: u32 = 7;
pub const OSSL_FUNC_STORE_EXPORT_OBJECT: u32 = 8;
pub const BIO_R_ACCEPT_ERROR: u32 = 100;
pub const BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET: u32 = 141;
pub const BIO_R_AMBIGUOUS_HOST_OR_SERVICE: u32 = 129;
pub const BIO_R_BAD_FOPEN_MODE: u32 = 101;
pub const BIO_R_BROKEN_PIPE: u32 = 124;
pub const BIO_R_CONNECT_ERROR: u32 = 103;
pub const BIO_R_CONNECT_TIMEOUT: u32 = 147;
pub const BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET: u32 = 107;
pub const BIO_R_GETSOCKNAME_ERROR: u32 = 132;
pub const BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS: u32 = 133;
pub const BIO_R_GETTING_SOCKTYPE: u32 = 134;
pub const BIO_R_INVALID_ARGUMENT: u32 = 125;
pub const BIO_R_INVALID_SOCKET: u32 = 135;
pub const BIO_R_IN_USE: u32 = 123;
pub const BIO_R_LENGTH_TOO_LONG: u32 = 102;
pub const BIO_R_LISTEN_V6_ONLY: u32 = 136;
pub const BIO_R_LOOKUP_RETURNED_NOTHING: u32 = 142;
pub const BIO_R_MALFORMED_HOST_OR_SERVICE: u32 = 130;
pub const BIO_R_NBIO_CONNECT_ERROR: u32 = 110;
pub const BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED: u32 = 143;
pub const BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED: u32 = 144;
pub const BIO_R_NO_PORT_DEFINED: u32 = 113;
pub const BIO_R_NO_SUCH_FILE: u32 = 128;
pub const BIO_R_NULL_PARAMETER: u32 = 115;
pub const BIO_R_TRANSFER_ERROR: u32 = 104;
pub const BIO_R_TRANSFER_TIMEOUT: u32 = 105;
pub const BIO_R_UNABLE_TO_BIND_SOCKET: u32 = 117;
pub const BIO_R_UNABLE_TO_CREATE_SOCKET: u32 = 118;
pub const BIO_R_UNABLE_TO_KEEPALIVE: u32 = 137;
pub const BIO_R_UNABLE_TO_LISTEN_SOCKET: u32 = 119;
pub const BIO_R_UNABLE_TO_NODELAY: u32 = 138;
pub const BIO_R_UNABLE_TO_REUSEADDR: u32 = 139;
pub const BIO_R_UNAVAILABLE_IP_FAMILY: u32 = 145;
pub const BIO_R_UNINITIALIZED: u32 = 120;
pub const BIO_R_UNKNOWN_INFO_TYPE: u32 = 140;
pub const BIO_R_UNSUPPORTED_IP_FAMILY: u32 = 146;
pub const BIO_R_UNSUPPORTED_METHOD: u32 = 121;
pub const BIO_R_UNSUPPORTED_PROTOCOL_FAMILY: u32 = 131;
pub const BIO_R_WRITE_TO_READ_ONLY_BIO: u32 = 126;
pub const BIO_R_WSASTARTUP: u32 = 122;
pub const BIO_TYPE_DESCRIPTOR: u32 = 256;
pub const BIO_TYPE_FILTER: u32 = 512;
pub const BIO_TYPE_SOURCE_SINK: u32 = 1024;
pub const BIO_TYPE_NONE: u32 = 0;
pub const BIO_TYPE_MEM: u32 = 1025;
pub const BIO_TYPE_FILE: u32 = 1026;
pub const BIO_TYPE_FD: u32 = 1284;
pub const BIO_TYPE_SOCKET: u32 = 1285;
pub const BIO_TYPE_NULL: u32 = 1030;
pub const BIO_TYPE_SSL: u32 = 519;
pub const BIO_TYPE_MD: u32 = 520;
pub const BIO_TYPE_BUFFER: u32 = 521;
pub const BIO_TYPE_CIPHER: u32 = 522;
pub const BIO_TYPE_BASE64: u32 = 523;
pub const BIO_TYPE_CONNECT: u32 = 1292;
pub const BIO_TYPE_ACCEPT: u32 = 1293;
pub const BIO_TYPE_NBIO_TEST: u32 = 528;
pub const BIO_TYPE_NULL_FILTER: u32 = 529;
pub const BIO_TYPE_BIO: u32 = 1043;
pub const BIO_TYPE_LINEBUFFER: u32 = 532;
pub const BIO_TYPE_DGRAM: u32 = 1301;
pub const BIO_TYPE_ASN1: u32 = 534;
pub const BIO_TYPE_COMP: u32 = 535;
pub const BIO_TYPE_CORE_TO_PROV: u32 = 1049;
pub const BIO_TYPE_START: u32 = 128;
pub const BIO_NOCLOSE: u32 = 0;
pub const BIO_CLOSE: u32 = 1;
pub const BIO_CTRL_RESET: u32 = 1;
pub const BIO_CTRL_EOF: u32 = 2;
pub const BIO_CTRL_INFO: u32 = 3;
pub const BIO_CTRL_SET: u32 = 4;
pub const BIO_CTRL_GET: u32 = 5;
pub const BIO_CTRL_PUSH: u32 = 6;
pub const BIO_CTRL_POP: u32 = 7;
pub const BIO_CTRL_GET_CLOSE: u32 = 8;
pub const BIO_CTRL_SET_CLOSE: u32 = 9;
pub const BIO_CTRL_PENDING: u32 = 10;
pub const BIO_CTRL_FLUSH: u32 = 11;
pub const BIO_CTRL_DUP: u32 = 12;
pub const BIO_CTRL_WPENDING: u32 = 13;
pub const BIO_CTRL_SET_CALLBACK: u32 = 14;
pub const BIO_CTRL_GET_CALLBACK: u32 = 15;
pub const BIO_CTRL_PEEK: u32 = 29;
pub const BIO_CTRL_SET_FILENAME: u32 = 30;
pub const BIO_CTRL_DGRAM_CONNECT: u32 = 31;
pub const BIO_CTRL_DGRAM_SET_CONNECTED: u32 = 32;
pub const BIO_CTRL_DGRAM_SET_RECV_TIMEOUT: u32 = 33;
pub const BIO_CTRL_DGRAM_GET_RECV_TIMEOUT: u32 = 34;
pub const BIO_CTRL_DGRAM_SET_SEND_TIMEOUT: u32 = 35;
pub const BIO_CTRL_DGRAM_GET_SEND_TIMEOUT: u32 = 36;
pub const BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP: u32 = 37;
pub const BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP: u32 = 38;
pub const BIO_CTRL_DGRAM_MTU_DISCOVER: u32 = 39;
pub const BIO_CTRL_DGRAM_QUERY_MTU: u32 = 40;
pub const BIO_CTRL_DGRAM_GET_FALLBACK_MTU: u32 = 47;
pub const BIO_CTRL_DGRAM_GET_MTU: u32 = 41;
pub const BIO_CTRL_DGRAM_SET_MTU: u32 = 42;
pub const BIO_CTRL_DGRAM_MTU_EXCEEDED: u32 = 43;
pub const BIO_CTRL_DGRAM_GET_PEER: u32 = 46;
pub const BIO_CTRL_DGRAM_SET_PEER: u32 = 44;
pub const BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT: u32 = 45;
pub const BIO_CTRL_DGRAM_SET_DONT_FRAG: u32 = 48;
pub const BIO_CTRL_DGRAM_GET_MTU_OVERHEAD: u32 = 49;
pub const BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE: u32 = 50;
pub const BIO_CTRL_DGRAM_SET_PEEK_MODE: u32 = 71;
pub const BIO_CTRL_GET_KTLS_SEND: u32 = 73;
pub const BIO_CTRL_GET_KTLS_RECV: u32 = 76;
pub const BIO_CTRL_DGRAM_SCTP_WAIT_FOR_DRY: u32 = 77;
pub const BIO_CTRL_DGRAM_SCTP_MSG_WAITING: u32 = 78;
pub const BIO_CTRL_SET_PREFIX: u32 = 79;
pub const BIO_CTRL_SET_INDENT: u32 = 80;
pub const BIO_CTRL_GET_INDENT: u32 = 81;
pub const BIO_FP_READ: u32 = 2;
pub const BIO_FP_WRITE: u32 = 4;
pub const BIO_FP_APPEND: u32 = 8;
pub const BIO_FP_TEXT: u32 = 16;
pub const BIO_FLAGS_READ: u32 = 1;
pub const BIO_FLAGS_WRITE: u32 = 2;
pub const BIO_FLAGS_IO_SPECIAL: u32 = 4;
pub const BIO_FLAGS_RWS: u32 = 7;
pub const BIO_FLAGS_SHOULD_RETRY: u32 = 8;
pub const BIO_FLAGS_UPLINK: u32 = 0;
pub const BIO_FLAGS_BASE64_NO_NL: u32 = 256;
pub const BIO_FLAGS_MEM_RDONLY: u32 = 512;
pub const BIO_FLAGS_NONCLEAR_RST: u32 = 1024;
pub const BIO_FLAGS_IN_EOF: u32 = 2048;
pub const BIO_RR_SSL_X509_LOOKUP: u32 = 1;
pub const BIO_RR_CONNECT: u32 = 2;
pub const BIO_RR_ACCEPT: u32 = 3;
pub const BIO_CB_FREE: u32 = 1;
pub const BIO_CB_READ: u32 = 2;
pub const BIO_CB_WRITE: u32 = 3;
pub const BIO_CB_PUTS: u32 = 4;
pub const BIO_CB_GETS: u32 = 5;
pub const BIO_CB_CTRL: u32 = 6;
pub const BIO_CB_RETURN: u32 = 128;
pub const BIO_C_SET_CONNECT: u32 = 100;
pub const BIO_C_DO_STATE_MACHINE: u32 = 101;
pub const BIO_C_SET_NBIO: u32 = 102;
pub const BIO_C_SET_FD: u32 = 104;
pub const BIO_C_GET_FD: u32 = 105;
pub const BIO_C_SET_FILE_PTR: u32 = 106;
pub const BIO_C_GET_FILE_PTR: u32 = 107;
pub const BIO_C_SET_FILENAME: u32 = 108;
pub const BIO_C_SET_SSL: u32 = 109;
pub const BIO_C_GET_SSL: u32 = 110;
pub const BIO_C_SET_MD: u32 = 111;
pub const BIO_C_GET_MD: u32 = 112;
pub const BIO_C_GET_CIPHER_STATUS: u32 = 113;
pub const BIO_C_SET_BUF_MEM: u32 = 114;
pub const BIO_C_GET_BUF_MEM_PTR: u32 = 115;
pub const BIO_C_GET_BUFF_NUM_LINES: u32 = 116;
pub const BIO_C_SET_BUFF_SIZE: u32 = 117;
pub const BIO_C_SET_ACCEPT: u32 = 118;
pub const BIO_C_SSL_MODE: u32 = 119;
pub const BIO_C_GET_MD_CTX: u32 = 120;
pub const BIO_C_SET_BUFF_READ_DATA: u32 = 122;
pub const BIO_C_GET_CONNECT: u32 = 123;
pub const BIO_C_GET_ACCEPT: u32 = 124;
pub const BIO_C_SET_SSL_RENEGOTIATE_BYTES: u32 = 125;
pub const BIO_C_GET_SSL_NUM_RENEGOTIATES: u32 = 126;
pub const BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT: u32 = 127;
pub const BIO_C_FILE_SEEK: u32 = 128;
pub const BIO_C_GET_CIPHER_CTX: u32 = 129;
pub const BIO_C_SET_BUF_MEM_EOF_RETURN: u32 = 130;
pub const BIO_C_SET_BIND_MODE: u32 = 131;
pub const BIO_C_GET_BIND_MODE: u32 = 132;
pub const BIO_C_FILE_TELL: u32 = 133;
pub const BIO_C_GET_SOCKS: u32 = 134;
pub const BIO_C_SET_SOCKS: u32 = 135;
pub const BIO_C_SET_WRITE_BUF_SIZE: u32 = 136;
pub const BIO_C_GET_WRITE_BUF_SIZE: u32 = 137;
pub const BIO_C_MAKE_BIO_PAIR: u32 = 138;
pub const BIO_C_DESTROY_BIO_PAIR: u32 = 139;
pub const BIO_C_GET_WRITE_GUARANTEE: u32 = 140;
pub const BIO_C_GET_READ_REQUEST: u32 = 141;
pub const BIO_C_SHUTDOWN_WR: u32 = 142;
pub const BIO_C_NREAD0: u32 = 143;
pub const BIO_C_NREAD: u32 = 144;
pub const BIO_C_NWRITE0: u32 = 145;
pub const BIO_C_NWRITE: u32 = 146;
pub const BIO_C_RESET_READ_REQUEST: u32 = 147;
pub const BIO_C_SET_MD_CTX: u32 = 148;
pub const BIO_C_SET_PREFIX: u32 = 149;
pub const BIO_C_GET_PREFIX: u32 = 150;
pub const BIO_C_SET_SUFFIX: u32 = 151;
pub const BIO_C_GET_SUFFIX: u32 = 152;
pub const BIO_C_SET_EX_ARG: u32 = 153;
pub const BIO_C_GET_EX_ARG: u32 = 154;
pub const BIO_C_SET_CONNECT_MODE: u32 = 155;
pub const BIO_FAMILY_IPV4: u32 = 4;
pub const BIO_FAMILY_IPV6: u32 = 6;
pub const BIO_FAMILY_IPANY: u32 = 256;
pub const BIO_BIND_NORMAL: u32 = 0;
pub const BIO_SOCK_REUSEADDR: u32 = 1;
pub const BIO_SOCK_V6_ONLY: u32 = 2;
pub const BIO_SOCK_KEEPALIVE: u32 = 4;
pub const BIO_SOCK_NONBLOCK: u32 = 8;
pub const BIO_SOCK_NODELAY: u32 = 16;
pub const EVP_R_AES_KEY_SETUP_FAILED: u32 = 143;
pub const EVP_R_ARIA_KEY_SETUP_FAILED: u32 = 176;
pub const EVP_R_BAD_ALGORITHM_NAME: u32 = 200;
pub const EVP_R_BAD_DECRYPT: u32 = 100;
pub const EVP_R_BAD_KEY_LENGTH: u32 = 195;
pub const EVP_R_BUFFER_TOO_SMALL: u32 = 155;
pub const EVP_R_CACHE_CONSTANTS_FAILED: u32 = 225;
pub const EVP_R_CAMELLIA_KEY_SETUP_FAILED: u32 = 157;
pub const EVP_R_CANNOT_GET_PARAMETERS: u32 = 197;
pub const EVP_R_CANNOT_SET_PARAMETERS: u32 = 198;
pub const EVP_R_CIPHER_NOT_GCM_MODE: u32 = 184;
pub const EVP_R_CIPHER_PARAMETER_ERROR: u32 = 122;
pub const EVP_R_COMMAND_NOT_SUPPORTED: u32 = 147;
pub const EVP_R_CONFLICTING_ALGORITHM_NAME: u32 = 201;
pub const EVP_R_COPY_ERROR: u32 = 173;
pub const EVP_R_CTRL_NOT_IMPLEMENTED: u32 = 132;
pub const EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED: u32 = 133;
pub const EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH: u32 = 138;
pub const EVP_R_DECODE_ERROR: u32 = 114;
pub const EVP_R_DEFAULT_QUERY_PARSE_ERROR: u32 = 210;
pub const EVP_R_DIFFERENT_KEY_TYPES: u32 = 101;
pub const EVP_R_DIFFERENT_PARAMETERS: u32 = 153;
pub const EVP_R_ERROR_LOADING_SECTION: u32 = 165;
pub const EVP_R_EXPECTING_AN_HMAC_KEY: u32 = 174;
pub const EVP_R_EXPECTING_AN_RSA_KEY: u32 = 127;
pub const EVP_R_EXPECTING_A_DH_KEY: u32 = 128;
pub const EVP_R_EXPECTING_A_DSA_KEY: u32 = 129;
pub const EVP_R_EXPECTING_A_ECX_KEY: u32 = 219;
pub const EVP_R_EXPECTING_A_EC_KEY: u32 = 142;
pub const EVP_R_EXPECTING_A_POLY1305_KEY: u32 = 164;
pub const EVP_R_EXPECTING_A_SIPHASH_KEY: u32 = 175;
pub const EVP_R_FINAL_ERROR: u32 = 188;
pub const EVP_R_GENERATE_ERROR: u32 = 214;
pub const EVP_R_GET_RAW_KEY_FAILED: u32 = 182;
pub const EVP_R_ILLEGAL_SCRYPT_PARAMETERS: u32 = 171;
pub const EVP_R_INACCESSIBLE_DOMAIN_PARAMETERS: u32 = 204;
pub const EVP_R_INACCESSIBLE_KEY: u32 = 203;
pub const EVP_R_INITIALIZATION_ERROR: u32 = 134;
pub const EVP_R_INPUT_NOT_INITIALIZED: u32 = 111;
pub const EVP_R_INVALID_CUSTOM_LENGTH: u32 = 185;
pub const EVP_R_INVALID_DIGEST: u32 = 152;
pub const EVP_R_INVALID_IV_LENGTH: u32 = 194;
pub const EVP_R_INVALID_KEY: u32 = 163;
pub const EVP_R_INVALID_KEY_LENGTH: u32 = 130;
pub const EVP_R_INVALID_LENGTH: u32 = 221;
pub const EVP_R_INVALID_NULL_ALGORITHM: u32 = 218;
pub const EVP_R_INVALID_OPERATION: u32 = 148;
pub const EVP_R_INVALID_PROVIDER_FUNCTIONS: u32 = 193;
pub const EVP_R_INVALID_SALT_LENGTH: u32 = 186;
pub const EVP_R_INVALID_SECRET_LENGTH: u32 = 223;
pub const EVP_R_INVALID_SEED_LENGTH: u32 = 220;
pub const EVP_R_INVALID_VALUE: u32 = 222;
pub const EVP_R_KEYMGMT_EXPORT_FAILURE: u32 = 205;
pub const EVP_R_KEY_SETUP_FAILED: u32 = 180;
pub const EVP_R_LOCKING_NOT_SUPPORTED: u32 = 213;
pub const EVP_R_MEMORY_LIMIT_EXCEEDED: u32 = 172;
pub const EVP_R_MESSAGE_DIGEST_IS_NULL: u32 = 159;
pub const EVP_R_METHOD_NOT_SUPPORTED: u32 = 144;
pub const EVP_R_MISSING_PARAMETERS: u32 = 103;
pub const EVP_R_NOT_ABLE_TO_COPY_CTX: u32 = 190;
pub const EVP_R_NOT_XOF_OR_INVALID_LENGTH: u32 = 178;
pub const EVP_R_NO_CIPHER_SET: u32 = 131;
pub const EVP_R_NO_DEFAULT_DIGEST: u32 = 158;
pub const EVP_R_NO_DIGEST_SET: u32 = 139;
pub const EVP_R_NO_IMPORT_FUNCTION: u32 = 206;
pub const EVP_R_NO_KEYMGMT_AVAILABLE: u32 = 199;
pub const EVP_R_NO_KEYMGMT_PRESENT: u32 = 196;
pub const EVP_R_NO_KEY_SET: u32 = 154;
pub const EVP_R_NO_OPERATION_SET: u32 = 149;
pub const EVP_R_NULL_MAC_PKEY_CTX: u32 = 208;
pub const EVP_R_ONLY_ONESHOT_SUPPORTED: u32 = 177;
pub const EVP_R_OPERATION_NOT_INITIALIZED: u32 = 151;
pub const EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE: u32 = 150;
pub const EVP_R_OUTPUT_WOULD_OVERFLOW: u32 = 202;
pub const EVP_R_PARAMETER_TOO_LARGE: u32 = 187;
pub const EVP_R_PARTIALLY_OVERLAPPING: u32 = 162;
pub const EVP_R_PBKDF2_ERROR: u32 = 181;
pub const EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED: u32 = 179;
pub const EVP_R_PRIVATE_KEY_DECODE_ERROR: u32 = 145;
pub const EVP_R_PRIVATE_KEY_ENCODE_ERROR: u32 = 146;
pub const EVP_R_PUBLIC_KEY_NOT_RSA: u32 = 106;
pub const EVP_R_SETTING_XOF_FAILED: u32 = 227;
pub const EVP_R_SET_DEFAULT_PROPERTY_FAILURE: u32 = 209;
pub const EVP_R_TOO_MANY_RECORDS: u32 = 183;
pub const EVP_R_UNABLE_TO_ENABLE_LOCKING: u32 = 212;
pub const EVP_R_UNABLE_TO_GET_MAXIMUM_REQUEST_SIZE: u32 = 215;
pub const EVP_R_UNABLE_TO_GET_RANDOM_STRENGTH: u32 = 216;
pub const EVP_R_UNABLE_TO_LOCK_CONTEXT: u32 = 211;
pub const EVP_R_UNABLE_TO_SET_CALLBACKS: u32 = 217;
pub const EVP_R_UNKNOWN_CIPHER: u32 = 160;
pub const EVP_R_UNKNOWN_DIGEST: u32 = 161;
pub const EVP_R_UNKNOWN_KEY_TYPE: u32 = 207;
pub const EVP_R_UNKNOWN_OPTION: u32 = 169;
pub const EVP_R_UNKNOWN_PBE_ALGORITHM: u32 = 121;
pub const EVP_R_UNSUPPORTED_ALGORITHM: u32 = 156;
pub const EVP_R_UNSUPPORTED_CIPHER: u32 = 107;
pub const EVP_R_UNSUPPORTED_KEYLENGTH: u32 = 123;
pub const EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION: u32 = 124;
pub const EVP_R_UNSUPPORTED_KEY_SIZE: u32 = 108;
pub const EVP_R_UNSUPPORTED_KEY_TYPE: u32 = 224;
pub const EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS: u32 = 135;
pub const EVP_R_UNSUPPORTED_PRF: u32 = 125;
pub const EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM: u32 = 118;
pub const EVP_R_UNSUPPORTED_SALT_TYPE: u32 = 126;
pub const EVP_R_UPDATE_ERROR: u32 = 189;
pub const EVP_R_WRAP_MODE_NOT_ALLOWED: u32 = 170;
pub const EVP_R_WRONG_FINAL_BLOCK_LENGTH: u32 = 109;
pub const EVP_R_XTS_DATA_UNIT_IS_TOO_LARGE: u32 = 191;
pub const EVP_R_XTS_DUPLICATED_KEYS: u32 = 192;
pub const EVP_MAX_MD_SIZE: u32 = 64;
pub const EVP_MAX_KEY_LENGTH: u32 = 64;
pub const EVP_MAX_IV_LENGTH: u32 = 16;
pub const EVP_MAX_BLOCK_LENGTH: u32 = 32;
pub const PKCS5_SALT_LEN: u32 = 8;
pub const PKCS5_DEFAULT_ITER: u32 = 2048;
pub const SN_undef: &[u8; 6usize] = b"UNDEF\0";
pub const LN_undef: &[u8; 10usize] = b"undefined\0";
pub const NID_undef: u32 = 0;
pub const OBJ_undef: u32 = 0;
pub const SN_itu_t: &[u8; 6usize] = b"ITU-T\0";
pub const LN_itu_t: &[u8; 6usize] = b"itu-t\0";
pub const NID_itu_t: u32 = 645;
pub const OBJ_itu_t: u32 = 0;
pub const NID_ccitt: u32 = 404;
pub const OBJ_ccitt: u32 = 0;
pub const SN_iso: &[u8; 4usize] = b"ISO\0";
pub const LN_iso: &[u8; 4usize] = b"iso\0";
pub const NID_iso: u32 = 181;
pub const OBJ_iso: u32 = 1;
pub const SN_joint_iso_itu_t: &[u8; 16usize] = b"JOINT-ISO-ITU-T\0";
pub const LN_joint_iso_itu_t: &[u8; 16usize] = b"joint-iso-itu-t\0";
pub const NID_joint_iso_itu_t: u32 = 646;
pub const OBJ_joint_iso_itu_t: u32 = 2;
pub const NID_joint_iso_ccitt: u32 = 393;
pub const OBJ_joint_iso_ccitt: u32 = 2;
pub const SN_member_body: &[u8; 12usize] = b"member-body\0";
pub const LN_member_body: &[u8; 16usize] = b"ISO Member Body\0";
pub const NID_member_body: u32 = 182;
pub const SN_identified_organization: &[u8; 24usize] = b"identified-organization\0";
pub const NID_identified_organization: u32 = 676;
pub const SN_gmac: &[u8; 5usize] = b"GMAC\0";
pub const LN_gmac: &[u8; 5usize] = b"gmac\0";
pub const NID_gmac: u32 = 1195;
pub const SN_hmac_md5: &[u8; 9usize] = b"HMAC-MD5\0";
pub const LN_hmac_md5: &[u8; 9usize] = b"hmac-md5\0";
pub const NID_hmac_md5: u32 = 780;
pub const SN_hmac_sha1: &[u8; 10usize] = b"HMAC-SHA1\0";
pub const LN_hmac_sha1: &[u8; 10usize] = b"hmac-sha1\0";
pub const NID_hmac_sha1: u32 = 781;
pub const SN_x509ExtAdmission: &[u8; 17usize] = b"x509ExtAdmission\0";
pub const LN_x509ExtAdmission: &[u8; 48usize] =
    b"Professional Information or basis for Admission\0";
pub const NID_x509ExtAdmission: u32 = 1093;
pub const SN_certicom_arc: &[u8; 13usize] = b"certicom-arc\0";
pub const NID_certicom_arc: u32 = 677;
pub const SN_ieee: &[u8; 5usize] = b"ieee\0";
pub const NID_ieee: u32 = 1170;
pub const SN_ieee_siswg: &[u8; 11usize] = b"ieee-siswg\0";
pub const LN_ieee_siswg: &[u8; 39usize] = b"IEEE Security in Storage Working Group\0";
pub const NID_ieee_siswg: u32 = 1171;
pub const SN_international_organizations: &[u8; 28usize] = b"international-organizations\0";
pub const LN_international_organizations: &[u8; 28usize] = b"International Organizations\0";
pub const NID_international_organizations: u32 = 647;
pub const SN_wap: &[u8; 4usize] = b"wap\0";
pub const NID_wap: u32 = 678;
pub const SN_wap_wsg: &[u8; 8usize] = b"wap-wsg\0";
pub const NID_wap_wsg: u32 = 679;
pub const SN_selected_attribute_types: &[u8; 25usize] = b"selected-attribute-types\0";
pub const LN_selected_attribute_types: &[u8; 25usize] = b"Selected Attribute Types\0";
pub const NID_selected_attribute_types: u32 = 394;
pub const SN_clearance: &[u8; 10usize] = b"clearance\0";
pub const NID_clearance: u32 = 395;
pub const SN_ISO_US: &[u8; 7usize] = b"ISO-US\0";
pub const LN_ISO_US: &[u8; 19usize] = b"ISO US Member Body\0";
pub const NID_ISO_US: u32 = 183;
pub const SN_X9_57: &[u8; 6usize] = b"X9-57\0";
pub const LN_X9_57: &[u8; 6usize] = b"X9.57\0";
pub const NID_X9_57: u32 = 184;
pub const SN_X9cm: &[u8; 5usize] = b"X9cm\0";
pub const LN_X9cm: &[u8; 11usize] = b"X9.57 CM ?\0";
pub const NID_X9cm: u32 = 185;
pub const SN_ISO_CN: &[u8; 7usize] = b"ISO-CN\0";
pub const LN_ISO_CN: &[u8; 19usize] = b"ISO CN Member Body\0";
pub const NID_ISO_CN: u32 = 1140;
pub const SN_oscca: &[u8; 6usize] = b"oscca\0";
pub const NID_oscca: u32 = 1141;
pub const SN_sm_scheme: &[u8; 10usize] = b"sm-scheme\0";
pub const NID_sm_scheme: u32 = 1142;
pub const SN_dsa: &[u8; 4usize] = b"DSA\0";
pub const LN_dsa: &[u8; 14usize] = b"dsaEncryption\0";
pub const NID_dsa: u32 = 116;
pub const SN_dsaWithSHA1: &[u8; 9usize] = b"DSA-SHA1\0";
pub const LN_dsaWithSHA1: &[u8; 12usize] = b"dsaWithSHA1\0";
pub const NID_dsaWithSHA1: u32 = 113;
pub const SN_ansi_X9_62: &[u8; 11usize] = b"ansi-X9-62\0";
pub const LN_ansi_X9_62: &[u8; 11usize] = b"ANSI X9.62\0";
pub const NID_ansi_X9_62: u32 = 405;
pub const SN_X9_62_prime_field: &[u8; 12usize] = b"prime-field\0";
pub const NID_X9_62_prime_field: u32 = 406;
pub const SN_X9_62_characteristic_two_field: &[u8; 25usize] = b"characteristic-two-field\0";
pub const NID_X9_62_characteristic_two_field: u32 = 407;
pub const SN_X9_62_id_characteristic_two_basis: &[u8; 28usize] = b"id-characteristic-two-basis\0";
pub const NID_X9_62_id_characteristic_two_basis: u32 = 680;
pub const SN_X9_62_onBasis: &[u8; 8usize] = b"onBasis\0";
pub const NID_X9_62_onBasis: u32 = 681;
pub const SN_X9_62_tpBasis: &[u8; 8usize] = b"tpBasis\0";
pub const NID_X9_62_tpBasis: u32 = 682;
pub const SN_X9_62_ppBasis: &[u8; 8usize] = b"ppBasis\0";
pub const NID_X9_62_ppBasis: u32 = 683;
pub const SN_X9_62_id_ecPublicKey: &[u8; 15usize] = b"id-ecPublicKey\0";
pub const NID_X9_62_id_ecPublicKey: u32 = 408;
pub const SN_X9_62_c2pnb163v1: &[u8; 11usize] = b"c2pnb163v1\0";
pub const NID_X9_62_c2pnb163v1: u32 = 684;
pub const SN_X9_62_c2pnb163v2: &[u8; 11usize] = b"c2pnb163v2\0";
pub const NID_X9_62_c2pnb163v2: u32 = 685;
pub const SN_X9_62_c2pnb163v3: &[u8; 11usize] = b"c2pnb163v3\0";
pub const NID_X9_62_c2pnb163v3: u32 = 686;
pub const SN_X9_62_c2pnb176v1: &[u8; 11usize] = b"c2pnb176v1\0";
pub const NID_X9_62_c2pnb176v1: u32 = 687;
pub const SN_X9_62_c2tnb191v1: &[u8; 11usize] = b"c2tnb191v1\0";
pub const NID_X9_62_c2tnb191v1: u32 = 688;
pub const SN_X9_62_c2tnb191v2: &[u8; 11usize] = b"c2tnb191v2\0";
pub const NID_X9_62_c2tnb191v2: u32 = 689;
pub const SN_X9_62_c2tnb191v3: &[u8; 11usize] = b"c2tnb191v3\0";
pub const NID_X9_62_c2tnb191v3: u32 = 690;
pub const SN_X9_62_c2onb191v4: &[u8; 11usize] = b"c2onb191v4\0";
pub const NID_X9_62_c2onb191v4: u32 = 691;
pub const SN_X9_62_c2onb191v5: &[u8; 11usize] = b"c2onb191v5\0";
pub const NID_X9_62_c2onb191v5: u32 = 692;
pub const SN_X9_62_c2pnb208w1: &[u8; 11usize] = b"c2pnb208w1\0";
pub const NID_X9_62_c2pnb208w1: u32 = 693;
pub const SN_X9_62_c2tnb239v1: &[u8; 11usize] = b"c2tnb239v1\0";
pub const NID_X9_62_c2tnb239v1: u32 = 694;
pub const SN_X9_62_c2tnb239v2: &[u8; 11usize] = b"c2tnb239v2\0";
pub const NID_X9_62_c2tnb239v2: u32 = 695;
pub const SN_X9_62_c2tnb239v3: &[u8; 11usize] = b"c2tnb239v3\0";
pub const NID_X9_62_c2tnb239v3: u32 = 696;
pub const SN_X9_62_c2onb239v4: &[u8; 11usize] = b"c2onb239v4\0";
pub const NID_X9_62_c2onb239v4: u32 = 697;
pub const SN_X9_62_c2onb239v5: &[u8; 11usize] = b"c2onb239v5\0";
pub const NID_X9_62_c2onb239v5: u32 = 698;
pub const SN_X9_62_c2pnb272w1: &[u8; 11usize] = b"c2pnb272w1\0";
pub const NID_X9_62_c2pnb272w1: u32 = 699;
pub const SN_X9_62_c2pnb304w1: &[u8; 11usize] = b"c2pnb304w1\0";
pub const NID_X9_62_c2pnb304w1: u32 = 700;
pub const SN_X9_62_c2tnb359v1: &[u8; 11usize] = b"c2tnb359v1\0";
pub const NID_X9_62_c2tnb359v1: u32 = 701;
pub const SN_X9_62_c2pnb368w1: &[u8; 11usize] = b"c2pnb368w1\0";
pub const NID_X9_62_c2pnb368w1: u32 = 702;
pub const SN_X9_62_c2tnb431r1: &[u8; 11usize] = b"c2tnb431r1\0";
pub const NID_X9_62_c2tnb431r1: u32 = 703;
pub const SN_X9_62_prime192v1: &[u8; 11usize] = b"prime192v1\0";
pub const NID_X9_62_prime192v1: u32 = 409;
pub const SN_X9_62_prime192v2: &[u8; 11usize] = b"prime192v2\0";
pub const NID_X9_62_prime192v2: u32 = 410;
pub const SN_X9_62_prime192v3: &[u8; 11usize] = b"prime192v3\0";
pub const NID_X9_62_prime192v3: u32 = 411;
pub const SN_X9_62_prime239v1: &[u8; 11usize] = b"prime239v1\0";
pub const NID_X9_62_prime239v1: u32 = 412;
pub const SN_X9_62_prime239v2: &[u8; 11usize] = b"prime239v2\0";
pub const NID_X9_62_prime239v2: u32 = 413;
pub const SN_X9_62_prime239v3: &[u8; 11usize] = b"prime239v3\0";
pub const NID_X9_62_prime239v3: u32 = 414;
pub const SN_X9_62_prime256v1: &[u8; 11usize] = b"prime256v1\0";
pub const NID_X9_62_prime256v1: u32 = 415;
pub const SN_ecdsa_with_SHA1: &[u8; 16usize] = b"ecdsa-with-SHA1\0";
pub const NID_ecdsa_with_SHA1: u32 = 416;
pub const SN_ecdsa_with_Recommended: &[u8; 23usize] = b"ecdsa-with-Recommended\0";
pub const NID_ecdsa_with_Recommended: u32 = 791;
pub const SN_ecdsa_with_Specified: &[u8; 21usize] = b"ecdsa-with-Specified\0";
pub const NID_ecdsa_with_Specified: u32 = 792;
pub const SN_ecdsa_with_SHA224: &[u8; 18usize] = b"ecdsa-with-SHA224\0";
pub const NID_ecdsa_with_SHA224: u32 = 793;
pub const SN_ecdsa_with_SHA256: &[u8; 18usize] = b"ecdsa-with-SHA256\0";
pub const NID_ecdsa_with_SHA256: u32 = 794;
pub const SN_ecdsa_with_SHA384: &[u8; 18usize] = b"ecdsa-with-SHA384\0";
pub const NID_ecdsa_with_SHA384: u32 = 795;
pub const SN_ecdsa_with_SHA512: &[u8; 18usize] = b"ecdsa-with-SHA512\0";
pub const NID_ecdsa_with_SHA512: u32 = 796;
pub const SN_secp112r1: &[u8; 10usize] = b"secp112r1\0";
pub const NID_secp112r1: u32 = 704;
pub const SN_secp112r2: &[u8; 10usize] = b"secp112r2\0";
pub const NID_secp112r2: u32 = 705;
pub const SN_secp128r1: &[u8; 10usize] = b"secp128r1\0";
pub const NID_secp128r1: u32 = 706;
pub const SN_secp128r2: &[u8; 10usize] = b"secp128r2\0";
pub const NID_secp128r2: u32 = 707;
pub const SN_secp160k1: &[u8; 10usize] = b"secp160k1\0";
pub const NID_secp160k1: u32 = 708;
pub const SN_secp160r1: &[u8; 10usize] = b"secp160r1\0";
pub const NID_secp160r1: u32 = 709;
pub const SN_secp160r2: &[u8; 10usize] = b"secp160r2\0";
pub const NID_secp160r2: u32 = 710;
pub const SN_secp192k1: &[u8; 10usize] = b"secp192k1\0";
pub const NID_secp192k1: u32 = 711;
pub const SN_secp224k1: &[u8; 10usize] = b"secp224k1\0";
pub const NID_secp224k1: u32 = 712;
pub const SN_secp224r1: &[u8; 10usize] = b"secp224r1\0";
pub const NID_secp224r1: u32 = 713;
pub const SN_secp256k1: &[u8; 10usize] = b"secp256k1\0";
pub const NID_secp256k1: u32 = 714;
pub const SN_secp384r1: &[u8; 10usize] = b"secp384r1\0";
pub const NID_secp384r1: u32 = 715;
pub const SN_secp521r1: &[u8; 10usize] = b"secp521r1\0";
pub const NID_secp521r1: u32 = 716;
pub const SN_sect113r1: &[u8; 10usize] = b"sect113r1\0";
pub const NID_sect113r1: u32 = 717;
pub const SN_sect113r2: &[u8; 10usize] = b"sect113r2\0";
pub const NID_sect113r2: u32 = 718;
pub const SN_sect131r1: &[u8; 10usize] = b"sect131r1\0";
pub const NID_sect131r1: u32 = 719;
pub const SN_sect131r2: &[u8; 10usize] = b"sect131r2\0";
pub const NID_sect131r2: u32 = 720;
pub const SN_sect163k1: &[u8; 10usize] = b"sect163k1\0";
pub const NID_sect163k1: u32 = 721;
pub const SN_sect163r1: &[u8; 10usize] = b"sect163r1\0";
pub const NID_sect163r1: u32 = 722;
pub const SN_sect163r2: &[u8; 10usize] = b"sect163r2\0";
pub const NID_sect163r2: u32 = 723;
pub const SN_sect193r1: &[u8; 10usize] = b"sect193r1\0";
pub const NID_sect193r1: u32 = 724;
pub const SN_sect193r2: &[u8; 10usize] = b"sect193r2\0";
pub const NID_sect193r2: u32 = 725;
pub const SN_sect233k1: &[u8; 10usize] = b"sect233k1\0";
pub const NID_sect233k1: u32 = 726;
pub const SN_sect233r1: &[u8; 10usize] = b"sect233r1\0";
pub const NID_sect233r1: u32 = 727;
pub const SN_sect239k1: &[u8; 10usize] = b"sect239k1\0";
pub const NID_sect239k1: u32 = 728;
pub const SN_sect283k1: &[u8; 10usize] = b"sect283k1\0";
pub const NID_sect283k1: u32 = 729;
pub const SN_sect283r1: &[u8; 10usize] = b"sect283r1\0";
pub const NID_sect283r1: u32 = 730;
pub const SN_sect409k1: &[u8; 10usize] = b"sect409k1\0";
pub const NID_sect409k1: u32 = 731;
pub const SN_sect409r1: &[u8; 10usize] = b"sect409r1\0";
pub const NID_sect409r1: u32 = 732;
pub const SN_sect571k1: &[u8; 10usize] = b"sect571k1\0";
pub const NID_sect571k1: u32 = 733;
pub const SN_sect571r1: &[u8; 10usize] = b"sect571r1\0";
pub const NID_sect571r1: u32 = 734;
pub const SN_wap_wsg_idm_ecid_wtls1: &[u8; 23usize] = b"wap-wsg-idm-ecid-wtls1\0";
pub const NID_wap_wsg_idm_ecid_wtls1: u32 = 735;
pub const SN_wap_wsg_idm_ecid_wtls3: &[u8; 23usize] = b"wap-wsg-idm-ecid-wtls3\0";
pub const NID_wap_wsg_idm_ecid_wtls3: u32 = 736;
pub const SN_wap_wsg_idm_ecid_wtls4: &[u8; 23usize] = b"wap-wsg-idm-ecid-wtls4\0";
pub const NID_wap_wsg_idm_ecid_wtls4: u32 = 737;
pub const SN_wap_wsg_idm_ecid_wtls5: &[u8; 23usize] = b"wap-wsg-idm-ecid-wtls5\0";
pub const NID_wap_wsg_idm_ecid_wtls5: u32 = 738;
pub const SN_wap_wsg_idm_ecid_wtls6: &[u8; 23usize] = b"wap-wsg-idm-ecid-wtls6\0";
pub const NID_wap_wsg_idm_ecid_wtls6: u32 = 739;
pub const SN_wap_wsg_idm_ecid_wtls7: &[u8; 23usize] = b"wap-wsg-idm-ecid-wtls7\0";
pub const NID_wap_wsg_idm_ecid_wtls7: u32 = 740;
pub const SN_wap_wsg_idm_ecid_wtls8: &[u8; 23usize] = b"wap-wsg-idm-ecid-wtls8\0";
pub const NID_wap_wsg_idm_ecid_wtls8: u32 = 741;
pub const SN_wap_wsg_idm_ecid_wtls9: &[u8; 23usize] = b"wap-wsg-idm-ecid-wtls9\0";
pub const NID_wap_wsg_idm_ecid_wtls9: u32 = 742;
pub const SN_wap_wsg_idm_ecid_wtls10: &[u8; 24usize] = b"wap-wsg-idm-ecid-wtls10\0";
pub const NID_wap_wsg_idm_ecid_wtls10: u32 = 743;
pub const SN_wap_wsg_idm_ecid_wtls11: &[u8; 24usize] = b"wap-wsg-idm-ecid-wtls11\0";
pub const NID_wap_wsg_idm_ecid_wtls11: u32 = 744;
pub const SN_wap_wsg_idm_ecid_wtls12: &[u8; 24usize] = b"wap-wsg-idm-ecid-wtls12\0";
pub const NID_wap_wsg_idm_ecid_wtls12: u32 = 745;
pub const SN_cast5_cbc: &[u8; 10usize] = b"CAST5-CBC\0";
pub const LN_cast5_cbc: &[u8; 10usize] = b"cast5-cbc\0";
pub const NID_cast5_cbc: u32 = 108;
pub const SN_cast5_ecb: &[u8; 10usize] = b"CAST5-ECB\0";
pub const LN_cast5_ecb: &[u8; 10usize] = b"cast5-ecb\0";
pub const NID_cast5_ecb: u32 = 109;
pub const SN_cast5_cfb64: &[u8; 10usize] = b"CAST5-CFB\0";
pub const LN_cast5_cfb64: &[u8; 10usize] = b"cast5-cfb\0";
pub const NID_cast5_cfb64: u32 = 110;
pub const SN_cast5_ofb64: &[u8; 10usize] = b"CAST5-OFB\0";
pub const LN_cast5_ofb64: &[u8; 10usize] = b"cast5-ofb\0";
pub const NID_cast5_ofb64: u32 = 111;
pub const LN_pbeWithMD5AndCast5_CBC: &[u8; 22usize] = b"pbeWithMD5AndCast5CBC\0";
pub const NID_pbeWithMD5AndCast5_CBC: u32 = 112;
pub const SN_id_PasswordBasedMAC: &[u8; 20usize] = b"id-PasswordBasedMAC\0";
pub const LN_id_PasswordBasedMAC: &[u8; 19usize] = b"password based MAC\0";
pub const NID_id_PasswordBasedMAC: u32 = 782;
pub const SN_id_DHBasedMac: &[u8; 14usize] = b"id-DHBasedMac\0";
pub const LN_id_DHBasedMac: &[u8; 25usize] = b"Diffie-Hellman based MAC\0";
pub const NID_id_DHBasedMac: u32 = 783;
pub const SN_rsadsi: &[u8; 7usize] = b"rsadsi\0";
pub const LN_rsadsi: &[u8; 24usize] = b"RSA Data Security, Inc.\0";
pub const NID_rsadsi: u32 = 1;
pub const SN_pkcs: &[u8; 5usize] = b"pkcs\0";
pub const LN_pkcs: &[u8; 29usize] = b"RSA Data Security, Inc. PKCS\0";
pub const NID_pkcs: u32 = 2;
pub const SN_pkcs1: &[u8; 6usize] = b"pkcs1\0";
pub const NID_pkcs1: u32 = 186;
pub const LN_rsaEncryption: &[u8; 14usize] = b"rsaEncryption\0";
pub const NID_rsaEncryption: u32 = 6;
pub const SN_md2WithRSAEncryption: &[u8; 8usize] = b"RSA-MD2\0";
pub const LN_md2WithRSAEncryption: &[u8; 21usize] = b"md2WithRSAEncryption\0";
pub const NID_md2WithRSAEncryption: u32 = 7;
pub const SN_md4WithRSAEncryption: &[u8; 8usize] = b"RSA-MD4\0";
pub const LN_md4WithRSAEncryption: &[u8; 21usize] = b"md4WithRSAEncryption\0";
pub const NID_md4WithRSAEncryption: u32 = 396;
pub const SN_md5WithRSAEncryption: &[u8; 8usize] = b"RSA-MD5\0";
pub const LN_md5WithRSAEncryption: &[u8; 21usize] = b"md5WithRSAEncryption\0";
pub const NID_md5WithRSAEncryption: u32 = 8;
pub const SN_sha1WithRSAEncryption: &[u8; 9usize] = b"RSA-SHA1\0";
pub const LN_sha1WithRSAEncryption: &[u8; 22usize] = b"sha1WithRSAEncryption\0";
pub const NID_sha1WithRSAEncryption: u32 = 65;
pub const SN_rsaesOaep: &[u8; 11usize] = b"RSAES-OAEP\0";
pub const LN_rsaesOaep: &[u8; 10usize] = b"rsaesOaep\0";
pub const NID_rsaesOaep: u32 = 919;
pub const SN_mgf1: &[u8; 5usize] = b"MGF1\0";
pub const LN_mgf1: &[u8; 5usize] = b"mgf1\0";
pub const NID_mgf1: u32 = 911;
pub const SN_pSpecified: &[u8; 11usize] = b"PSPECIFIED\0";
pub const LN_pSpecified: &[u8; 11usize] = b"pSpecified\0";
pub const NID_pSpecified: u32 = 935;
pub const SN_rsassaPss: &[u8; 11usize] = b"RSASSA-PSS\0";
pub const LN_rsassaPss: &[u8; 10usize] = b"rsassaPss\0";
pub const NID_rsassaPss: u32 = 912;
pub const SN_sha256WithRSAEncryption: &[u8; 11usize] = b"RSA-SHA256\0";
pub const LN_sha256WithRSAEncryption: &[u8; 24usize] = b"sha256WithRSAEncryption\0";
pub const NID_sha256WithRSAEncryption: u32 = 668;
pub const SN_sha384WithRSAEncryption: &[u8; 11usize] = b"RSA-SHA384\0";
pub const LN_sha384WithRSAEncryption: &[u8; 24usize] = b"sha384WithRSAEncryption\0";
pub const NID_sha384WithRSAEncryption: u32 = 669;
pub const SN_sha512WithRSAEncryption: &[u8; 11usize] = b"RSA-SHA512\0";
pub const LN_sha512WithRSAEncryption: &[u8; 24usize] = b"sha512WithRSAEncryption\0";
pub const NID_sha512WithRSAEncryption: u32 = 670;
pub const SN_sha224WithRSAEncryption: &[u8; 11usize] = b"RSA-SHA224\0";
pub const LN_sha224WithRSAEncryption: &[u8; 24usize] = b"sha224WithRSAEncryption\0";
pub const NID_sha224WithRSAEncryption: u32 = 671;
pub const SN_sha512_224WithRSAEncryption: &[u8; 15usize] = b"RSA-SHA512/224\0";
pub const LN_sha512_224WithRSAEncryption: &[u8; 28usize] = b"sha512-224WithRSAEncryption\0";
pub const NID_sha512_224WithRSAEncryption: u32 = 1145;
pub const SN_sha512_256WithRSAEncryption: &[u8; 15usize] = b"RSA-SHA512/256\0";
pub const LN_sha512_256WithRSAEncryption: &[u8; 28usize] = b"sha512-256WithRSAEncryption\0";
pub const NID_sha512_256WithRSAEncryption: u32 = 1146;
pub const SN_pkcs3: &[u8; 6usize] = b"pkcs3\0";
pub const NID_pkcs3: u32 = 27;
pub const LN_dhKeyAgreement: &[u8; 15usize] = b"dhKeyAgreement\0";
pub const NID_dhKeyAgreement: u32 = 28;
pub const SN_pkcs5: &[u8; 6usize] = b"pkcs5\0";
pub const NID_pkcs5: u32 = 187;
pub const SN_pbeWithMD2AndDES_CBC: &[u8; 12usize] = b"PBE-MD2-DES\0";
pub const LN_pbeWithMD2AndDES_CBC: &[u8; 21usize] = b"pbeWithMD2AndDES-CBC\0";
pub const NID_pbeWithMD2AndDES_CBC: u32 = 9;
pub const SN_pbeWithMD5AndDES_CBC: &[u8; 12usize] = b"PBE-MD5-DES\0";
pub const LN_pbeWithMD5AndDES_CBC: &[u8; 21usize] = b"pbeWithMD5AndDES-CBC\0";
pub const NID_pbeWithMD5AndDES_CBC: u32 = 10;
pub const SN_pbeWithMD2AndRC2_CBC: &[u8; 15usize] = b"PBE-MD2-RC2-64\0";
pub const LN_pbeWithMD2AndRC2_CBC: &[u8; 21usize] = b"pbeWithMD2AndRC2-CBC\0";
pub const NID_pbeWithMD2AndRC2_CBC: u32 = 168;
pub const SN_pbeWithMD5AndRC2_CBC: &[u8; 15usize] = b"PBE-MD5-RC2-64\0";
pub const LN_pbeWithMD5AndRC2_CBC: &[u8; 21usize] = b"pbeWithMD5AndRC2-CBC\0";
pub const NID_pbeWithMD5AndRC2_CBC: u32 = 169;
pub const SN_pbeWithSHA1AndDES_CBC: &[u8; 13usize] = b"PBE-SHA1-DES\0";
pub const LN_pbeWithSHA1AndDES_CBC: &[u8; 22usize] = b"pbeWithSHA1AndDES-CBC\0";
pub const NID_pbeWithSHA1AndDES_CBC: u32 = 170;
pub const SN_pbeWithSHA1AndRC2_CBC: &[u8; 16usize] = b"PBE-SHA1-RC2-64\0";
pub const LN_pbeWithSHA1AndRC2_CBC: &[u8; 22usize] = b"pbeWithSHA1AndRC2-CBC\0";
pub const NID_pbeWithSHA1AndRC2_CBC: u32 = 68;
pub const LN_id_pbkdf2: &[u8; 7usize] = b"PBKDF2\0";
pub const NID_id_pbkdf2: u32 = 69;
pub const LN_pbes2: &[u8; 6usize] = b"PBES2\0";
pub const NID_pbes2: u32 = 161;
pub const LN_pbmac1: &[u8; 7usize] = b"PBMAC1\0";
pub const NID_pbmac1: u32 = 162;
pub const SN_pkcs7: &[u8; 6usize] = b"pkcs7\0";
pub const NID_pkcs7: u32 = 20;
pub const LN_pkcs7_data: &[u8; 11usize] = b"pkcs7-data\0";
pub const NID_pkcs7_data: u32 = 21;
pub const LN_pkcs7_signed: &[u8; 17usize] = b"pkcs7-signedData\0";
pub const NID_pkcs7_signed: u32 = 22;
pub const LN_pkcs7_enveloped: &[u8; 20usize] = b"pkcs7-envelopedData\0";
pub const NID_pkcs7_enveloped: u32 = 23;
pub const LN_pkcs7_signedAndEnveloped: &[u8; 29usize] = b"pkcs7-signedAndEnvelopedData\0";
pub const NID_pkcs7_signedAndEnveloped: u32 = 24;
pub const LN_pkcs7_digest: &[u8; 17usize] = b"pkcs7-digestData\0";
pub const NID_pkcs7_digest: u32 = 25;
pub const LN_pkcs7_encrypted: &[u8; 20usize] = b"pkcs7-encryptedData\0";
pub const NID_pkcs7_encrypted: u32 = 26;
pub const SN_pkcs9: &[u8; 6usize] = b"pkcs9\0";
pub const NID_pkcs9: u32 = 47;
pub const LN_pkcs9_emailAddress: &[u8; 13usize] = b"emailAddress\0";
pub const NID_pkcs9_emailAddress: u32 = 48;
pub const LN_pkcs9_unstructuredName: &[u8; 17usize] = b"unstructuredName\0";
pub const NID_pkcs9_unstructuredName: u32 = 49;
pub const LN_pkcs9_contentType: &[u8; 12usize] = b"contentType\0";
pub const NID_pkcs9_contentType: u32 = 50;
pub const LN_pkcs9_messageDigest: &[u8; 14usize] = b"messageDigest\0";
pub const NID_pkcs9_messageDigest: u32 = 51;
pub const LN_pkcs9_signingTime: &[u8; 12usize] = b"signingTime\0";
pub const NID_pkcs9_signingTime: u32 = 52;
pub const LN_pkcs9_countersignature: &[u8; 17usize] = b"countersignature\0";
pub const NID_pkcs9_countersignature: u32 = 53;
pub const LN_pkcs9_challengePassword: &[u8; 18usize] = b"challengePassword\0";
pub const NID_pkcs9_challengePassword: u32 = 54;
pub const LN_pkcs9_unstructuredAddress: &[u8; 20usize] = b"unstructuredAddress\0";
pub const NID_pkcs9_unstructuredAddress: u32 = 55;
pub const LN_pkcs9_extCertAttributes: &[u8; 30usize] = b"extendedCertificateAttributes\0";
pub const NID_pkcs9_extCertAttributes: u32 = 56;
pub const SN_ext_req: &[u8; 7usize] = b"extReq\0";
pub const LN_ext_req: &[u8; 18usize] = b"Extension Request\0";
pub const NID_ext_req: u32 = 172;
pub const SN_SMIMECapabilities: &[u8; 11usize] = b"SMIME-CAPS\0";
pub const LN_SMIMECapabilities: &[u8; 20usize] = b"S/MIME Capabilities\0";
pub const NID_SMIMECapabilities: u32 = 167;
pub const SN_SMIME: &[u8; 6usize] = b"SMIME\0";
pub const LN_SMIME: &[u8; 7usize] = b"S/MIME\0";
pub const NID_SMIME: u32 = 188;
pub const SN_id_smime_mod: &[u8; 13usize] = b"id-smime-mod\0";
pub const NID_id_smime_mod: u32 = 189;
pub const SN_id_smime_ct: &[u8; 12usize] = b"id-smime-ct\0";
pub const NID_id_smime_ct: u32 = 190;
pub const SN_id_smime_aa: &[u8; 12usize] = b"id-smime-aa\0";
pub const NID_id_smime_aa: u32 = 191;
pub const SN_id_smime_alg: &[u8; 13usize] = b"id-smime-alg\0";
pub const NID_id_smime_alg: u32 = 192;
pub const SN_id_smime_cd: &[u8; 12usize] = b"id-smime-cd\0";
pub const NID_id_smime_cd: u32 = 193;
pub const SN_id_smime_spq: &[u8; 13usize] = b"id-smime-spq\0";
pub const NID_id_smime_spq: u32 = 194;
pub const SN_id_smime_cti: &[u8; 13usize] = b"id-smime-cti\0";
pub const NID_id_smime_cti: u32 = 195;
pub const SN_id_smime_mod_cms: &[u8; 17usize] = b"id-smime-mod-cms\0";
pub const NID_id_smime_mod_cms: u32 = 196;
pub const SN_id_smime_mod_ess: &[u8; 17usize] = b"id-smime-mod-ess\0";
pub const NID_id_smime_mod_ess: u32 = 197;
pub const SN_id_smime_mod_oid: &[u8; 17usize] = b"id-smime-mod-oid\0";
pub const NID_id_smime_mod_oid: u32 = 198;
pub const SN_id_smime_mod_msg_v3: &[u8; 20usize] = b"id-smime-mod-msg-v3\0";
pub const NID_id_smime_mod_msg_v3: u32 = 199;
pub const SN_id_smime_mod_ets_eSignature_88: &[u8; 31usize] = b"id-smime-mod-ets-eSignature-88\0";
pub const NID_id_smime_mod_ets_eSignature_88: u32 = 200;
pub const SN_id_smime_mod_ets_eSignature_97: &[u8; 31usize] = b"id-smime-mod-ets-eSignature-97\0";
pub const NID_id_smime_mod_ets_eSignature_97: u32 = 201;
pub const SN_id_smime_mod_ets_eSigPolicy_88: &[u8; 31usize] = b"id-smime-mod-ets-eSigPolicy-88\0";
pub const NID_id_smime_mod_ets_eSigPolicy_88: u32 = 202;
pub const SN_id_smime_mod_ets_eSigPolicy_97: &[u8; 31usize] = b"id-smime-mod-ets-eSigPolicy-97\0";
pub const NID_id_smime_mod_ets_eSigPolicy_97: u32 = 203;
pub const SN_id_smime_ct_receipt: &[u8; 20usize] = b"id-smime-ct-receipt\0";
pub const NID_id_smime_ct_receipt: u32 = 204;
pub const SN_id_smime_ct_authData: &[u8; 21usize] = b"id-smime-ct-authData\0";
pub const NID_id_smime_ct_authData: u32 = 205;
pub const SN_id_smime_ct_publishCert: &[u8; 24usize] = b"id-smime-ct-publishCert\0";
pub const NID_id_smime_ct_publishCert: u32 = 206;
pub const SN_id_smime_ct_TSTInfo: &[u8; 20usize] = b"id-smime-ct-TSTInfo\0";
pub const NID_id_smime_ct_TSTInfo: u32 = 207;
pub const SN_id_smime_ct_TDTInfo: &[u8; 20usize] = b"id-smime-ct-TDTInfo\0";
pub const NID_id_smime_ct_TDTInfo: u32 = 208;
pub const SN_id_smime_ct_contentInfo: &[u8; 24usize] = b"id-smime-ct-contentInfo\0";
pub const NID_id_smime_ct_contentInfo: u32 = 209;
pub const SN_id_smime_ct_DVCSRequestData: &[u8; 28usize] = b"id-smime-ct-DVCSRequestData\0";
pub const NID_id_smime_ct_DVCSRequestData: u32 = 210;
pub const SN_id_smime_ct_DVCSResponseData: &[u8; 29usize] = b"id-smime-ct-DVCSResponseData\0";
pub const NID_id_smime_ct_DVCSResponseData: u32 = 211;
pub const SN_id_smime_ct_compressedData: &[u8; 27usize] = b"id-smime-ct-compressedData\0";
pub const NID_id_smime_ct_compressedData: u32 = 786;
pub const SN_id_smime_ct_contentCollection: &[u8; 30usize] = b"id-smime-ct-contentCollection\0";
pub const NID_id_smime_ct_contentCollection: u32 = 1058;
pub const SN_id_smime_ct_authEnvelopedData: &[u8; 30usize] = b"id-smime-ct-authEnvelopedData\0";
pub const NID_id_smime_ct_authEnvelopedData: u32 = 1059;
pub const SN_id_ct_routeOriginAuthz: &[u8; 23usize] = b"id-ct-routeOriginAuthz\0";
pub const NID_id_ct_routeOriginAuthz: u32 = 1234;
pub const SN_id_ct_rpkiManifest: &[u8; 19usize] = b"id-ct-rpkiManifest\0";
pub const NID_id_ct_rpkiManifest: u32 = 1235;
pub const SN_id_ct_asciiTextWithCRLF: &[u8; 24usize] = b"id-ct-asciiTextWithCRLF\0";
pub const NID_id_ct_asciiTextWithCRLF: u32 = 787;
pub const SN_id_ct_xml: &[u8; 10usize] = b"id-ct-xml\0";
pub const NID_id_ct_xml: u32 = 1060;
pub const SN_id_ct_rpkiGhostbusters: &[u8; 23usize] = b"id-ct-rpkiGhostbusters\0";
pub const NID_id_ct_rpkiGhostbusters: u32 = 1236;
pub const SN_id_ct_resourceTaggedAttest: &[u8; 27usize] = b"id-ct-resourceTaggedAttest\0";
pub const NID_id_ct_resourceTaggedAttest: u32 = 1237;
pub const SN_id_ct_geofeedCSVwithCRLF: &[u8; 25usize] = b"id-ct-geofeedCSVwithCRLF\0";
pub const NID_id_ct_geofeedCSVwithCRLF: u32 = 1246;
pub const SN_id_ct_signedChecklist: &[u8; 22usize] = b"id-ct-signedChecklist\0";
pub const NID_id_ct_signedChecklist: u32 = 1247;
pub const SN_id_smime_aa_receiptRequest: &[u8; 27usize] = b"id-smime-aa-receiptRequest\0";
pub const NID_id_smime_aa_receiptRequest: u32 = 212;
pub const SN_id_smime_aa_securityLabel: &[u8; 26usize] = b"id-smime-aa-securityLabel\0";
pub const NID_id_smime_aa_securityLabel: u32 = 213;
pub const SN_id_smime_aa_mlExpandHistory: &[u8; 28usize] = b"id-smime-aa-mlExpandHistory\0";
pub const NID_id_smime_aa_mlExpandHistory: u32 = 214;
pub const SN_id_smime_aa_contentHint: &[u8; 24usize] = b"id-smime-aa-contentHint\0";
pub const NID_id_smime_aa_contentHint: u32 = 215;
pub const SN_id_smime_aa_msgSigDigest: &[u8; 25usize] = b"id-smime-aa-msgSigDigest\0";
pub const NID_id_smime_aa_msgSigDigest: u32 = 216;
pub const SN_id_smime_aa_encapContentType: &[u8; 29usize] = b"id-smime-aa-encapContentType\0";
pub const NID_id_smime_aa_encapContentType: u32 = 217;
pub const SN_id_smime_aa_contentIdentifier: &[u8; 30usize] = b"id-smime-aa-contentIdentifier\0";
pub const NID_id_smime_aa_contentIdentifier: u32 = 218;
pub const SN_id_smime_aa_macValue: &[u8; 21usize] = b"id-smime-aa-macValue\0";
pub const NID_id_smime_aa_macValue: u32 = 219;
pub const SN_id_smime_aa_equivalentLabels: &[u8; 29usize] = b"id-smime-aa-equivalentLabels\0";
pub const NID_id_smime_aa_equivalentLabels: u32 = 220;
pub const SN_id_smime_aa_contentReference: &[u8; 29usize] = b"id-smime-aa-contentReference\0";
pub const NID_id_smime_aa_contentReference: u32 = 221;
pub const SN_id_smime_aa_encrypKeyPref: &[u8; 26usize] = b"id-smime-aa-encrypKeyPref\0";
pub const NID_id_smime_aa_encrypKeyPref: u32 = 222;
pub const SN_id_smime_aa_signingCertificate: &[u8; 31usize] = b"id-smime-aa-signingCertificate\0";
pub const NID_id_smime_aa_signingCertificate: u32 = 223;
pub const SN_id_smime_aa_smimeEncryptCerts: &[u8; 30usize] = b"id-smime-aa-smimeEncryptCerts\0";
pub const NID_id_smime_aa_smimeEncryptCerts: u32 = 224;
pub const SN_id_smime_aa_timeStampToken: &[u8; 27usize] = b"id-smime-aa-timeStampToken\0";
pub const NID_id_smime_aa_timeStampToken: u32 = 225;
pub const SN_id_smime_aa_ets_sigPolicyId: &[u8; 28usize] = b"id-smime-aa-ets-sigPolicyId\0";
pub const NID_id_smime_aa_ets_sigPolicyId: u32 = 226;
pub const SN_id_smime_aa_ets_commitmentType: &[u8; 31usize] = b"id-smime-aa-ets-commitmentType\0";
pub const NID_id_smime_aa_ets_commitmentType: u32 = 227;
pub const SN_id_smime_aa_ets_signerLocation: &[u8; 31usize] = b"id-smime-aa-ets-signerLocation\0";
pub const NID_id_smime_aa_ets_signerLocation: u32 = 228;
pub const SN_id_smime_aa_ets_signerAttr: &[u8; 27usize] = b"id-smime-aa-ets-signerAttr\0";
pub const NID_id_smime_aa_ets_signerAttr: u32 = 229;
pub const SN_id_smime_aa_ets_otherSigCert: &[u8; 29usize] = b"id-smime-aa-ets-otherSigCert\0";
pub const NID_id_smime_aa_ets_otherSigCert: u32 = 230;
pub const SN_id_smime_aa_ets_contentTimestamp: &[u8; 33usize] =
    b"id-smime-aa-ets-contentTimestamp\0";
pub const NID_id_smime_aa_ets_contentTimestamp: u32 = 231;
pub const SN_id_smime_aa_ets_CertificateRefs: &[u8; 32usize] = b"id-smime-aa-ets-CertificateRefs\0";
pub const NID_id_smime_aa_ets_CertificateRefs: u32 = 232;
pub const SN_id_smime_aa_ets_RevocationRefs: &[u8; 31usize] = b"id-smime-aa-ets-RevocationRefs\0";
pub const NID_id_smime_aa_ets_RevocationRefs: u32 = 233;
pub const SN_id_smime_aa_ets_certValues: &[u8; 27usize] = b"id-smime-aa-ets-certValues\0";
pub const NID_id_smime_aa_ets_certValues: u32 = 234;
pub const SN_id_smime_aa_ets_revocationValues: &[u8; 33usize] =
    b"id-smime-aa-ets-revocationValues\0";
pub const NID_id_smime_aa_ets_revocationValues: u32 = 235;
pub const SN_id_smime_aa_ets_escTimeStamp: &[u8; 29usize] = b"id-smime-aa-ets-escTimeStamp\0";
pub const NID_id_smime_aa_ets_escTimeStamp: u32 = 236;
pub const SN_id_smime_aa_ets_certCRLTimestamp: &[u8; 33usize] =
    b"id-smime-aa-ets-certCRLTimestamp\0";
pub const NID_id_smime_aa_ets_certCRLTimestamp: u32 = 237;
pub const SN_id_smime_aa_ets_archiveTimeStamp: &[u8; 33usize] =
    b"id-smime-aa-ets-archiveTimeStamp\0";
pub const NID_id_smime_aa_ets_archiveTimeStamp: u32 = 238;
pub const SN_id_smime_aa_signatureType: &[u8; 26usize] = b"id-smime-aa-signatureType\0";
pub const NID_id_smime_aa_signatureType: u32 = 239;
pub const SN_id_smime_aa_dvcs_dvc: &[u8; 21usize] = b"id-smime-aa-dvcs-dvc\0";
pub const NID_id_smime_aa_dvcs_dvc: u32 = 240;
pub const SN_id_smime_aa_signingCertificateV2: &[u8; 33usize] =
    b"id-smime-aa-signingCertificateV2\0";
pub const NID_id_smime_aa_signingCertificateV2: u32 = 1086;
pub const SN_id_smime_alg_ESDHwith3DES: &[u8; 26usize] = b"id-smime-alg-ESDHwith3DES\0";
pub const NID_id_smime_alg_ESDHwith3DES: u32 = 241;
pub const SN_id_smime_alg_ESDHwithRC2: &[u8; 25usize] = b"id-smime-alg-ESDHwithRC2\0";
pub const NID_id_smime_alg_ESDHwithRC2: u32 = 242;
pub const SN_id_smime_alg_3DESwrap: &[u8; 22usize] = b"id-smime-alg-3DESwrap\0";
pub const NID_id_smime_alg_3DESwrap: u32 = 243;
pub const SN_id_smime_alg_RC2wrap: &[u8; 21usize] = b"id-smime-alg-RC2wrap\0";
pub const NID_id_smime_alg_RC2wrap: u32 = 244;
pub const SN_id_smime_alg_ESDH: &[u8; 18usize] = b"id-smime-alg-ESDH\0";
pub const NID_id_smime_alg_ESDH: u32 = 245;
pub const SN_id_smime_alg_CMS3DESwrap: &[u8; 25usize] = b"id-smime-alg-CMS3DESwrap\0";
pub const NID_id_smime_alg_CMS3DESwrap: u32 = 246;
pub const SN_id_smime_alg_CMSRC2wrap: &[u8; 24usize] = b"id-smime-alg-CMSRC2wrap\0";
pub const NID_id_smime_alg_CMSRC2wrap: u32 = 247;
pub const SN_id_alg_PWRI_KEK: &[u8; 16usize] = b"id-alg-PWRI-KEK\0";
pub const NID_id_alg_PWRI_KEK: u32 = 893;
pub const SN_id_smime_cd_ldap: &[u8; 17usize] = b"id-smime-cd-ldap\0";
pub const NID_id_smime_cd_ldap: u32 = 248;
pub const SN_id_smime_spq_ets_sqt_uri: &[u8; 25usize] = b"id-smime-spq-ets-sqt-uri\0";
pub const NID_id_smime_spq_ets_sqt_uri: u32 = 249;
pub const SN_id_smime_spq_ets_sqt_unotice: &[u8; 29usize] = b"id-smime-spq-ets-sqt-unotice\0";
pub const NID_id_smime_spq_ets_sqt_unotice: u32 = 250;
pub const SN_id_smime_cti_ets_proofOfOrigin: &[u8; 31usize] = b"id-smime-cti-ets-proofOfOrigin\0";
pub const NID_id_smime_cti_ets_proofOfOrigin: u32 = 251;
pub const SN_id_smime_cti_ets_proofOfReceipt: &[u8; 32usize] = b"id-smime-cti-ets-proofOfReceipt\0";
pub const NID_id_smime_cti_ets_proofOfReceipt: u32 = 252;
pub const SN_id_smime_cti_ets_proofOfDelivery: &[u8; 33usize] =
    b"id-smime-cti-ets-proofOfDelivery\0";
pub const NID_id_smime_cti_ets_proofOfDelivery: u32 = 253;
pub const SN_id_smime_cti_ets_proofOfSender: &[u8; 31usize] = b"id-smime-cti-ets-proofOfSender\0";
pub const NID_id_smime_cti_ets_proofOfSender: u32 = 254;
pub const SN_id_smime_cti_ets_proofOfApproval: &[u8; 33usize] =
    b"id-smime-cti-ets-proofOfApproval\0";
pub const NID_id_smime_cti_ets_proofOfApproval: u32 = 255;
pub const SN_id_smime_cti_ets_proofOfCreation: &[u8; 33usize] =
    b"id-smime-cti-ets-proofOfCreation\0";
pub const NID_id_smime_cti_ets_proofOfCreation: u32 = 256;
pub const LN_friendlyName: &[u8; 13usize] = b"friendlyName\0";
pub const NID_friendlyName: u32 = 156;
pub const LN_localKeyID: &[u8; 11usize] = b"localKeyID\0";
pub const NID_localKeyID: u32 = 157;
pub const SN_ms_csp_name: &[u8; 8usize] = b"CSPName\0";
pub const LN_ms_csp_name: &[u8; 19usize] = b"Microsoft CSP Name\0";
pub const NID_ms_csp_name: u32 = 417;
pub const SN_LocalKeySet: &[u8; 12usize] = b"LocalKeySet\0";
pub const LN_LocalKeySet: &[u8; 24usize] = b"Microsoft Local Key set\0";
pub const NID_LocalKeySet: u32 = 856;
pub const LN_x509Certificate: &[u8; 16usize] = b"x509Certificate\0";
pub const NID_x509Certificate: u32 = 158;
pub const LN_sdsiCertificate: &[u8; 16usize] = b"sdsiCertificate\0";
pub const NID_sdsiCertificate: u32 = 159;
pub const LN_x509Crl: &[u8; 8usize] = b"x509Crl\0";
pub const NID_x509Crl: u32 = 160;
pub const SN_pbe_WithSHA1And128BitRC4: &[u8; 17usize] = b"PBE-SHA1-RC4-128\0";
pub const LN_pbe_WithSHA1And128BitRC4: &[u8; 24usize] = b"pbeWithSHA1And128BitRC4\0";
pub const NID_pbe_WithSHA1And128BitRC4: u32 = 144;
pub const SN_pbe_WithSHA1And40BitRC4: &[u8; 16usize] = b"PBE-SHA1-RC4-40\0";
pub const LN_pbe_WithSHA1And40BitRC4: &[u8; 23usize] = b"pbeWithSHA1And40BitRC4\0";
pub const NID_pbe_WithSHA1And40BitRC4: u32 = 145;
pub const SN_pbe_WithSHA1And3_Key_TripleDES_CBC: &[u8; 14usize] = b"PBE-SHA1-3DES\0";
pub const LN_pbe_WithSHA1And3_Key_TripleDES_CBC: &[u8; 33usize] =
    b"pbeWithSHA1And3-KeyTripleDES-CBC\0";
pub const NID_pbe_WithSHA1And3_Key_TripleDES_CBC: u32 = 146;
pub const SN_pbe_WithSHA1And2_Key_TripleDES_CBC: &[u8; 14usize] = b"PBE-SHA1-2DES\0";
pub const LN_pbe_WithSHA1And2_Key_TripleDES_CBC: &[u8; 33usize] =
    b"pbeWithSHA1And2-KeyTripleDES-CBC\0";
pub const NID_pbe_WithSHA1And2_Key_TripleDES_CBC: u32 = 147;
pub const SN_pbe_WithSHA1And128BitRC2_CBC: &[u8; 17usize] = b"PBE-SHA1-RC2-128\0";
pub const LN_pbe_WithSHA1And128BitRC2_CBC: &[u8; 28usize] = b"pbeWithSHA1And128BitRC2-CBC\0";
pub const NID_pbe_WithSHA1And128BitRC2_CBC: u32 = 148;
pub const SN_pbe_WithSHA1And40BitRC2_CBC: &[u8; 16usize] = b"PBE-SHA1-RC2-40\0";
pub const LN_pbe_WithSHA1And40BitRC2_CBC: &[u8; 27usize] = b"pbeWithSHA1And40BitRC2-CBC\0";
pub const NID_pbe_WithSHA1And40BitRC2_CBC: u32 = 149;
pub const LN_keyBag: &[u8; 7usize] = b"keyBag\0";
pub const NID_keyBag: u32 = 150;
pub const LN_pkcs8ShroudedKeyBag: &[u8; 20usize] = b"pkcs8ShroudedKeyBag\0";
pub const NID_pkcs8ShroudedKeyBag: u32 = 151;
pub const LN_certBag: &[u8; 8usize] = b"certBag\0";
pub const NID_certBag: u32 = 152;
pub const LN_crlBag: &[u8; 7usize] = b"crlBag\0";
pub const NID_crlBag: u32 = 153;
pub const LN_secretBag: &[u8; 10usize] = b"secretBag\0";
pub const NID_secretBag: u32 = 154;
pub const LN_safeContentsBag: &[u8; 16usize] = b"safeContentsBag\0";
pub const NID_safeContentsBag: u32 = 155;
pub const SN_md2: &[u8; 4usize] = b"MD2\0";
pub const LN_md2: &[u8; 4usize] = b"md2\0";
pub const NID_md2: u32 = 3;
pub const SN_md4: &[u8; 4usize] = b"MD4\0";
pub const LN_md4: &[u8; 4usize] = b"md4\0";
pub const NID_md4: u32 = 257;
pub const SN_md5: &[u8; 4usize] = b"MD5\0";
pub const LN_md5: &[u8; 4usize] = b"md5\0";
pub const NID_md5: u32 = 4;
pub const SN_md5_sha1: &[u8; 9usize] = b"MD5-SHA1\0";
pub const LN_md5_sha1: &[u8; 9usize] = b"md5-sha1\0";
pub const NID_md5_sha1: u32 = 114;
pub const LN_hmacWithMD5: &[u8; 12usize] = b"hmacWithMD5\0";
pub const NID_hmacWithMD5: u32 = 797;
pub const LN_hmacWithSHA1: &[u8; 13usize] = b"hmacWithSHA1\0";
pub const NID_hmacWithSHA1: u32 = 163;
pub const SN_sm2: &[u8; 4usize] = b"SM2\0";
pub const LN_sm2: &[u8; 4usize] = b"sm2\0";
pub const NID_sm2: u32 = 1172;
pub const SN_sm3: &[u8; 4usize] = b"SM3\0";
pub const LN_sm3: &[u8; 4usize] = b"sm3\0";
pub const NID_sm3: u32 = 1143;
pub const SN_sm3WithRSAEncryption: &[u8; 8usize] = b"RSA-SM3\0";
pub const LN_sm3WithRSAEncryption: &[u8; 21usize] = b"sm3WithRSAEncryption\0";
pub const NID_sm3WithRSAEncryption: u32 = 1144;
pub const SN_SM2_with_SM3: &[u8; 8usize] = b"SM2-SM3\0";
pub const LN_SM2_with_SM3: &[u8; 13usize] = b"SM2-with-SM3\0";
pub const NID_SM2_with_SM3: u32 = 1204;
pub const LN_hmacWithSHA224: &[u8; 15usize] = b"hmacWithSHA224\0";
pub const NID_hmacWithSHA224: u32 = 798;
pub const LN_hmacWithSHA256: &[u8; 15usize] = b"hmacWithSHA256\0";
pub const NID_hmacWithSHA256: u32 = 799;
pub const LN_hmacWithSHA384: &[u8; 15usize] = b"hmacWithSHA384\0";
pub const NID_hmacWithSHA384: u32 = 800;
pub const LN_hmacWithSHA512: &[u8; 15usize] = b"hmacWithSHA512\0";
pub const NID_hmacWithSHA512: u32 = 801;
pub const LN_hmacWithSHA512_224: &[u8; 19usize] = b"hmacWithSHA512-224\0";
pub const NID_hmacWithSHA512_224: u32 = 1193;
pub const LN_hmacWithSHA512_256: &[u8; 19usize] = b"hmacWithSHA512-256\0";
pub const NID_hmacWithSHA512_256: u32 = 1194;
pub const SN_rc2_cbc: &[u8; 8usize] = b"RC2-CBC\0";
pub const LN_rc2_cbc: &[u8; 8usize] = b"rc2-cbc\0";
pub const NID_rc2_cbc: u32 = 37;
pub const SN_rc2_ecb: &[u8; 8usize] = b"RC2-ECB\0";
pub const LN_rc2_ecb: &[u8; 8usize] = b"rc2-ecb\0";
pub const NID_rc2_ecb: u32 = 38;
pub const SN_rc2_cfb64: &[u8; 8usize] = b"RC2-CFB\0";
pub const LN_rc2_cfb64: &[u8; 8usize] = b"rc2-cfb\0";
pub const NID_rc2_cfb64: u32 = 39;
pub const SN_rc2_ofb64: &[u8; 8usize] = b"RC2-OFB\0";
pub const LN_rc2_ofb64: &[u8; 8usize] = b"rc2-ofb\0";
pub const NID_rc2_ofb64: u32 = 40;
pub const SN_rc2_40_cbc: &[u8; 11usize] = b"RC2-40-CBC\0";
pub const LN_rc2_40_cbc: &[u8; 11usize] = b"rc2-40-cbc\0";
pub const NID_rc2_40_cbc: u32 = 98;
pub const SN_rc2_64_cbc: &[u8; 11usize] = b"RC2-64-CBC\0";
pub const LN_rc2_64_cbc: &[u8; 11usize] = b"rc2-64-cbc\0";
pub const NID_rc2_64_cbc: u32 = 166;
pub const SN_rc4: &[u8; 4usize] = b"RC4\0";
pub const LN_rc4: &[u8; 4usize] = b"rc4\0";
pub const NID_rc4: u32 = 5;
pub const SN_rc4_40: &[u8; 7usize] = b"RC4-40\0";
pub const LN_rc4_40: &[u8; 7usize] = b"rc4-40\0";
pub const NID_rc4_40: u32 = 97;
pub const SN_des_ede3_cbc: &[u8; 13usize] = b"DES-EDE3-CBC\0";
pub const LN_des_ede3_cbc: &[u8; 13usize] = b"des-ede3-cbc\0";
pub const NID_des_ede3_cbc: u32 = 44;
pub const SN_rc5_cbc: &[u8; 8usize] = b"RC5-CBC\0";
pub const LN_rc5_cbc: &[u8; 8usize] = b"rc5-cbc\0";
pub const NID_rc5_cbc: u32 = 120;
pub const SN_rc5_ecb: &[u8; 8usize] = b"RC5-ECB\0";
pub const LN_rc5_ecb: &[u8; 8usize] = b"rc5-ecb\0";
pub const NID_rc5_ecb: u32 = 121;
pub const SN_rc5_cfb64: &[u8; 8usize] = b"RC5-CFB\0";
pub const LN_rc5_cfb64: &[u8; 8usize] = b"rc5-cfb\0";
pub const NID_rc5_cfb64: u32 = 122;
pub const SN_rc5_ofb64: &[u8; 8usize] = b"RC5-OFB\0";
pub const LN_rc5_ofb64: &[u8; 8usize] = b"rc5-ofb\0";
pub const NID_rc5_ofb64: u32 = 123;
pub const SN_ms_ext_req: &[u8; 9usize] = b"msExtReq\0";
pub const LN_ms_ext_req: &[u8; 28usize] = b"Microsoft Extension Request\0";
pub const NID_ms_ext_req: u32 = 171;
pub const SN_ms_code_ind: &[u8; 10usize] = b"msCodeInd\0";
pub const LN_ms_code_ind: &[u8; 34usize] = b"Microsoft Individual Code Signing\0";
pub const NID_ms_code_ind: u32 = 134;
pub const SN_ms_code_com: &[u8; 10usize] = b"msCodeCom\0";
pub const LN_ms_code_com: &[u8; 34usize] = b"Microsoft Commercial Code Signing\0";
pub const NID_ms_code_com: u32 = 135;
pub const SN_ms_ctl_sign: &[u8; 10usize] = b"msCTLSign\0";
pub const LN_ms_ctl_sign: &[u8; 29usize] = b"Microsoft Trust List Signing\0";
pub const NID_ms_ctl_sign: u32 = 136;
pub const SN_ms_sgc: &[u8; 6usize] = b"msSGC\0";
pub const LN_ms_sgc: &[u8; 30usize] = b"Microsoft Server Gated Crypto\0";
pub const NID_ms_sgc: u32 = 137;
pub const SN_ms_efs: &[u8; 6usize] = b"msEFS\0";
pub const LN_ms_efs: &[u8; 32usize] = b"Microsoft Encrypted File System\0";
pub const NID_ms_efs: u32 = 138;
pub const SN_ms_smartcard_login: &[u8; 17usize] = b"msSmartcardLogin\0";
pub const LN_ms_smartcard_login: &[u8; 26usize] = b"Microsoft Smartcard Login\0";
pub const NID_ms_smartcard_login: u32 = 648;
pub const SN_ms_upn: &[u8; 6usize] = b"msUPN\0";
pub const LN_ms_upn: &[u8; 30usize] = b"Microsoft User Principal Name\0";
pub const NID_ms_upn: u32 = 649;
pub const SN_idea_cbc: &[u8; 9usize] = b"IDEA-CBC\0";
pub const LN_idea_cbc: &[u8; 9usize] = b"idea-cbc\0";
pub const NID_idea_cbc: u32 = 34;
pub const SN_idea_ecb: &[u8; 9usize] = b"IDEA-ECB\0";
pub const LN_idea_ecb: &[u8; 9usize] = b"idea-ecb\0";
pub const NID_idea_ecb: u32 = 36;
pub const SN_idea_cfb64: &[u8; 9usize] = b"IDEA-CFB\0";
pub const LN_idea_cfb64: &[u8; 9usize] = b"idea-cfb\0";
pub const NID_idea_cfb64: u32 = 35;
pub const SN_idea_ofb64: &[u8; 9usize] = b"IDEA-OFB\0";
pub const LN_idea_ofb64: &[u8; 9usize] = b"idea-ofb\0";
pub const NID_idea_ofb64: u32 = 46;
pub const SN_bf_cbc: &[u8; 7usize] = b"BF-CBC\0";
pub const LN_bf_cbc: &[u8; 7usize] = b"bf-cbc\0";
pub const NID_bf_cbc: u32 = 91;
pub const SN_bf_ecb: &[u8; 7usize] = b"BF-ECB\0";
pub const LN_bf_ecb: &[u8; 7usize] = b"bf-ecb\0";
pub const NID_bf_ecb: u32 = 92;
pub const SN_bf_cfb64: &[u8; 7usize] = b"BF-CFB\0";
pub const LN_bf_cfb64: &[u8; 7usize] = b"bf-cfb\0";
pub const NID_bf_cfb64: u32 = 93;
pub const SN_bf_ofb64: &[u8; 7usize] = b"BF-OFB\0";
pub const LN_bf_ofb64: &[u8; 7usize] = b"bf-ofb\0";
pub const NID_bf_ofb64: u32 = 94;
pub const SN_id_pkix: &[u8; 5usize] = b"PKIX\0";
pub const NID_id_pkix: u32 = 127;
pub const SN_id_pkix_mod: &[u8; 12usize] = b"id-pkix-mod\0";
pub const NID_id_pkix_mod: u32 = 258;
pub const SN_id_pe: &[u8; 6usize] = b"id-pe\0";
pub const NID_id_pe: u32 = 175;
pub const SN_id_qt: &[u8; 6usize] = b"id-qt\0";
pub const NID_id_qt: u32 = 259;
pub const SN_id_kp: &[u8; 6usize] = b"id-kp\0";
pub const NID_id_kp: u32 = 128;
pub const SN_id_it: &[u8; 6usize] = b"id-it\0";
pub const NID_id_it: u32 = 260;
pub const SN_id_pkip: &[u8; 8usize] = b"id-pkip\0";
pub const NID_id_pkip: u32 = 261;
pub const SN_id_alg: &[u8; 7usize] = b"id-alg\0";
pub const NID_id_alg: u32 = 262;
pub const SN_id_cmc: &[u8; 7usize] = b"id-cmc\0";
pub const NID_id_cmc: u32 = 263;
pub const SN_id_on: &[u8; 6usize] = b"id-on\0";
pub const NID_id_on: u32 = 264;
pub const SN_id_pda: &[u8; 7usize] = b"id-pda\0";
pub const NID_id_pda: u32 = 265;
pub const SN_id_aca: &[u8; 7usize] = b"id-aca\0";
pub const NID_id_aca: u32 = 266;
pub const SN_id_qcs: &[u8; 7usize] = b"id-qcs\0";
pub const NID_id_qcs: u32 = 267;
pub const SN_id_cp: &[u8; 6usize] = b"id-cp\0";
pub const NID_id_cp: u32 = 1238;
pub const SN_id_cct: &[u8; 7usize] = b"id-cct\0";
pub const NID_id_cct: u32 = 268;
pub const SN_id_ppl: &[u8; 7usize] = b"id-ppl\0";
pub const NID_id_ppl: u32 = 662;
pub const SN_id_ad: &[u8; 6usize] = b"id-ad\0";
pub const NID_id_ad: u32 = 176;
pub const SN_id_pkix1_explicit_88: &[u8; 21usize] = b"id-pkix1-explicit-88\0";
pub const NID_id_pkix1_explicit_88: u32 = 269;
pub const SN_id_pkix1_implicit_88: &[u8; 21usize] = b"id-pkix1-implicit-88\0";
pub const NID_id_pkix1_implicit_88: u32 = 270;
pub const SN_id_pkix1_explicit_93: &[u8; 21usize] = b"id-pkix1-explicit-93\0";
pub const NID_id_pkix1_explicit_93: u32 = 271;
pub const SN_id_pkix1_implicit_93: &[u8; 21usize] = b"id-pkix1-implicit-93\0";
pub const NID_id_pkix1_implicit_93: u32 = 272;
pub const SN_id_mod_crmf: &[u8; 12usize] = b"id-mod-crmf\0";
pub const NID_id_mod_crmf: u32 = 273;
pub const SN_id_mod_cmc: &[u8; 11usize] = b"id-mod-cmc\0";
pub const NID_id_mod_cmc: u32 = 274;
pub const SN_id_mod_kea_profile_88: &[u8; 22usize] = b"id-mod-kea-profile-88\0";
pub const NID_id_mod_kea_profile_88: u32 = 275;
pub const SN_id_mod_kea_profile_93: &[u8; 22usize] = b"id-mod-kea-profile-93\0";
pub const NID_id_mod_kea_profile_93: u32 = 276;
pub const SN_id_mod_cmp: &[u8; 11usize] = b"id-mod-cmp\0";
pub const NID_id_mod_cmp: u32 = 277;
pub const SN_id_mod_qualified_cert_88: &[u8; 25usize] = b"id-mod-qualified-cert-88\0";
pub const NID_id_mod_qualified_cert_88: u32 = 278;
pub const SN_id_mod_qualified_cert_93: &[u8; 25usize] = b"id-mod-qualified-cert-93\0";
pub const NID_id_mod_qualified_cert_93: u32 = 279;
pub const SN_id_mod_attribute_cert: &[u8; 22usize] = b"id-mod-attribute-cert\0";
pub const NID_id_mod_attribute_cert: u32 = 280;
pub const SN_id_mod_timestamp_protocol: &[u8; 26usize] = b"id-mod-timestamp-protocol\0";
pub const NID_id_mod_timestamp_protocol: u32 = 281;
pub const SN_id_mod_ocsp: &[u8; 12usize] = b"id-mod-ocsp\0";
pub const NID_id_mod_ocsp: u32 = 282;
pub const SN_id_mod_dvcs: &[u8; 12usize] = b"id-mod-dvcs\0";
pub const NID_id_mod_dvcs: u32 = 283;
pub const SN_id_mod_cmp2000: &[u8; 15usize] = b"id-mod-cmp2000\0";
pub const NID_id_mod_cmp2000: u32 = 284;
pub const SN_info_access: &[u8; 20usize] = b"authorityInfoAccess\0";
pub const LN_info_access: &[u8; 29usize] = b"Authority Information Access\0";
pub const NID_info_access: u32 = 177;
pub const SN_biometricInfo: &[u8; 14usize] = b"biometricInfo\0";
pub const LN_biometricInfo: &[u8; 15usize] = b"Biometric Info\0";
pub const NID_biometricInfo: u32 = 285;
pub const SN_qcStatements: &[u8; 13usize] = b"qcStatements\0";
pub const NID_qcStatements: u32 = 286;
pub const SN_ac_auditEntity: &[u8; 15usize] = b"ac-auditEntity\0";
pub const NID_ac_auditEntity: u32 = 287;
pub const SN_ac_targeting: &[u8; 13usize] = b"ac-targeting\0";
pub const NID_ac_targeting: u32 = 288;
pub const SN_aaControls: &[u8; 11usize] = b"aaControls\0";
pub const NID_aaControls: u32 = 289;
pub const SN_sbgp_ipAddrBlock: &[u8; 17usize] = b"sbgp-ipAddrBlock\0";
pub const NID_sbgp_ipAddrBlock: u32 = 290;
pub const SN_sbgp_autonomousSysNum: &[u8; 22usize] = b"sbgp-autonomousSysNum\0";
pub const NID_sbgp_autonomousSysNum: u32 = 291;
pub const SN_sbgp_routerIdentifier: &[u8; 22usize] = b"sbgp-routerIdentifier\0";
pub const NID_sbgp_routerIdentifier: u32 = 292;
pub const SN_ac_proxying: &[u8; 12usize] = b"ac-proxying\0";
pub const NID_ac_proxying: u32 = 397;
pub const SN_sinfo_access: &[u8; 18usize] = b"subjectInfoAccess\0";
pub const LN_sinfo_access: &[u8; 27usize] = b"Subject Information Access\0";
pub const NID_sinfo_access: u32 = 398;
pub const SN_proxyCertInfo: &[u8; 14usize] = b"proxyCertInfo\0";
pub const LN_proxyCertInfo: &[u8; 30usize] = b"Proxy Certificate Information\0";
pub const NID_proxyCertInfo: u32 = 663;
pub const SN_tlsfeature: &[u8; 11usize] = b"tlsfeature\0";
pub const LN_tlsfeature: &[u8; 12usize] = b"TLS Feature\0";
pub const NID_tlsfeature: u32 = 1020;
pub const SN_sbgp_ipAddrBlockv2: &[u8; 19usize] = b"sbgp-ipAddrBlockv2\0";
pub const NID_sbgp_ipAddrBlockv2: u32 = 1239;
pub const SN_sbgp_autonomousSysNumv2: &[u8; 24usize] = b"sbgp-autonomousSysNumv2\0";
pub const NID_sbgp_autonomousSysNumv2: u32 = 1240;
pub const SN_id_qt_cps: &[u8; 10usize] = b"id-qt-cps\0";
pub const LN_id_qt_cps: &[u8; 21usize] = b"Policy Qualifier CPS\0";
pub const NID_id_qt_cps: u32 = 164;
pub const SN_id_qt_unotice: &[u8; 14usize] = b"id-qt-unotice\0";
pub const LN_id_qt_unotice: &[u8; 29usize] = b"Policy Qualifier User Notice\0";
pub const NID_id_qt_unotice: u32 = 165;
pub const SN_textNotice: &[u8; 11usize] = b"textNotice\0";
pub const NID_textNotice: u32 = 293;
pub const SN_server_auth: &[u8; 11usize] = b"serverAuth\0";
pub const LN_server_auth: &[u8; 30usize] = b"TLS Web Server Authentication\0";
pub const NID_server_auth: u32 = 129;
pub const SN_client_auth: &[u8; 11usize] = b"clientAuth\0";
pub const LN_client_auth: &[u8; 30usize] = b"TLS Web Client Authentication\0";
pub const NID_client_auth: u32 = 130;
pub const SN_code_sign: &[u8; 12usize] = b"codeSigning\0";
pub const LN_code_sign: &[u8; 13usize] = b"Code Signing\0";
pub const NID_code_sign: u32 = 131;
pub const SN_email_protect: &[u8; 16usize] = b"emailProtection\0";
pub const LN_email_protect: &[u8; 18usize] = b"E-mail Protection\0";
pub const NID_email_protect: u32 = 132;
pub const SN_ipsecEndSystem: &[u8; 15usize] = b"ipsecEndSystem\0";
pub const LN_ipsecEndSystem: &[u8; 17usize] = b"IPSec End System\0";
pub const NID_ipsecEndSystem: u32 = 294;
pub const SN_ipsecTunnel: &[u8; 12usize] = b"ipsecTunnel\0";
pub const LN_ipsecTunnel: &[u8; 13usize] = b"IPSec Tunnel\0";
pub const NID_ipsecTunnel: u32 = 295;
pub const SN_ipsecUser: &[u8; 10usize] = b"ipsecUser\0";
pub const LN_ipsecUser: &[u8; 11usize] = b"IPSec User\0";
pub const NID_ipsecUser: u32 = 296;
pub const SN_time_stamp: &[u8; 13usize] = b"timeStamping\0";
pub const LN_time_stamp: &[u8; 14usize] = b"Time Stamping\0";
pub const NID_time_stamp: u32 = 133;
pub const SN_OCSP_sign: &[u8; 12usize] = b"OCSPSigning\0";
pub const LN_OCSP_sign: &[u8; 13usize] = b"OCSP Signing\0";
pub const NID_OCSP_sign: u32 = 180;
pub const SN_dvcs: &[u8; 5usize] = b"DVCS\0";
pub const LN_dvcs: &[u8; 5usize] = b"dvcs\0";
pub const NID_dvcs: u32 = 297;
pub const SN_ipsec_IKE: &[u8; 9usize] = b"ipsecIKE\0";
pub const LN_ipsec_IKE: &[u8; 28usize] = b"ipsec Internet Key Exchange\0";
pub const NID_ipsec_IKE: u32 = 1022;
pub const SN_capwapAC: &[u8; 9usize] = b"capwapAC\0";
pub const LN_capwapAC: &[u8; 26usize] = b"Ctrl/provision WAP Access\0";
pub const NID_capwapAC: u32 = 1023;
pub const SN_capwapWTP: &[u8; 10usize] = b"capwapWTP\0";
pub const LN_capwapWTP: &[u8; 31usize] = b"Ctrl/Provision WAP Termination\0";
pub const NID_capwapWTP: u32 = 1024;
pub const SN_sshClient: &[u8; 18usize] = b"secureShellClient\0";
pub const LN_sshClient: &[u8; 11usize] = b"SSH Client\0";
pub const NID_sshClient: u32 = 1025;
pub const SN_sshServer: &[u8; 18usize] = b"secureShellServer\0";
pub const LN_sshServer: &[u8; 11usize] = b"SSH Server\0";
pub const NID_sshServer: u32 = 1026;
pub const SN_sendRouter: &[u8; 11usize] = b"sendRouter\0";
pub const LN_sendRouter: &[u8; 12usize] = b"Send Router\0";
pub const NID_sendRouter: u32 = 1027;
pub const SN_sendProxiedRouter: &[u8; 18usize] = b"sendProxiedRouter\0";
pub const LN_sendProxiedRouter: &[u8; 20usize] = b"Send Proxied Router\0";
pub const NID_sendProxiedRouter: u32 = 1028;
pub const SN_sendOwner: &[u8; 10usize] = b"sendOwner\0";
pub const LN_sendOwner: &[u8; 11usize] = b"Send Owner\0";
pub const NID_sendOwner: u32 = 1029;
pub const SN_sendProxiedOwner: &[u8; 17usize] = b"sendProxiedOwner\0";
pub const LN_sendProxiedOwner: &[u8; 19usize] = b"Send Proxied Owner\0";
pub const NID_sendProxiedOwner: u32 = 1030;
pub const SN_cmcCA: &[u8; 6usize] = b"cmcCA\0";
pub const LN_cmcCA: &[u8; 26usize] = b"CMC Certificate Authority\0";
pub const NID_cmcCA: u32 = 1131;
pub const SN_cmcRA: &[u8; 6usize] = b"cmcRA\0";
pub const LN_cmcRA: &[u8; 27usize] = b"CMC Registration Authority\0";
pub const NID_cmcRA: u32 = 1132;
pub const SN_cmcArchive: &[u8; 11usize] = b"cmcArchive\0";
pub const LN_cmcArchive: &[u8; 19usize] = b"CMC Archive Server\0";
pub const NID_cmcArchive: u32 = 1219;
pub const SN_id_kp_bgpsec_router: &[u8; 20usize] = b"id-kp-bgpsec-router\0";
pub const LN_id_kp_bgpsec_router: &[u8; 14usize] = b"BGPsec Router\0";
pub const NID_id_kp_bgpsec_router: u32 = 1220;
pub const SN_id_kp_BrandIndicatorforMessageIdentification: &[u8; 45usize] =
    b"id-kp-BrandIndicatorforMessageIdentification\0";
pub const LN_id_kp_BrandIndicatorforMessageIdentification: &[u8; 43usize] =
    b"Brand Indicator for Message Identification\0";
pub const NID_id_kp_BrandIndicatorforMessageIdentification: u32 = 1221;
pub const SN_cmKGA: &[u8; 6usize] = b"cmKGA\0";
pub const LN_cmKGA: &[u8; 48usize] = b"Certificate Management Key Generation Authority\0";
pub const NID_cmKGA: u32 = 1222;
pub const SN_id_it_caProtEncCert: &[u8; 20usize] = b"id-it-caProtEncCert\0";
pub const NID_id_it_caProtEncCert: u32 = 298;
pub const SN_id_it_signKeyPairTypes: &[u8; 23usize] = b"id-it-signKeyPairTypes\0";
pub const NID_id_it_signKeyPairTypes: u32 = 299;
pub const SN_id_it_encKeyPairTypes: &[u8; 22usize] = b"id-it-encKeyPairTypes\0";
pub const NID_id_it_encKeyPairTypes: u32 = 300;
pub const SN_id_it_preferredSymmAlg: &[u8; 23usize] = b"id-it-preferredSymmAlg\0";
pub const NID_id_it_preferredSymmAlg: u32 = 301;
pub const SN_id_it_caKeyUpdateInfo: &[u8; 22usize] = b"id-it-caKeyUpdateInfo\0";
pub const NID_id_it_caKeyUpdateInfo: u32 = 302;
pub const SN_id_it_currentCRL: &[u8; 17usize] = b"id-it-currentCRL\0";
pub const NID_id_it_currentCRL: u32 = 303;
pub const SN_id_it_unsupportedOIDs: &[u8; 22usize] = b"id-it-unsupportedOIDs\0";
pub const NID_id_it_unsupportedOIDs: u32 = 304;
pub const SN_id_it_subscriptionRequest: &[u8; 26usize] = b"id-it-subscriptionRequest\0";
pub const NID_id_it_subscriptionRequest: u32 = 305;
pub const SN_id_it_subscriptionResponse: &[u8; 27usize] = b"id-it-subscriptionResponse\0";
pub const NID_id_it_subscriptionResponse: u32 = 306;
pub const SN_id_it_keyPairParamReq: &[u8; 22usize] = b"id-it-keyPairParamReq\0";
pub const NID_id_it_keyPairParamReq: u32 = 307;
pub const SN_id_it_keyPairParamRep: &[u8; 22usize] = b"id-it-keyPairParamRep\0";
pub const NID_id_it_keyPairParamRep: u32 = 308;
pub const SN_id_it_revPassphrase: &[u8; 20usize] = b"id-it-revPassphrase\0";
pub const NID_id_it_revPassphrase: u32 = 309;
pub const SN_id_it_implicitConfirm: &[u8; 22usize] = b"id-it-implicitConfirm\0";
pub const NID_id_it_implicitConfirm: u32 = 310;
pub const SN_id_it_confirmWaitTime: &[u8; 22usize] = b"id-it-confirmWaitTime\0";
pub const NID_id_it_confirmWaitTime: u32 = 311;
pub const SN_id_it_origPKIMessage: &[u8; 21usize] = b"id-it-origPKIMessage\0";
pub const NID_id_it_origPKIMessage: u32 = 312;
pub const SN_id_it_suppLangTags: &[u8; 19usize] = b"id-it-suppLangTags\0";
pub const NID_id_it_suppLangTags: u32 = 784;
pub const SN_id_it_caCerts: &[u8; 14usize] = b"id-it-caCerts\0";
pub const NID_id_it_caCerts: u32 = 1223;
pub const SN_id_it_rootCaKeyUpdate: &[u8; 22usize] = b"id-it-rootCaKeyUpdate\0";
pub const NID_id_it_rootCaKeyUpdate: u32 = 1224;
pub const SN_id_it_certReqTemplate: &[u8; 22usize] = b"id-it-certReqTemplate\0";
pub const NID_id_it_certReqTemplate: u32 = 1225;
pub const SN_id_regCtrl: &[u8; 11usize] = b"id-regCtrl\0";
pub const NID_id_regCtrl: u32 = 313;
pub const SN_id_regInfo: &[u8; 11usize] = b"id-regInfo\0";
pub const NID_id_regInfo: u32 = 314;
pub const SN_id_regCtrl_regToken: &[u8; 20usize] = b"id-regCtrl-regToken\0";
pub const NID_id_regCtrl_regToken: u32 = 315;
pub const SN_id_regCtrl_authenticator: &[u8; 25usize] = b"id-regCtrl-authenticator\0";
pub const NID_id_regCtrl_authenticator: u32 = 316;
pub const SN_id_regCtrl_pkiPublicationInfo: &[u8; 30usize] = b"id-regCtrl-pkiPublicationInfo\0";
pub const NID_id_regCtrl_pkiPublicationInfo: u32 = 317;
pub const SN_id_regCtrl_pkiArchiveOptions: &[u8; 29usize] = b"id-regCtrl-pkiArchiveOptions\0";
pub const NID_id_regCtrl_pkiArchiveOptions: u32 = 318;
pub const SN_id_regCtrl_oldCertID: &[u8; 21usize] = b"id-regCtrl-oldCertID\0";
pub const NID_id_regCtrl_oldCertID: u32 = 319;
pub const SN_id_regCtrl_protocolEncrKey: &[u8; 27usize] = b"id-regCtrl-protocolEncrKey\0";
pub const NID_id_regCtrl_protocolEncrKey: u32 = 320;
pub const SN_id_regInfo_utf8Pairs: &[u8; 21usize] = b"id-regInfo-utf8Pairs\0";
pub const NID_id_regInfo_utf8Pairs: u32 = 321;
pub const SN_id_regInfo_certReq: &[u8; 19usize] = b"id-regInfo-certReq\0";
pub const NID_id_regInfo_certReq: u32 = 322;
pub const SN_id_alg_des40: &[u8; 13usize] = b"id-alg-des40\0";
pub const NID_id_alg_des40: u32 = 323;
pub const SN_id_alg_noSignature: &[u8; 19usize] = b"id-alg-noSignature\0";
pub const NID_id_alg_noSignature: u32 = 324;
pub const SN_id_alg_dh_sig_hmac_sha1: &[u8; 24usize] = b"id-alg-dh-sig-hmac-sha1\0";
pub const NID_id_alg_dh_sig_hmac_sha1: u32 = 325;
pub const SN_id_alg_dh_pop: &[u8; 14usize] = b"id-alg-dh-pop\0";
pub const NID_id_alg_dh_pop: u32 = 326;
pub const SN_id_cmc_statusInfo: &[u8; 18usize] = b"id-cmc-statusInfo\0";
pub const NID_id_cmc_statusInfo: u32 = 327;
pub const SN_id_cmc_identification: &[u8; 22usize] = b"id-cmc-identification\0";
pub const NID_id_cmc_identification: u32 = 328;
pub const SN_id_cmc_identityProof: &[u8; 21usize] = b"id-cmc-identityProof\0";
pub const NID_id_cmc_identityProof: u32 = 329;
pub const SN_id_cmc_dataReturn: &[u8; 18usize] = b"id-cmc-dataReturn\0";
pub const NID_id_cmc_dataReturn: u32 = 330;
pub const SN_id_cmc_transactionId: &[u8; 21usize] = b"id-cmc-transactionId\0";
pub const NID_id_cmc_transactionId: u32 = 331;
pub const SN_id_cmc_senderNonce: &[u8; 19usize] = b"id-cmc-senderNonce\0";
pub const NID_id_cmc_senderNonce: u32 = 332;
pub const SN_id_cmc_recipientNonce: &[u8; 22usize] = b"id-cmc-recipientNonce\0";
pub const NID_id_cmc_recipientNonce: u32 = 333;
pub const SN_id_cmc_addExtensions: &[u8; 21usize] = b"id-cmc-addExtensions\0";
pub const NID_id_cmc_addExtensions: u32 = 334;
pub const SN_id_cmc_encryptedPOP: &[u8; 20usize] = b"id-cmc-encryptedPOP\0";
pub const NID_id_cmc_encryptedPOP: u32 = 335;
pub const SN_id_cmc_decryptedPOP: &[u8; 20usize] = b"id-cmc-decryptedPOP\0";
pub const NID_id_cmc_decryptedPOP: u32 = 336;
pub const SN_id_cmc_lraPOPWitness: &[u8; 21usize] = b"id-cmc-lraPOPWitness\0";
pub const NID_id_cmc_lraPOPWitness: u32 = 337;
pub const SN_id_cmc_getCert: &[u8; 15usize] = b"id-cmc-getCert\0";
pub const NID_id_cmc_getCert: u32 = 338;
pub const SN_id_cmc_getCRL: &[u8; 14usize] = b"id-cmc-getCRL\0";
pub const NID_id_cmc_getCRL: u32 = 339;
pub const SN_id_cmc_revokeRequest: &[u8; 21usize] = b"id-cmc-revokeRequest\0";
pub const NID_id_cmc_revokeRequest: u32 = 340;
pub const SN_id_cmc_regInfo: &[u8; 15usize] = b"id-cmc-regInfo\0";
pub const NID_id_cmc_regInfo: u32 = 341;
pub const SN_id_cmc_responseInfo: &[u8; 20usize] = b"id-cmc-responseInfo\0";
pub const NID_id_cmc_responseInfo: u32 = 342;
pub const SN_id_cmc_queryPending: &[u8; 20usize] = b"id-cmc-queryPending\0";
pub const NID_id_cmc_queryPending: u32 = 343;
pub const SN_id_cmc_popLinkRandom: &[u8; 21usize] = b"id-cmc-popLinkRandom\0";
pub const NID_id_cmc_popLinkRandom: u32 = 344;
pub const SN_id_cmc_popLinkWitness: &[u8; 22usize] = b"id-cmc-popLinkWitness\0";
pub const NID_id_cmc_popLinkWitness: u32 = 345;
pub const SN_id_cmc_confirmCertAcceptance: &[u8; 29usize] = b"id-cmc-confirmCertAcceptance\0";
pub const NID_id_cmc_confirmCertAcceptance: u32 = 346;
pub const SN_id_on_personalData: &[u8; 19usize] = b"id-on-personalData\0";
pub const NID_id_on_personalData: u32 = 347;
pub const SN_id_on_permanentIdentifier: &[u8; 26usize] = b"id-on-permanentIdentifier\0";
pub const LN_id_on_permanentIdentifier: &[u8; 21usize] = b"Permanent Identifier\0";
pub const NID_id_on_permanentIdentifier: u32 = 858;
pub const SN_XmppAddr: &[u8; 15usize] = b"id-on-xmppAddr\0";
pub const LN_XmppAddr: &[u8; 9usize] = b"XmppAddr\0";
pub const NID_XmppAddr: u32 = 1209;
pub const SN_SRVName: &[u8; 13usize] = b"id-on-dnsSRV\0";
pub const LN_SRVName: &[u8; 8usize] = b"SRVName\0";
pub const NID_SRVName: u32 = 1210;
pub const SN_NAIRealm: &[u8; 15usize] = b"id-on-NAIRealm\0";
pub const LN_NAIRealm: &[u8; 9usize] = b"NAIRealm\0";
pub const NID_NAIRealm: u32 = 1211;
pub const SN_id_on_SmtpUTF8Mailbox: &[u8; 22usize] = b"id-on-SmtpUTF8Mailbox\0";
pub const LN_id_on_SmtpUTF8Mailbox: &[u8; 18usize] = b"Smtp UTF8 Mailbox\0";
pub const NID_id_on_SmtpUTF8Mailbox: u32 = 1208;
pub const SN_id_pda_dateOfBirth: &[u8; 19usize] = b"id-pda-dateOfBirth\0";
pub const NID_id_pda_dateOfBirth: u32 = 348;
pub const SN_id_pda_placeOfBirth: &[u8; 20usize] = b"id-pda-placeOfBirth\0";
pub const NID_id_pda_placeOfBirth: u32 = 349;
pub const SN_id_pda_gender: &[u8; 14usize] = b"id-pda-gender\0";
pub const NID_id_pda_gender: u32 = 351;
pub const SN_id_pda_countryOfCitizenship: &[u8; 28usize] = b"id-pda-countryOfCitizenship\0";
pub const NID_id_pda_countryOfCitizenship: u32 = 352;
pub const SN_id_pda_countryOfResidence: &[u8; 26usize] = b"id-pda-countryOfResidence\0";
pub const NID_id_pda_countryOfResidence: u32 = 353;
pub const SN_id_aca_authenticationInfo: &[u8; 26usize] = b"id-aca-authenticationInfo\0";
pub const NID_id_aca_authenticationInfo: u32 = 354;
pub const SN_id_aca_accessIdentity: &[u8; 22usize] = b"id-aca-accessIdentity\0";
pub const NID_id_aca_accessIdentity: u32 = 355;
pub const SN_id_aca_chargingIdentity: &[u8; 24usize] = b"id-aca-chargingIdentity\0";
pub const NID_id_aca_chargingIdentity: u32 = 356;
pub const SN_id_aca_group: &[u8; 13usize] = b"id-aca-group\0";
pub const NID_id_aca_group: u32 = 357;
pub const SN_id_aca_role: &[u8; 12usize] = b"id-aca-role\0";
pub const NID_id_aca_role: u32 = 358;
pub const SN_id_aca_encAttrs: &[u8; 16usize] = b"id-aca-encAttrs\0";
pub const NID_id_aca_encAttrs: u32 = 399;
pub const SN_id_qcs_pkixQCSyntax_v1: &[u8; 23usize] = b"id-qcs-pkixQCSyntax-v1\0";
pub const NID_id_qcs_pkixQCSyntax_v1: u32 = 359;
pub const SN_ipAddr_asNumber: &[u8; 16usize] = b"ipAddr-asNumber\0";
pub const NID_ipAddr_asNumber: u32 = 1241;
pub const SN_ipAddr_asNumberv2: &[u8; 18usize] = b"ipAddr-asNumberv2\0";
pub const NID_ipAddr_asNumberv2: u32 = 1242;
pub const SN_id_cct_crs: &[u8; 11usize] = b"id-cct-crs\0";
pub const NID_id_cct_crs: u32 = 360;
pub const SN_id_cct_PKIData: &[u8; 15usize] = b"id-cct-PKIData\0";
pub const NID_id_cct_PKIData: u32 = 361;
pub const SN_id_cct_PKIResponse: &[u8; 19usize] = b"id-cct-PKIResponse\0";
pub const NID_id_cct_PKIResponse: u32 = 362;
pub const SN_id_ppl_anyLanguage: &[u8; 19usize] = b"id-ppl-anyLanguage\0";
pub const LN_id_ppl_anyLanguage: &[u8; 13usize] = b"Any language\0";
pub const NID_id_ppl_anyLanguage: u32 = 664;
pub const SN_id_ppl_inheritAll: &[u8; 18usize] = b"id-ppl-inheritAll\0";
pub const LN_id_ppl_inheritAll: &[u8; 12usize] = b"Inherit all\0";
pub const NID_id_ppl_inheritAll: u32 = 665;
pub const SN_Independent: &[u8; 19usize] = b"id-ppl-independent\0";
pub const LN_Independent: &[u8; 12usize] = b"Independent\0";
pub const NID_Independent: u32 = 667;
pub const SN_ad_OCSP: &[u8; 5usize] = b"OCSP\0";
pub const LN_ad_OCSP: &[u8; 5usize] = b"OCSP\0";
pub const NID_ad_OCSP: u32 = 178;
pub const SN_ad_ca_issuers: &[u8; 10usize] = b"caIssuers\0";
pub const LN_ad_ca_issuers: &[u8; 11usize] = b"CA Issuers\0";
pub const NID_ad_ca_issuers: u32 = 179;
pub const SN_ad_timeStamping: &[u8; 16usize] = b"ad_timestamping\0";
pub const LN_ad_timeStamping: &[u8; 17usize] = b"AD Time Stamping\0";
pub const NID_ad_timeStamping: u32 = 363;
pub const SN_ad_dvcs: &[u8; 8usize] = b"AD_DVCS\0";
pub const LN_ad_dvcs: &[u8; 8usize] = b"ad dvcs\0";
pub const NID_ad_dvcs: u32 = 364;
pub const SN_caRepository: &[u8; 13usize] = b"caRepository\0";
pub const LN_caRepository: &[u8; 14usize] = b"CA Repository\0";
pub const NID_caRepository: u32 = 785;
pub const SN_rpkiManifest: &[u8; 13usize] = b"rpkiManifest\0";
pub const LN_rpkiManifest: &[u8; 14usize] = b"RPKI Manifest\0";
pub const NID_rpkiManifest: u32 = 1243;
pub const SN_signedObject: &[u8; 13usize] = b"signedObject\0";
pub const LN_signedObject: &[u8; 14usize] = b"Signed Object\0";
pub const NID_signedObject: u32 = 1244;
pub const SN_rpkiNotify: &[u8; 11usize] = b"rpkiNotify\0";
pub const LN_rpkiNotify: &[u8; 12usize] = b"RPKI Notify\0";
pub const NID_rpkiNotify: u32 = 1245;
pub const SN_id_pkix_OCSP_basic: &[u8; 18usize] = b"basicOCSPResponse\0";
pub const LN_id_pkix_OCSP_basic: &[u8; 20usize] = b"Basic OCSP Response\0";
pub const NID_id_pkix_OCSP_basic: u32 = 365;
pub const SN_id_pkix_OCSP_Nonce: &[u8; 6usize] = b"Nonce\0";
pub const LN_id_pkix_OCSP_Nonce: &[u8; 11usize] = b"OCSP Nonce\0";
pub const NID_id_pkix_OCSP_Nonce: u32 = 366;
pub const SN_id_pkix_OCSP_CrlID: &[u8; 6usize] = b"CrlID\0";
pub const LN_id_pkix_OCSP_CrlID: &[u8; 12usize] = b"OCSP CRL ID\0";
pub const NID_id_pkix_OCSP_CrlID: u32 = 367;
pub const SN_id_pkix_OCSP_acceptableResponses: &[u8; 20usize] = b"acceptableResponses\0";
pub const LN_id_pkix_OCSP_acceptableResponses: &[u8; 26usize] = b"Acceptable OCSP Responses\0";
pub const NID_id_pkix_OCSP_acceptableResponses: u32 = 368;
pub const SN_id_pkix_OCSP_noCheck: &[u8; 8usize] = b"noCheck\0";
pub const LN_id_pkix_OCSP_noCheck: &[u8; 14usize] = b"OCSP No Check\0";
pub const NID_id_pkix_OCSP_noCheck: u32 = 369;
pub const SN_id_pkix_OCSP_archiveCutoff: &[u8; 14usize] = b"archiveCutoff\0";
pub const LN_id_pkix_OCSP_archiveCutoff: &[u8; 20usize] = b"OCSP Archive Cutoff\0";
pub const NID_id_pkix_OCSP_archiveCutoff: u32 = 370;
pub const SN_id_pkix_OCSP_serviceLocator: &[u8; 15usize] = b"serviceLocator\0";
pub const LN_id_pkix_OCSP_serviceLocator: &[u8; 21usize] = b"OCSP Service Locator\0";
pub const NID_id_pkix_OCSP_serviceLocator: u32 = 371;
pub const SN_id_pkix_OCSP_extendedStatus: &[u8; 15usize] = b"extendedStatus\0";
pub const LN_id_pkix_OCSP_extendedStatus: &[u8; 21usize] = b"Extended OCSP Status\0";
pub const NID_id_pkix_OCSP_extendedStatus: u32 = 372;
pub const SN_id_pkix_OCSP_valid: &[u8; 6usize] = b"valid\0";
pub const NID_id_pkix_OCSP_valid: u32 = 373;
pub const SN_id_pkix_OCSP_path: &[u8; 5usize] = b"path\0";
pub const NID_id_pkix_OCSP_path: u32 = 374;
pub const SN_id_pkix_OCSP_trustRoot: &[u8; 10usize] = b"trustRoot\0";
pub const LN_id_pkix_OCSP_trustRoot: &[u8; 11usize] = b"Trust Root\0";
pub const NID_id_pkix_OCSP_trustRoot: u32 = 375;
pub const SN_algorithm: &[u8; 10usize] = b"algorithm\0";
pub const LN_algorithm: &[u8; 10usize] = b"algorithm\0";
pub const NID_algorithm: u32 = 376;
pub const SN_md5WithRSA: &[u8; 11usize] = b"RSA-NP-MD5\0";
pub const LN_md5WithRSA: &[u8; 11usize] = b"md5WithRSA\0";
pub const NID_md5WithRSA: u32 = 104;
pub const SN_des_ecb: &[u8; 8usize] = b"DES-ECB\0";
pub const LN_des_ecb: &[u8; 8usize] = b"des-ecb\0";
pub const NID_des_ecb: u32 = 29;
pub const SN_des_cbc: &[u8; 8usize] = b"DES-CBC\0";
pub const LN_des_cbc: &[u8; 8usize] = b"des-cbc\0";
pub const NID_des_cbc: u32 = 31;
pub const SN_des_ofb64: &[u8; 8usize] = b"DES-OFB\0";
pub const LN_des_ofb64: &[u8; 8usize] = b"des-ofb\0";
pub const NID_des_ofb64: u32 = 45;
pub const SN_des_cfb64: &[u8; 8usize] = b"DES-CFB\0";
pub const LN_des_cfb64: &[u8; 8usize] = b"des-cfb\0";
pub const NID_des_cfb64: u32 = 30;
pub const SN_rsaSignature: &[u8; 13usize] = b"rsaSignature\0";
pub const NID_rsaSignature: u32 = 377;
pub const SN_dsa_2: &[u8; 8usize] = b"DSA-old\0";
pub const LN_dsa_2: &[u8; 18usize] = b"dsaEncryption-old\0";
pub const NID_dsa_2: u32 = 67;
pub const SN_dsaWithSHA: &[u8; 8usize] = b"DSA-SHA\0";
pub const LN_dsaWithSHA: &[u8; 11usize] = b"dsaWithSHA\0";
pub const NID_dsaWithSHA: u32 = 66;
pub const SN_shaWithRSAEncryption: &[u8; 8usize] = b"RSA-SHA\0";
pub const LN_shaWithRSAEncryption: &[u8; 21usize] = b"shaWithRSAEncryption\0";
pub const NID_shaWithRSAEncryption: u32 = 42;
pub const SN_des_ede_ecb: &[u8; 8usize] = b"DES-EDE\0";
pub const LN_des_ede_ecb: &[u8; 8usize] = b"des-ede\0";
pub const NID_des_ede_ecb: u32 = 32;
pub const SN_des_ede3_ecb: &[u8; 9usize] = b"DES-EDE3\0";
pub const LN_des_ede3_ecb: &[u8; 9usize] = b"des-ede3\0";
pub const NID_des_ede3_ecb: u32 = 33;
pub const SN_des_ede_cbc: &[u8; 12usize] = b"DES-EDE-CBC\0";
pub const LN_des_ede_cbc: &[u8; 12usize] = b"des-ede-cbc\0";
pub const NID_des_ede_cbc: u32 = 43;
pub const SN_des_ede_cfb64: &[u8; 12usize] = b"DES-EDE-CFB\0";
pub const LN_des_ede_cfb64: &[u8; 12usize] = b"des-ede-cfb\0";
pub const NID_des_ede_cfb64: u32 = 60;
pub const SN_des_ede3_cfb64: &[u8; 13usize] = b"DES-EDE3-CFB\0";
pub const LN_des_ede3_cfb64: &[u8; 13usize] = b"des-ede3-cfb\0";
pub const NID_des_ede3_cfb64: u32 = 61;
pub const SN_des_ede_ofb64: &[u8; 12usize] = b"DES-EDE-OFB\0";
pub const LN_des_ede_ofb64: &[u8; 12usize] = b"des-ede-ofb\0";
pub const NID_des_ede_ofb64: u32 = 62;
pub const SN_des_ede3_ofb64: &[u8; 13usize] = b"DES-EDE3-OFB\0";
pub const LN_des_ede3_ofb64: &[u8; 13usize] = b"des-ede3-ofb\0";
pub const NID_des_ede3_ofb64: u32 = 63;
pub const SN_desx_cbc: &[u8; 9usize] = b"DESX-CBC\0";
pub const LN_desx_cbc: &[u8; 9usize] = b"desx-cbc\0";
pub const NID_desx_cbc: u32 = 80;
pub const SN_sha: &[u8; 4usize] = b"SHA\0";
pub const LN_sha: &[u8; 4usize] = b"sha\0";
pub const NID_sha: u32 = 41;
pub const SN_sha1: &[u8; 5usize] = b"SHA1\0";
pub const LN_sha1: &[u8; 5usize] = b"sha1\0";
pub const NID_sha1: u32 = 64;
pub const SN_dsaWithSHA1_2: &[u8; 13usize] = b"DSA-SHA1-old\0";
pub const LN_dsaWithSHA1_2: &[u8; 16usize] = b"dsaWithSHA1-old\0";
pub const NID_dsaWithSHA1_2: u32 = 70;
pub const SN_sha1WithRSA: &[u8; 11usize] = b"RSA-SHA1-2\0";
pub const LN_sha1WithRSA: &[u8; 12usize] = b"sha1WithRSA\0";
pub const NID_sha1WithRSA: u32 = 115;
pub const SN_ripemd160: &[u8; 10usize] = b"RIPEMD160\0";
pub const LN_ripemd160: &[u8; 10usize] = b"ripemd160\0";
pub const NID_ripemd160: u32 = 117;
pub const SN_ripemd160WithRSA: &[u8; 14usize] = b"RSA-RIPEMD160\0";
pub const LN_ripemd160WithRSA: &[u8; 17usize] = b"ripemd160WithRSA\0";
pub const NID_ripemd160WithRSA: u32 = 119;
pub const SN_blake2bmac: &[u8; 11usize] = b"BLAKE2BMAC\0";
pub const LN_blake2bmac: &[u8; 11usize] = b"blake2bmac\0";
pub const NID_blake2bmac: u32 = 1201;
pub const SN_blake2smac: &[u8; 11usize] = b"BLAKE2SMAC\0";
pub const LN_blake2smac: &[u8; 11usize] = b"blake2smac\0";
pub const NID_blake2smac: u32 = 1202;
pub const SN_blake2b512: &[u8; 11usize] = b"BLAKE2b512\0";
pub const LN_blake2b512: &[u8; 11usize] = b"blake2b512\0";
pub const NID_blake2b512: u32 = 1056;
pub const SN_blake2s256: &[u8; 11usize] = b"BLAKE2s256\0";
pub const LN_blake2s256: &[u8; 11usize] = b"blake2s256\0";
pub const NID_blake2s256: u32 = 1057;
pub const SN_sxnet: &[u8; 8usize] = b"SXNetID\0";
pub const LN_sxnet: &[u8; 19usize] = b"Strong Extranet ID\0";
pub const NID_sxnet: u32 = 143;
pub const SN_X500: &[u8; 5usize] = b"X500\0";
pub const LN_X500: &[u8; 27usize] = b"directory services (X.500)\0";
pub const NID_X500: u32 = 11;
pub const SN_X509: &[u8; 5usize] = b"X509\0";
pub const NID_X509: u32 = 12;
pub const SN_commonName: &[u8; 3usize] = b"CN\0";
pub const LN_commonName: &[u8; 11usize] = b"commonName\0";
pub const NID_commonName: u32 = 13;
pub const SN_surname: &[u8; 3usize] = b"SN\0";
pub const LN_surname: &[u8; 8usize] = b"surname\0";
pub const NID_surname: u32 = 100;
pub const LN_serialNumber: &[u8; 13usize] = b"serialNumber\0";
pub const NID_serialNumber: u32 = 105;
pub const SN_countryName: &[u8; 2usize] = b"C\0";
pub const LN_countryName: &[u8; 12usize] = b"countryName\0";
pub const NID_countryName: u32 = 14;
pub const SN_localityName: &[u8; 2usize] = b"L\0";
pub const LN_localityName: &[u8; 13usize] = b"localityName\0";
pub const NID_localityName: u32 = 15;
pub const SN_stateOrProvinceName: &[u8; 3usize] = b"ST\0";
pub const LN_stateOrProvinceName: &[u8; 20usize] = b"stateOrProvinceName\0";
pub const NID_stateOrProvinceName: u32 = 16;
pub const SN_streetAddress: &[u8; 7usize] = b"street\0";
pub const LN_streetAddress: &[u8; 14usize] = b"streetAddress\0";
pub const NID_streetAddress: u32 = 660;
pub const SN_organizationName: &[u8; 2usize] = b"O\0";
pub const LN_organizationName: &[u8; 17usize] = b"organizationName\0";
pub const NID_organizationName: u32 = 17;
pub const SN_organizationalUnitName: &[u8; 3usize] = b"OU\0";
pub const LN_organizationalUnitName: &[u8; 23usize] = b"organizationalUnitName\0";
pub const NID_organizationalUnitName: u32 = 18;
pub const SN_title: &[u8; 6usize] = b"title\0";
pub const LN_title: &[u8; 6usize] = b"title\0";
pub const NID_title: u32 = 106;
pub const LN_description: &[u8; 12usize] = b"description\0";
pub const NID_description: u32 = 107;
pub const LN_searchGuide: &[u8; 12usize] = b"searchGuide\0";
pub const NID_searchGuide: u32 = 859;
pub const LN_businessCategory: &[u8; 17usize] = b"businessCategory\0";
pub const NID_businessCategory: u32 = 860;
pub const LN_postalAddress: &[u8; 14usize] = b"postalAddress\0";
pub const NID_postalAddress: u32 = 861;
pub const LN_postalCode: &[u8; 11usize] = b"postalCode\0";
pub const NID_postalCode: u32 = 661;
pub const LN_postOfficeBox: &[u8; 14usize] = b"postOfficeBox\0";
pub const NID_postOfficeBox: u32 = 862;
pub const LN_physicalDeliveryOfficeName: &[u8; 27usize] = b"physicalDeliveryOfficeName\0";
pub const NID_physicalDeliveryOfficeName: u32 = 863;
pub const LN_telephoneNumber: &[u8; 16usize] = b"telephoneNumber\0";
pub const NID_telephoneNumber: u32 = 864;
pub const LN_telexNumber: &[u8; 12usize] = b"telexNumber\0";
pub const NID_telexNumber: u32 = 865;
pub const LN_teletexTerminalIdentifier: &[u8; 26usize] = b"teletexTerminalIdentifier\0";
pub const NID_teletexTerminalIdentifier: u32 = 866;
pub const LN_facsimileTelephoneNumber: &[u8; 25usize] = b"facsimileTelephoneNumber\0";
pub const NID_facsimileTelephoneNumber: u32 = 867;
pub const LN_x121Address: &[u8; 12usize] = b"x121Address\0";
pub const NID_x121Address: u32 = 868;
pub const LN_internationaliSDNNumber: &[u8; 24usize] = b"internationaliSDNNumber\0";
pub const NID_internationaliSDNNumber: u32 = 869;
pub const LN_registeredAddress: &[u8; 18usize] = b"registeredAddress\0";
pub const NID_registeredAddress: u32 = 870;
pub const LN_destinationIndicator: &[u8; 21usize] = b"destinationIndicator\0";
pub const NID_destinationIndicator: u32 = 871;
pub const LN_preferredDeliveryMethod: &[u8; 24usize] = b"preferredDeliveryMethod\0";
pub const NID_preferredDeliveryMethod: u32 = 872;
pub const LN_presentationAddress: &[u8; 20usize] = b"presentationAddress\0";
pub const NID_presentationAddress: u32 = 873;
pub const LN_supportedApplicationContext: &[u8; 28usize] = b"supportedApplicationContext\0";
pub const NID_supportedApplicationContext: u32 = 874;
pub const SN_member: &[u8; 7usize] = b"member\0";
pub const NID_member: u32 = 875;
pub const SN_owner: &[u8; 6usize] = b"owner\0";
pub const NID_owner: u32 = 876;
pub const LN_roleOccupant: &[u8; 13usize] = b"roleOccupant\0";
pub const NID_roleOccupant: u32 = 877;
pub const SN_seeAlso: &[u8; 8usize] = b"seeAlso\0";
pub const NID_seeAlso: u32 = 878;
pub const LN_userPassword: &[u8; 13usize] = b"userPassword\0";
pub const NID_userPassword: u32 = 879;
pub const LN_userCertificate: &[u8; 16usize] = b"userCertificate\0";
pub const NID_userCertificate: u32 = 880;
pub const LN_cACertificate: &[u8; 14usize] = b"cACertificate\0";
pub const NID_cACertificate: u32 = 881;
pub const LN_authorityRevocationList: &[u8; 24usize] = b"authorityRevocationList\0";
pub const NID_authorityRevocationList: u32 = 882;
pub const LN_certificateRevocationList: &[u8; 26usize] = b"certificateRevocationList\0";
pub const NID_certificateRevocationList: u32 = 883;
pub const LN_crossCertificatePair: &[u8; 21usize] = b"crossCertificatePair\0";
pub const NID_crossCertificatePair: u32 = 884;
pub const SN_name: &[u8; 5usize] = b"name\0";
pub const LN_name: &[u8; 5usize] = b"name\0";
pub const NID_name: u32 = 173;
pub const SN_givenName: &[u8; 3usize] = b"GN\0";
pub const LN_givenName: &[u8; 10usize] = b"givenName\0";
pub const NID_givenName: u32 = 99;
pub const SN_initials: &[u8; 9usize] = b"initials\0";
pub const LN_initials: &[u8; 9usize] = b"initials\0";
pub const NID_initials: u32 = 101;
pub const LN_generationQualifier: &[u8; 20usize] = b"generationQualifier\0";
pub const NID_generationQualifier: u32 = 509;
pub const LN_x500UniqueIdentifier: &[u8; 21usize] = b"x500UniqueIdentifier\0";
pub const NID_x500UniqueIdentifier: u32 = 503;
pub const SN_dnQualifier: &[u8; 12usize] = b"dnQualifier\0";
pub const LN_dnQualifier: &[u8; 12usize] = b"dnQualifier\0";
pub const NID_dnQualifier: u32 = 174;
pub const LN_enhancedSearchGuide: &[u8; 20usize] = b"enhancedSearchGuide\0";
pub const NID_enhancedSearchGuide: u32 = 885;
pub const LN_protocolInformation: &[u8; 20usize] = b"protocolInformation\0";
pub const NID_protocolInformation: u32 = 886;
pub const LN_distinguishedName: &[u8; 18usize] = b"distinguishedName\0";
pub const NID_distinguishedName: u32 = 887;
pub const LN_uniqueMember: &[u8; 13usize] = b"uniqueMember\0";
pub const NID_uniqueMember: u32 = 888;
pub const LN_houseIdentifier: &[u8; 16usize] = b"houseIdentifier\0";
pub const NID_houseIdentifier: u32 = 889;
pub const LN_supportedAlgorithms: &[u8; 20usize] = b"supportedAlgorithms\0";
pub const NID_supportedAlgorithms: u32 = 890;
pub const LN_deltaRevocationList: &[u8; 20usize] = b"deltaRevocationList\0";
pub const NID_deltaRevocationList: u32 = 891;
pub const SN_dmdName: &[u8; 8usize] = b"dmdName\0";
pub const NID_dmdName: u32 = 892;
pub const LN_pseudonym: &[u8; 10usize] = b"pseudonym\0";
pub const NID_pseudonym: u32 = 510;
pub const SN_role: &[u8; 5usize] = b"role\0";
pub const LN_role: &[u8; 5usize] = b"role\0";
pub const NID_role: u32 = 400;
pub const LN_organizationIdentifier: &[u8; 23usize] = b"organizationIdentifier\0";
pub const NID_organizationIdentifier: u32 = 1089;
pub const SN_countryCode3c: &[u8; 3usize] = b"c3\0";
pub const LN_countryCode3c: &[u8; 14usize] = b"countryCode3c\0";
pub const NID_countryCode3c: u32 = 1090;
pub const SN_countryCode3n: &[u8; 3usize] = b"n3\0";
pub const LN_countryCode3n: &[u8; 14usize] = b"countryCode3n\0";
pub const NID_countryCode3n: u32 = 1091;
pub const LN_dnsName: &[u8; 8usize] = b"dnsName\0";
pub const NID_dnsName: u32 = 1092;
pub const SN_X500algorithms: &[u8; 15usize] = b"X500algorithms\0";
pub const LN_X500algorithms: &[u8; 32usize] = b"directory services - algorithms\0";
pub const NID_X500algorithms: u32 = 378;
pub const SN_rsa: &[u8; 4usize] = b"RSA\0";
pub const LN_rsa: &[u8; 4usize] = b"rsa\0";
pub const NID_rsa: u32 = 19;
pub const SN_mdc2WithRSA: &[u8; 9usize] = b"RSA-MDC2\0";
pub const LN_mdc2WithRSA: &[u8; 12usize] = b"mdc2WithRSA\0";
pub const NID_mdc2WithRSA: u32 = 96;
pub const SN_mdc2: &[u8; 5usize] = b"MDC2\0";
pub const LN_mdc2: &[u8; 5usize] = b"mdc2\0";
pub const NID_mdc2: u32 = 95;
pub const SN_id_ce: &[u8; 6usize] = b"id-ce\0";
pub const NID_id_ce: u32 = 81;
pub const SN_subject_directory_attributes: &[u8; 27usize] = b"subjectDirectoryAttributes\0";
pub const LN_subject_directory_attributes: &[u8; 36usize] =
    b"X509v3 Subject Directory Attributes\0";
pub const NID_subject_directory_attributes: u32 = 769;
pub const SN_subject_key_identifier: &[u8; 21usize] = b"subjectKeyIdentifier\0";
pub const LN_subject_key_identifier: &[u8; 30usize] = b"X509v3 Subject Key Identifier\0";
pub const NID_subject_key_identifier: u32 = 82;
pub const SN_key_usage: &[u8; 9usize] = b"keyUsage\0";
pub const LN_key_usage: &[u8; 17usize] = b"X509v3 Key Usage\0";
pub const NID_key_usage: u32 = 83;
pub const SN_private_key_usage_period: &[u8; 22usize] = b"privateKeyUsagePeriod\0";
pub const LN_private_key_usage_period: &[u8; 32usize] = b"X509v3 Private Key Usage Period\0";
pub const NID_private_key_usage_period: u32 = 84;
pub const SN_subject_alt_name: &[u8; 15usize] = b"subjectAltName\0";
pub const LN_subject_alt_name: &[u8; 32usize] = b"X509v3 Subject Alternative Name\0";
pub const NID_subject_alt_name: u32 = 85;
pub const SN_issuer_alt_name: &[u8; 14usize] = b"issuerAltName\0";
pub const LN_issuer_alt_name: &[u8; 31usize] = b"X509v3 Issuer Alternative Name\0";
pub const NID_issuer_alt_name: u32 = 86;
pub const SN_basic_constraints: &[u8; 17usize] = b"basicConstraints\0";
pub const LN_basic_constraints: &[u8; 25usize] = b"X509v3 Basic Constraints\0";
pub const NID_basic_constraints: u32 = 87;
pub const SN_crl_number: &[u8; 10usize] = b"crlNumber\0";
pub const LN_crl_number: &[u8; 18usize] = b"X509v3 CRL Number\0";
pub const NID_crl_number: u32 = 88;
pub const SN_crl_reason: &[u8; 10usize] = b"CRLReason\0";
pub const LN_crl_reason: &[u8; 23usize] = b"X509v3 CRL Reason Code\0";
pub const NID_crl_reason: u32 = 141;
pub const SN_invalidity_date: &[u8; 15usize] = b"invalidityDate\0";
pub const LN_invalidity_date: &[u8; 16usize] = b"Invalidity Date\0";
pub const NID_invalidity_date: u32 = 142;
pub const SN_delta_crl: &[u8; 9usize] = b"deltaCRL\0";
pub const LN_delta_crl: &[u8; 27usize] = b"X509v3 Delta CRL Indicator\0";
pub const NID_delta_crl: u32 = 140;
pub const SN_issuing_distribution_point: &[u8; 25usize] = b"issuingDistributionPoint\0";
pub const LN_issuing_distribution_point: &[u8; 34usize] = b"X509v3 Issuing Distribution Point\0";
pub const NID_issuing_distribution_point: u32 = 770;
pub const SN_certificate_issuer: &[u8; 18usize] = b"certificateIssuer\0";
pub const LN_certificate_issuer: &[u8; 26usize] = b"X509v3 Certificate Issuer\0";
pub const NID_certificate_issuer: u32 = 771;
pub const SN_name_constraints: &[u8; 16usize] = b"nameConstraints\0";
pub const LN_name_constraints: &[u8; 24usize] = b"X509v3 Name Constraints\0";
pub const NID_name_constraints: u32 = 666;
pub const SN_crl_distribution_points: &[u8; 22usize] = b"crlDistributionPoints\0";
pub const LN_crl_distribution_points: &[u8; 31usize] = b"X509v3 CRL Distribution Points\0";
pub const NID_crl_distribution_points: u32 = 103;
pub const SN_certificate_policies: &[u8; 20usize] = b"certificatePolicies\0";
pub const LN_certificate_policies: &[u8; 28usize] = b"X509v3 Certificate Policies\0";
pub const NID_certificate_policies: u32 = 89;
pub const SN_any_policy: &[u8; 10usize] = b"anyPolicy\0";
pub const LN_any_policy: &[u8; 18usize] = b"X509v3 Any Policy\0";
pub const NID_any_policy: u32 = 746;
pub const SN_policy_mappings: &[u8; 15usize] = b"policyMappings\0";
pub const LN_policy_mappings: &[u8; 23usize] = b"X509v3 Policy Mappings\0";
pub const NID_policy_mappings: u32 = 747;
pub const SN_authority_key_identifier: &[u8; 23usize] = b"authorityKeyIdentifier\0";
pub const LN_authority_key_identifier: &[u8; 32usize] = b"X509v3 Authority Key Identifier\0";
pub const NID_authority_key_identifier: u32 = 90;
pub const SN_policy_constraints: &[u8; 18usize] = b"policyConstraints\0";
pub const LN_policy_constraints: &[u8; 26usize] = b"X509v3 Policy Constraints\0";
pub const NID_policy_constraints: u32 = 401;
pub const SN_ext_key_usage: &[u8; 17usize] = b"extendedKeyUsage\0";
pub const LN_ext_key_usage: &[u8; 26usize] = b"X509v3 Extended Key Usage\0";
pub const NID_ext_key_usage: u32 = 126;
pub const SN_freshest_crl: &[u8; 12usize] = b"freshestCRL\0";
pub const LN_freshest_crl: &[u8; 20usize] = b"X509v3 Freshest CRL\0";
pub const NID_freshest_crl: u32 = 857;
pub const SN_inhibit_any_policy: &[u8; 17usize] = b"inhibitAnyPolicy\0";
pub const LN_inhibit_any_policy: &[u8; 26usize] = b"X509v3 Inhibit Any Policy\0";
pub const NID_inhibit_any_policy: u32 = 748;
pub const SN_target_information: &[u8; 18usize] = b"targetInformation\0";
pub const LN_target_information: &[u8; 20usize] = b"X509v3 AC Targeting\0";
pub const NID_target_information: u32 = 402;
pub const SN_no_rev_avail: &[u8; 11usize] = b"noRevAvail\0";
pub const LN_no_rev_avail: &[u8; 31usize] = b"X509v3 No Revocation Available\0";
pub const NID_no_rev_avail: u32 = 403;
pub const SN_anyExtendedKeyUsage: &[u8; 20usize] = b"anyExtendedKeyUsage\0";
pub const LN_anyExtendedKeyUsage: &[u8; 23usize] = b"Any Extended Key Usage\0";
pub const NID_anyExtendedKeyUsage: u32 = 910;
pub const SN_netscape: &[u8; 9usize] = b"Netscape\0";
pub const LN_netscape: &[u8; 30usize] = b"Netscape Communications Corp.\0";
pub const NID_netscape: u32 = 57;
pub const SN_netscape_cert_extension: &[u8; 10usize] = b"nsCertExt\0";
pub const LN_netscape_cert_extension: &[u8; 31usize] = b"Netscape Certificate Extension\0";
pub const NID_netscape_cert_extension: u32 = 58;
pub const SN_netscape_data_type: &[u8; 11usize] = b"nsDataType\0";
pub const LN_netscape_data_type: &[u8; 19usize] = b"Netscape Data Type\0";
pub const NID_netscape_data_type: u32 = 59;
pub const SN_netscape_cert_type: &[u8; 11usize] = b"nsCertType\0";
pub const LN_netscape_cert_type: &[u8; 19usize] = b"Netscape Cert Type\0";
pub const NID_netscape_cert_type: u32 = 71;
pub const SN_netscape_base_url: &[u8; 10usize] = b"nsBaseUrl\0";
pub const LN_netscape_base_url: &[u8; 18usize] = b"Netscape Base Url\0";
pub const NID_netscape_base_url: u32 = 72;
pub const SN_netscape_revocation_url: &[u8; 16usize] = b"nsRevocationUrl\0";
pub const LN_netscape_revocation_url: &[u8; 24usize] = b"Netscape Revocation Url\0";
pub const NID_netscape_revocation_url: u32 = 73;
pub const SN_netscape_ca_revocation_url: &[u8; 18usize] = b"nsCaRevocationUrl\0";
pub const LN_netscape_ca_revocation_url: &[u8; 27usize] = b"Netscape CA Revocation Url\0";
pub const NID_netscape_ca_revocation_url: u32 = 74;
pub const SN_netscape_renewal_url: &[u8; 13usize] = b"nsRenewalUrl\0";
pub const LN_netscape_renewal_url: &[u8; 21usize] = b"Netscape Renewal Url\0";
pub const NID_netscape_renewal_url: u32 = 75;
pub const SN_netscape_ca_policy_url: &[u8; 14usize] = b"nsCaPolicyUrl\0";
pub const LN_netscape_ca_policy_url: &[u8; 23usize] = b"Netscape CA Policy Url\0";
pub const NID_netscape_ca_policy_url: u32 = 76;
pub const SN_netscape_ssl_server_name: &[u8; 16usize] = b"nsSslServerName\0";
pub const LN_netscape_ssl_server_name: &[u8; 25usize] = b"Netscape SSL Server Name\0";
pub const NID_netscape_ssl_server_name: u32 = 77;
pub const SN_netscape_comment: &[u8; 10usize] = b"nsComment\0";
pub const LN_netscape_comment: &[u8; 17usize] = b"Netscape Comment\0";
pub const NID_netscape_comment: u32 = 78;
pub const SN_netscape_cert_sequence: &[u8; 15usize] = b"nsCertSequence\0";
pub const LN_netscape_cert_sequence: &[u8; 30usize] = b"Netscape Certificate Sequence\0";
pub const NID_netscape_cert_sequence: u32 = 79;
pub const SN_ns_sgc: &[u8; 6usize] = b"nsSGC\0";
pub const LN_ns_sgc: &[u8; 29usize] = b"Netscape Server Gated Crypto\0";
pub const NID_ns_sgc: u32 = 139;
pub const SN_org: &[u8; 4usize] = b"ORG\0";
pub const LN_org: &[u8; 4usize] = b"org\0";
pub const NID_org: u32 = 379;
pub const SN_dod: &[u8; 4usize] = b"DOD\0";
pub const LN_dod: &[u8; 4usize] = b"dod\0";
pub const NID_dod: u32 = 380;
pub const SN_iana: &[u8; 5usize] = b"IANA\0";
pub const LN_iana: &[u8; 5usize] = b"iana\0";
pub const NID_iana: u32 = 381;
pub const SN_Directory: &[u8; 10usize] = b"directory\0";
pub const LN_Directory: &[u8; 10usize] = b"Directory\0";
pub const NID_Directory: u32 = 382;
pub const SN_Management: &[u8; 5usize] = b"mgmt\0";
pub const LN_Management: &[u8; 11usize] = b"Management\0";
pub const NID_Management: u32 = 383;
pub const SN_Experimental: &[u8; 13usize] = b"experimental\0";
pub const LN_Experimental: &[u8; 13usize] = b"Experimental\0";
pub const NID_Experimental: u32 = 384;
pub const SN_Private: &[u8; 8usize] = b"private\0";
pub const LN_Private: &[u8; 8usize] = b"Private\0";
pub const NID_Private: u32 = 385;
pub const SN_Security: &[u8; 9usize] = b"security\0";
pub const LN_Security: &[u8; 9usize] = b"Security\0";
pub const NID_Security: u32 = 386;
pub const SN_SNMPv2: &[u8; 7usize] = b"snmpv2\0";
pub const LN_SNMPv2: &[u8; 7usize] = b"SNMPv2\0";
pub const NID_SNMPv2: u32 = 387;
pub const LN_Mail: &[u8; 5usize] = b"Mail\0";
pub const NID_Mail: u32 = 388;
pub const SN_Enterprises: &[u8; 12usize] = b"enterprises\0";
pub const LN_Enterprises: &[u8; 12usize] = b"Enterprises\0";
pub const NID_Enterprises: u32 = 389;
pub const SN_dcObject: &[u8; 9usize] = b"dcobject\0";
pub const LN_dcObject: &[u8; 9usize] = b"dcObject\0";
pub const NID_dcObject: u32 = 390;
pub const SN_mime_mhs: &[u8; 9usize] = b"mime-mhs\0";
pub const LN_mime_mhs: &[u8; 9usize] = b"MIME MHS\0";
pub const NID_mime_mhs: u32 = 504;
pub const SN_mime_mhs_headings: &[u8; 18usize] = b"mime-mhs-headings\0";
pub const LN_mime_mhs_headings: &[u8; 18usize] = b"mime-mhs-headings\0";
pub const NID_mime_mhs_headings: u32 = 505;
pub const SN_mime_mhs_bodies: &[u8; 16usize] = b"mime-mhs-bodies\0";
pub const LN_mime_mhs_bodies: &[u8; 16usize] = b"mime-mhs-bodies\0";
pub const NID_mime_mhs_bodies: u32 = 506;
pub const SN_id_hex_partial_message: &[u8; 23usize] = b"id-hex-partial-message\0";
pub const LN_id_hex_partial_message: &[u8; 23usize] = b"id-hex-partial-message\0";
pub const NID_id_hex_partial_message: u32 = 507;
pub const SN_id_hex_multipart_message: &[u8; 25usize] = b"id-hex-multipart-message\0";
pub const LN_id_hex_multipart_message: &[u8; 25usize] = b"id-hex-multipart-message\0";
pub const NID_id_hex_multipart_message: u32 = 508;
pub const SN_zlib_compression: &[u8; 5usize] = b"ZLIB\0";
pub const LN_zlib_compression: &[u8; 17usize] = b"zlib compression\0";
pub const NID_zlib_compression: u32 = 125;
pub const SN_aes_128_ecb: &[u8; 12usize] = b"AES-128-ECB\0";
pub const LN_aes_128_ecb: &[u8; 12usize] = b"aes-128-ecb\0";
pub const NID_aes_128_ecb: u32 = 418;
pub const SN_aes_128_cbc: &[u8; 12usize] = b"AES-128-CBC\0";
pub const LN_aes_128_cbc: &[u8; 12usize] = b"aes-128-cbc\0";
pub const NID_aes_128_cbc: u32 = 419;
pub const SN_aes_128_ofb128: &[u8; 12usize] = b"AES-128-OFB\0";
pub const LN_aes_128_ofb128: &[u8; 12usize] = b"aes-128-ofb\0";
pub const NID_aes_128_ofb128: u32 = 420;
pub const SN_aes_128_cfb128: &[u8; 12usize] = b"AES-128-CFB\0";
pub const LN_aes_128_cfb128: &[u8; 12usize] = b"aes-128-cfb\0";
pub const NID_aes_128_cfb128: u32 = 421;
pub const SN_id_aes128_wrap: &[u8; 15usize] = b"id-aes128-wrap\0";
pub const NID_id_aes128_wrap: u32 = 788;
pub const SN_aes_128_gcm: &[u8; 14usize] = b"id-aes128-GCM\0";
pub const LN_aes_128_gcm: &[u8; 12usize] = b"aes-128-gcm\0";
pub const NID_aes_128_gcm: u32 = 895;
pub const SN_aes_128_ccm: &[u8; 14usize] = b"id-aes128-CCM\0";
pub const LN_aes_128_ccm: &[u8; 12usize] = b"aes-128-ccm\0";
pub const NID_aes_128_ccm: u32 = 896;
pub const SN_id_aes128_wrap_pad: &[u8; 19usize] = b"id-aes128-wrap-pad\0";
pub const NID_id_aes128_wrap_pad: u32 = 897;
pub const SN_aes_192_ecb: &[u8; 12usize] = b"AES-192-ECB\0";
pub const LN_aes_192_ecb: &[u8; 12usize] = b"aes-192-ecb\0";
pub const NID_aes_192_ecb: u32 = 422;
pub const SN_aes_192_cbc: &[u8; 12usize] = b"AES-192-CBC\0";
pub const LN_aes_192_cbc: &[u8; 12usize] = b"aes-192-cbc\0";
pub const NID_aes_192_cbc: u32 = 423;
pub const SN_aes_192_ofb128: &[u8; 12usize] = b"AES-192-OFB\0";
pub const LN_aes_192_ofb128: &[u8; 12usize] = b"aes-192-ofb\0";
pub const NID_aes_192_ofb128: u32 = 424;
pub const SN_aes_192_cfb128: &[u8; 12usize] = b"AES-192-CFB\0";
pub const LN_aes_192_cfb128: &[u8; 12usize] = b"aes-192-cfb\0";
pub const NID_aes_192_cfb128: u32 = 425;
pub const SN_id_aes192_wrap: &[u8; 15usize] = b"id-aes192-wrap\0";
pub const NID_id_aes192_wrap: u32 = 789;
pub const SN_aes_192_gcm: &[u8; 14usize] = b"id-aes192-GCM\0";
pub const LN_aes_192_gcm: &[u8; 12usize] = b"aes-192-gcm\0";
pub const NID_aes_192_gcm: u32 = 898;
pub const SN_aes_192_ccm: &[u8; 14usize] = b"id-aes192-CCM\0";
pub const LN_aes_192_ccm: &[u8; 12usize] = b"aes-192-ccm\0";
pub const NID_aes_192_ccm: u32 = 899;
pub const SN_id_aes192_wrap_pad: &[u8; 19usize] = b"id-aes192-wrap-pad\0";
pub const NID_id_aes192_wrap_pad: u32 = 900;
pub const SN_aes_256_ecb: &[u8; 12usize] = b"AES-256-ECB\0";
pub const LN_aes_256_ecb: &[u8; 12usize] = b"aes-256-ecb\0";
pub const NID_aes_256_ecb: u32 = 426;
pub const SN_aes_256_cbc: &[u8; 12usize] = b"AES-256-CBC\0";
pub const LN_aes_256_cbc: &[u8; 12usize] = b"aes-256-cbc\0";
pub const NID_aes_256_cbc: u32 = 427;
pub const SN_aes_256_ofb128: &[u8; 12usize] = b"AES-256-OFB\0";
pub const LN_aes_256_ofb128: &[u8; 12usize] = b"aes-256-ofb\0";
pub const NID_aes_256_ofb128: u32 = 428;
pub const SN_aes_256_cfb128: &[u8; 12usize] = b"AES-256-CFB\0";
pub const LN_aes_256_cfb128: &[u8; 12usize] = b"aes-256-cfb\0";
pub const NID_aes_256_cfb128: u32 = 429;
pub const SN_id_aes256_wrap: &[u8; 15usize] = b"id-aes256-wrap\0";
pub const NID_id_aes256_wrap: u32 = 790;
pub const SN_aes_256_gcm: &[u8; 14usize] = b"id-aes256-GCM\0";
pub const LN_aes_256_gcm: &[u8; 12usize] = b"aes-256-gcm\0";
pub const NID_aes_256_gcm: u32 = 901;
pub const SN_aes_256_ccm: &[u8; 14usize] = b"id-aes256-CCM\0";
pub const LN_aes_256_ccm: &[u8; 12usize] = b"aes-256-ccm\0";
pub const NID_aes_256_ccm: u32 = 902;
pub const SN_id_aes256_wrap_pad: &[u8; 19usize] = b"id-aes256-wrap-pad\0";
pub const NID_id_aes256_wrap_pad: u32 = 903;
pub const SN_aes_128_xts: &[u8; 12usize] = b"AES-128-XTS\0";
pub const LN_aes_128_xts: &[u8; 12usize] = b"aes-128-xts\0";
pub const NID_aes_128_xts: u32 = 913;
pub const SN_aes_256_xts: &[u8; 12usize] = b"AES-256-XTS\0";
pub const LN_aes_256_xts: &[u8; 12usize] = b"aes-256-xts\0";
pub const NID_aes_256_xts: u32 = 914;
pub const SN_aes_128_cfb1: &[u8; 13usize] = b"AES-128-CFB1\0";
pub const LN_aes_128_cfb1: &[u8; 13usize] = b"aes-128-cfb1\0";
pub const NID_aes_128_cfb1: u32 = 650;
pub const SN_aes_192_cfb1: &[u8; 13usize] = b"AES-192-CFB1\0";
pub const LN_aes_192_cfb1: &[u8; 13usize] = b"aes-192-cfb1\0";
pub const NID_aes_192_cfb1: u32 = 651;
pub const SN_aes_256_cfb1: &[u8; 13usize] = b"AES-256-CFB1\0";
pub const LN_aes_256_cfb1: &[u8; 13usize] = b"aes-256-cfb1\0";
pub const NID_aes_256_cfb1: u32 = 652;
pub const SN_aes_128_cfb8: &[u8; 13usize] = b"AES-128-CFB8\0";
pub const LN_aes_128_cfb8: &[u8; 13usize] = b"aes-128-cfb8\0";
pub const NID_aes_128_cfb8: u32 = 653;
pub const SN_aes_192_cfb8: &[u8; 13usize] = b"AES-192-CFB8\0";
pub const LN_aes_192_cfb8: &[u8; 13usize] = b"aes-192-cfb8\0";
pub const NID_aes_192_cfb8: u32 = 654;
pub const SN_aes_256_cfb8: &[u8; 13usize] = b"AES-256-CFB8\0";
pub const LN_aes_256_cfb8: &[u8; 13usize] = b"aes-256-cfb8\0";
pub const NID_aes_256_cfb8: u32 = 655;
pub const SN_aes_128_ctr: &[u8; 12usize] = b"AES-128-CTR\0";
pub const LN_aes_128_ctr: &[u8; 12usize] = b"aes-128-ctr\0";
pub const NID_aes_128_ctr: u32 = 904;
pub const SN_aes_192_ctr: &[u8; 12usize] = b"AES-192-CTR\0";
pub const LN_aes_192_ctr: &[u8; 12usize] = b"aes-192-ctr\0";
pub const NID_aes_192_ctr: u32 = 905;
pub const SN_aes_256_ctr: &[u8; 12usize] = b"AES-256-CTR\0";
pub const LN_aes_256_ctr: &[u8; 12usize] = b"aes-256-ctr\0";
pub const NID_aes_256_ctr: u32 = 906;
pub const SN_aes_128_ocb: &[u8; 12usize] = b"AES-128-OCB\0";
pub const LN_aes_128_ocb: &[u8; 12usize] = b"aes-128-ocb\0";
pub const NID_aes_128_ocb: u32 = 958;
pub const SN_aes_192_ocb: &[u8; 12usize] = b"AES-192-OCB\0";
pub const LN_aes_192_ocb: &[u8; 12usize] = b"aes-192-ocb\0";
pub const NID_aes_192_ocb: u32 = 959;
pub const SN_aes_256_ocb: &[u8; 12usize] = b"AES-256-OCB\0";
pub const LN_aes_256_ocb: &[u8; 12usize] = b"aes-256-ocb\0";
pub const NID_aes_256_ocb: u32 = 960;
pub const SN_des_cfb1: &[u8; 9usize] = b"DES-CFB1\0";
pub const LN_des_cfb1: &[u8; 9usize] = b"des-cfb1\0";
pub const NID_des_cfb1: u32 = 656;
pub const SN_des_cfb8: &[u8; 9usize] = b"DES-CFB8\0";
pub const LN_des_cfb8: &[u8; 9usize] = b"des-cfb8\0";
pub const NID_des_cfb8: u32 = 657;
pub const SN_des_ede3_cfb1: &[u8; 14usize] = b"DES-EDE3-CFB1\0";
pub const LN_des_ede3_cfb1: &[u8; 14usize] = b"des-ede3-cfb1\0";
pub const NID_des_ede3_cfb1: u32 = 658;
pub const SN_des_ede3_cfb8: &[u8; 14usize] = b"DES-EDE3-CFB8\0";
pub const LN_des_ede3_cfb8: &[u8; 14usize] = b"des-ede3-cfb8\0";
pub const NID_des_ede3_cfb8: u32 = 659;
pub const SN_sha256: &[u8; 7usize] = b"SHA256\0";
pub const LN_sha256: &[u8; 7usize] = b"sha256\0";
pub const NID_sha256: u32 = 672;
pub const SN_sha384: &[u8; 7usize] = b"SHA384\0";
pub const LN_sha384: &[u8; 7usize] = b"sha384\0";
pub const NID_sha384: u32 = 673;
pub const SN_sha512: &[u8; 7usize] = b"SHA512\0";
pub const LN_sha512: &[u8; 7usize] = b"sha512\0";
pub const NID_sha512: u32 = 674;
pub const SN_sha224: &[u8; 7usize] = b"SHA224\0";
pub const LN_sha224: &[u8; 7usize] = b"sha224\0";
pub const NID_sha224: u32 = 675;
pub const SN_sha512_224: &[u8; 11usize] = b"SHA512-224\0";
pub const LN_sha512_224: &[u8; 11usize] = b"sha512-224\0";
pub const NID_sha512_224: u32 = 1094;
pub const SN_sha512_256: &[u8; 11usize] = b"SHA512-256\0";
pub const LN_sha512_256: &[u8; 11usize] = b"sha512-256\0";
pub const NID_sha512_256: u32 = 1095;
pub const SN_sha3_224: &[u8; 9usize] = b"SHA3-224\0";
pub const LN_sha3_224: &[u8; 9usize] = b"sha3-224\0";
pub const NID_sha3_224: u32 = 1096;
pub const SN_sha3_256: &[u8; 9usize] = b"SHA3-256\0";
pub const LN_sha3_256: &[u8; 9usize] = b"sha3-256\0";
pub const NID_sha3_256: u32 = 1097;
pub const SN_sha3_384: &[u8; 9usize] = b"SHA3-384\0";
pub const LN_sha3_384: &[u8; 9usize] = b"sha3-384\0";
pub const NID_sha3_384: u32 = 1098;
pub const SN_sha3_512: &[u8; 9usize] = b"SHA3-512\0";
pub const LN_sha3_512: &[u8; 9usize] = b"sha3-512\0";
pub const NID_sha3_512: u32 = 1099;
pub const SN_shake128: &[u8; 9usize] = b"SHAKE128\0";
pub const LN_shake128: &[u8; 9usize] = b"shake128\0";
pub const NID_shake128: u32 = 1100;
pub const SN_shake256: &[u8; 9usize] = b"SHAKE256\0";
pub const LN_shake256: &[u8; 9usize] = b"shake256\0";
pub const NID_shake256: u32 = 1101;
pub const SN_hmac_sha3_224: &[u8; 20usize] = b"id-hmacWithSHA3-224\0";
pub const LN_hmac_sha3_224: &[u8; 14usize] = b"hmac-sha3-224\0";
pub const NID_hmac_sha3_224: u32 = 1102;
pub const SN_hmac_sha3_256: &[u8; 20usize] = b"id-hmacWithSHA3-256\0";
pub const LN_hmac_sha3_256: &[u8; 14usize] = b"hmac-sha3-256\0";
pub const NID_hmac_sha3_256: u32 = 1103;
pub const SN_hmac_sha3_384: &[u8; 20usize] = b"id-hmacWithSHA3-384\0";
pub const LN_hmac_sha3_384: &[u8; 14usize] = b"hmac-sha3-384\0";
pub const NID_hmac_sha3_384: u32 = 1104;
pub const SN_hmac_sha3_512: &[u8; 20usize] = b"id-hmacWithSHA3-512\0";
pub const LN_hmac_sha3_512: &[u8; 14usize] = b"hmac-sha3-512\0";
pub const NID_hmac_sha3_512: u32 = 1105;
pub const SN_kmac128: &[u8; 8usize] = b"KMAC128\0";
pub const LN_kmac128: &[u8; 8usize] = b"kmac128\0";
pub const NID_kmac128: u32 = 1196;
pub const SN_kmac256: &[u8; 8usize] = b"KMAC256\0";
pub const LN_kmac256: &[u8; 8usize] = b"kmac256\0";
pub const NID_kmac256: u32 = 1197;
pub const SN_dsa_with_SHA224: &[u8; 16usize] = b"dsa_with_SHA224\0";
pub const NID_dsa_with_SHA224: u32 = 802;
pub const SN_dsa_with_SHA256: &[u8; 16usize] = b"dsa_with_SHA256\0";
pub const NID_dsa_with_SHA256: u32 = 803;
pub const SN_dsa_with_SHA384: &[u8; 19usize] = b"id-dsa-with-sha384\0";
pub const LN_dsa_with_SHA384: &[u8; 16usize] = b"dsa_with_SHA384\0";
pub const NID_dsa_with_SHA384: u32 = 1106;
pub const SN_dsa_with_SHA512: &[u8; 19usize] = b"id-dsa-with-sha512\0";
pub const LN_dsa_with_SHA512: &[u8; 16usize] = b"dsa_with_SHA512\0";
pub const NID_dsa_with_SHA512: u32 = 1107;
pub const SN_dsa_with_SHA3_224: &[u8; 21usize] = b"id-dsa-with-sha3-224\0";
pub const LN_dsa_with_SHA3_224: &[u8; 18usize] = b"dsa_with_SHA3-224\0";
pub const NID_dsa_with_SHA3_224: u32 = 1108;
pub const SN_dsa_with_SHA3_256: &[u8; 21usize] = b"id-dsa-with-sha3-256\0";
pub const LN_dsa_with_SHA3_256: &[u8; 18usize] = b"dsa_with_SHA3-256\0";
pub const NID_dsa_with_SHA3_256: u32 = 1109;
pub const SN_dsa_with_SHA3_384: &[u8; 21usize] = b"id-dsa-with-sha3-384\0";
pub const LN_dsa_with_SHA3_384: &[u8; 18usize] = b"dsa_with_SHA3-384\0";
pub const NID_dsa_with_SHA3_384: u32 = 1110;
pub const SN_dsa_with_SHA3_512: &[u8; 21usize] = b"id-dsa-with-sha3-512\0";
pub const LN_dsa_with_SHA3_512: &[u8; 18usize] = b"dsa_with_SHA3-512\0";
pub const NID_dsa_with_SHA3_512: u32 = 1111;
pub const SN_ecdsa_with_SHA3_224: &[u8; 23usize] = b"id-ecdsa-with-sha3-224\0";
pub const LN_ecdsa_with_SHA3_224: &[u8; 20usize] = b"ecdsa_with_SHA3-224\0";
pub const NID_ecdsa_with_SHA3_224: u32 = 1112;
pub const SN_ecdsa_with_SHA3_256: &[u8; 23usize] = b"id-ecdsa-with-sha3-256\0";
pub const LN_ecdsa_with_SHA3_256: &[u8; 20usize] = b"ecdsa_with_SHA3-256\0";
pub const NID_ecdsa_with_SHA3_256: u32 = 1113;
pub const SN_ecdsa_with_SHA3_384: &[u8; 23usize] = b"id-ecdsa-with-sha3-384\0";
pub const LN_ecdsa_with_SHA3_384: &[u8; 20usize] = b"ecdsa_with_SHA3-384\0";
pub const NID_ecdsa_with_SHA3_384: u32 = 1114;
pub const SN_ecdsa_with_SHA3_512: &[u8; 23usize] = b"id-ecdsa-with-sha3-512\0";
pub const LN_ecdsa_with_SHA3_512: &[u8; 20usize] = b"ecdsa_with_SHA3-512\0";
pub const NID_ecdsa_with_SHA3_512: u32 = 1115;
pub const SN_RSA_SHA3_224: &[u8; 35usize] = b"id-rsassa-pkcs1-v1_5-with-sha3-224\0";
pub const LN_RSA_SHA3_224: &[u8; 13usize] = b"RSA-SHA3-224\0";
pub const NID_RSA_SHA3_224: u32 = 1116;
pub const SN_RSA_SHA3_256: &[u8; 35usize] = b"id-rsassa-pkcs1-v1_5-with-sha3-256\0";
pub const LN_RSA_SHA3_256: &[u8; 13usize] = b"RSA-SHA3-256\0";
pub const NID_RSA_SHA3_256: u32 = 1117;
pub const SN_RSA_SHA3_384: &[u8; 35usize] = b"id-rsassa-pkcs1-v1_5-with-sha3-384\0";
pub const LN_RSA_SHA3_384: &[u8; 13usize] = b"RSA-SHA3-384\0";
pub const NID_RSA_SHA3_384: u32 = 1118;
pub const SN_RSA_SHA3_512: &[u8; 35usize] = b"id-rsassa-pkcs1-v1_5-with-sha3-512\0";
pub const LN_RSA_SHA3_512: &[u8; 13usize] = b"RSA-SHA3-512\0";
pub const NID_RSA_SHA3_512: u32 = 1119;
pub const SN_hold_instruction_code: &[u8; 20usize] = b"holdInstructionCode\0";
pub const LN_hold_instruction_code: &[u8; 22usize] = b"Hold Instruction Code\0";
pub const NID_hold_instruction_code: u32 = 430;
pub const SN_hold_instruction_none: &[u8; 20usize] = b"holdInstructionNone\0";
pub const LN_hold_instruction_none: &[u8; 22usize] = b"Hold Instruction None\0";
pub const NID_hold_instruction_none: u32 = 431;
pub const SN_hold_instruction_call_issuer: &[u8; 26usize] = b"holdInstructionCallIssuer\0";
pub const LN_hold_instruction_call_issuer: &[u8; 29usize] = b"Hold Instruction Call Issuer\0";
pub const NID_hold_instruction_call_issuer: u32 = 432;
pub const SN_hold_instruction_reject: &[u8; 22usize] = b"holdInstructionReject\0";
pub const LN_hold_instruction_reject: &[u8; 24usize] = b"Hold Instruction Reject\0";
pub const NID_hold_instruction_reject: u32 = 433;
pub const SN_data: &[u8; 5usize] = b"data\0";
pub const NID_data: u32 = 434;
pub const SN_pss: &[u8; 4usize] = b"pss\0";
pub const NID_pss: u32 = 435;
pub const SN_ucl: &[u8; 4usize] = b"ucl\0";
pub const NID_ucl: u32 = 436;
pub const SN_pilot: &[u8; 6usize] = b"pilot\0";
pub const NID_pilot: u32 = 437;
pub const LN_pilotAttributeType: &[u8; 19usize] = b"pilotAttributeType\0";
pub const NID_pilotAttributeType: u32 = 438;
pub const LN_pilotAttributeSyntax: &[u8; 21usize] = b"pilotAttributeSyntax\0";
pub const NID_pilotAttributeSyntax: u32 = 439;
pub const LN_pilotObjectClass: &[u8; 17usize] = b"pilotObjectClass\0";
pub const NID_pilotObjectClass: u32 = 440;
pub const LN_pilotGroups: &[u8; 12usize] = b"pilotGroups\0";
pub const NID_pilotGroups: u32 = 441;
pub const LN_iA5StringSyntax: &[u8; 16usize] = b"iA5StringSyntax\0";
pub const NID_iA5StringSyntax: u32 = 442;
pub const LN_caseIgnoreIA5StringSyntax: &[u8; 26usize] = b"caseIgnoreIA5StringSyntax\0";
pub const NID_caseIgnoreIA5StringSyntax: u32 = 443;
pub const LN_pilotObject: &[u8; 12usize] = b"pilotObject\0";
pub const NID_pilotObject: u32 = 444;
pub const LN_pilotPerson: &[u8; 12usize] = b"pilotPerson\0";
pub const NID_pilotPerson: u32 = 445;
pub const SN_account: &[u8; 8usize] = b"account\0";
pub const NID_account: u32 = 446;
pub const SN_document: &[u8; 9usize] = b"document\0";
pub const NID_document: u32 = 447;
pub const SN_room: &[u8; 5usize] = b"room\0";
pub const NID_room: u32 = 448;
pub const LN_documentSeries: &[u8; 15usize] = b"documentSeries\0";
pub const NID_documentSeries: u32 = 449;
pub const SN_Domain: &[u8; 7usize] = b"domain\0";
pub const LN_Domain: &[u8; 7usize] = b"Domain\0";
pub const NID_Domain: u32 = 392;
pub const LN_rFC822localPart: &[u8; 16usize] = b"rFC822localPart\0";
pub const NID_rFC822localPart: u32 = 450;
pub const LN_dNSDomain: &[u8; 10usize] = b"dNSDomain\0";
pub const NID_dNSDomain: u32 = 451;
pub const LN_domainRelatedObject: &[u8; 20usize] = b"domainRelatedObject\0";
pub const NID_domainRelatedObject: u32 = 452;
pub const LN_friendlyCountry: &[u8; 16usize] = b"friendlyCountry\0";
pub const NID_friendlyCountry: u32 = 453;
pub const LN_simpleSecurityObject: &[u8; 21usize] = b"simpleSecurityObject\0";
pub const NID_simpleSecurityObject: u32 = 454;
pub const LN_pilotOrganization: &[u8; 18usize] = b"pilotOrganization\0";
pub const NID_pilotOrganization: u32 = 455;
pub const LN_pilotDSA: &[u8; 9usize] = b"pilotDSA\0";
pub const NID_pilotDSA: u32 = 456;
pub const LN_qualityLabelledData: &[u8; 20usize] = b"qualityLabelledData\0";
pub const NID_qualityLabelledData: u32 = 457;
pub const SN_userId: &[u8; 4usize] = b"UID\0";
pub const LN_userId: &[u8; 7usize] = b"userId\0";
pub const NID_userId: u32 = 458;
pub const LN_textEncodedORAddress: &[u8; 21usize] = b"textEncodedORAddress\0";
pub const NID_textEncodedORAddress: u32 = 459;
pub const SN_rfc822Mailbox: &[u8; 5usize] = b"mail\0";
pub const LN_rfc822Mailbox: &[u8; 14usize] = b"rfc822Mailbox\0";
pub const NID_rfc822Mailbox: u32 = 460;
pub const SN_info: &[u8; 5usize] = b"info\0";
pub const NID_info: u32 = 461;
pub const LN_favouriteDrink: &[u8; 15usize] = b"favouriteDrink\0";
pub const NID_favouriteDrink: u32 = 462;
pub const LN_roomNumber: &[u8; 11usize] = b"roomNumber\0";
pub const NID_roomNumber: u32 = 463;
pub const SN_photo: &[u8; 6usize] = b"photo\0";
pub const NID_photo: u32 = 464;
pub const LN_userClass: &[u8; 10usize] = b"userClass\0";
pub const NID_userClass: u32 = 465;
pub const SN_host: &[u8; 5usize] = b"host\0";
pub const NID_host: u32 = 466;
pub const SN_manager: &[u8; 8usize] = b"manager\0";
pub const NID_manager: u32 = 467;
pub const LN_documentIdentifier: &[u8; 19usize] = b"documentIdentifier\0";
pub const NID_documentIdentifier: u32 = 468;
pub const LN_documentTitle: &[u8; 14usize] = b"documentTitle\0";
pub const NID_documentTitle: u32 = 469;
pub const LN_documentVersion: &[u8; 16usize] = b"documentVersion\0";
pub const NID_documentVersion: u32 = 470;
pub const LN_documentAuthor: &[u8; 15usize] = b"documentAuthor\0";
pub const NID_documentAuthor: u32 = 471;
pub const LN_documentLocation: &[u8; 17usize] = b"documentLocation\0";
pub const NID_documentLocation: u32 = 472;
pub const LN_homeTelephoneNumber: &[u8; 20usize] = b"homeTelephoneNumber\0";
pub const NID_homeTelephoneNumber: u32 = 473;
pub const SN_secretary: &[u8; 10usize] = b"secretary\0";
pub const NID_secretary: u32 = 474;
pub const LN_otherMailbox: &[u8; 13usize] = b"otherMailbox\0";
pub const NID_otherMailbox: u32 = 475;
pub const LN_lastModifiedTime: &[u8; 17usize] = b"lastModifiedTime\0";
pub const NID_lastModifiedTime: u32 = 476;
pub const LN_lastModifiedBy: &[u8; 15usize] = b"lastModifiedBy\0";
pub const NID_lastModifiedBy: u32 = 477;
pub const SN_domainComponent: &[u8; 3usize] = b"DC\0";
pub const LN_domainComponent: &[u8; 16usize] = b"domainComponent\0";
pub const NID_domainComponent: u32 = 391;
pub const LN_aRecord: &[u8; 8usize] = b"aRecord\0";
pub const NID_aRecord: u32 = 478;
pub const LN_pilotAttributeType27: &[u8; 21usize] = b"pilotAttributeType27\0";
pub const NID_pilotAttributeType27: u32 = 479;
pub const LN_mXRecord: &[u8; 9usize] = b"mXRecord\0";
pub const NID_mXRecord: u32 = 480;
pub const LN_nSRecord: &[u8; 9usize] = b"nSRecord\0";
pub const NID_nSRecord: u32 = 481;
pub const LN_sOARecord: &[u8; 10usize] = b"sOARecord\0";
pub const NID_sOARecord: u32 = 482;
pub const LN_cNAMERecord: &[u8; 12usize] = b"cNAMERecord\0";
pub const NID_cNAMERecord: u32 = 483;
pub const LN_associatedDomain: &[u8; 17usize] = b"associatedDomain\0";
pub const NID_associatedDomain: u32 = 484;
pub const LN_associatedName: &[u8; 15usize] = b"associatedName\0";
pub const NID_associatedName: u32 = 485;
pub const LN_homePostalAddress: &[u8; 18usize] = b"homePostalAddress\0";
pub const NID_homePostalAddress: u32 = 486;
pub const LN_personalTitle: &[u8; 14usize] = b"personalTitle\0";
pub const NID_personalTitle: u32 = 487;
pub const LN_mobileTelephoneNumber: &[u8; 22usize] = b"mobileTelephoneNumber\0";
pub const NID_mobileTelephoneNumber: u32 = 488;
pub const LN_pagerTelephoneNumber: &[u8; 21usize] = b"pagerTelephoneNumber\0";
pub const NID_pagerTelephoneNumber: u32 = 489;
pub const LN_friendlyCountryName: &[u8; 20usize] = b"friendlyCountryName\0";
pub const NID_friendlyCountryName: u32 = 490;
pub const SN_uniqueIdentifier: &[u8; 4usize] = b"uid\0";
pub const LN_uniqueIdentifier: &[u8; 17usize] = b"uniqueIdentifier\0";
pub const NID_uniqueIdentifier: u32 = 102;
pub const LN_organizationalStatus: &[u8; 21usize] = b"organizationalStatus\0";
pub const NID_organizationalStatus: u32 = 491;
pub const LN_janetMailbox: &[u8; 13usize] = b"janetMailbox\0";
pub const NID_janetMailbox: u32 = 492;
pub const LN_mailPreferenceOption: &[u8; 21usize] = b"mailPreferenceOption\0";
pub const NID_mailPreferenceOption: u32 = 493;
pub const LN_buildingName: &[u8; 13usize] = b"buildingName\0";
pub const NID_buildingName: u32 = 494;
pub const LN_dSAQuality: &[u8; 11usize] = b"dSAQuality\0";
pub const NID_dSAQuality: u32 = 495;
pub const LN_singleLevelQuality: &[u8; 19usize] = b"singleLevelQuality\0";
pub const NID_singleLevelQuality: u32 = 496;
pub const LN_subtreeMinimumQuality: &[u8; 22usize] = b"subtreeMinimumQuality\0";
pub const NID_subtreeMinimumQuality: u32 = 497;
pub const LN_subtreeMaximumQuality: &[u8; 22usize] = b"subtreeMaximumQuality\0";
pub const NID_subtreeMaximumQuality: u32 = 498;
pub const LN_personalSignature: &[u8; 18usize] = b"personalSignature\0";
pub const NID_personalSignature: u32 = 499;
pub const LN_dITRedirect: &[u8; 12usize] = b"dITRedirect\0";
pub const NID_dITRedirect: u32 = 500;
pub const SN_audio: &[u8; 6usize] = b"audio\0";
pub const NID_audio: u32 = 501;
pub const LN_documentPublisher: &[u8; 18usize] = b"documentPublisher\0";
pub const NID_documentPublisher: u32 = 502;
pub const SN_id_set: &[u8; 7usize] = b"id-set\0";
pub const LN_id_set: &[u8; 31usize] = b"Secure Electronic Transactions\0";
pub const NID_id_set: u32 = 512;
pub const SN_set_ctype: &[u8; 10usize] = b"set-ctype\0";
pub const LN_set_ctype: &[u8; 14usize] = b"content types\0";
pub const NID_set_ctype: u32 = 513;
pub const SN_set_msgExt: &[u8; 11usize] = b"set-msgExt\0";
pub const LN_set_msgExt: &[u8; 19usize] = b"message extensions\0";
pub const NID_set_msgExt: u32 = 514;
pub const SN_set_attr: &[u8; 9usize] = b"set-attr\0";
pub const NID_set_attr: u32 = 515;
pub const SN_set_policy: &[u8; 11usize] = b"set-policy\0";
pub const NID_set_policy: u32 = 516;
pub const SN_set_certExt: &[u8; 12usize] = b"set-certExt\0";
pub const LN_set_certExt: &[u8; 23usize] = b"certificate extensions\0";
pub const NID_set_certExt: u32 = 517;
pub const SN_set_brand: &[u8; 10usize] = b"set-brand\0";
pub const NID_set_brand: u32 = 518;
pub const SN_setct_PANData: &[u8; 14usize] = b"setct-PANData\0";
pub const NID_setct_PANData: u32 = 519;
pub const SN_setct_PANToken: &[u8; 15usize] = b"setct-PANToken\0";
pub const NID_setct_PANToken: u32 = 520;
pub const SN_setct_PANOnly: &[u8; 14usize] = b"setct-PANOnly\0";
pub const NID_setct_PANOnly: u32 = 521;
pub const SN_setct_OIData: &[u8; 13usize] = b"setct-OIData\0";
pub const NID_setct_OIData: u32 = 522;
pub const SN_setct_PI: &[u8; 9usize] = b"setct-PI\0";
pub const NID_setct_PI: u32 = 523;
pub const SN_setct_PIData: &[u8; 13usize] = b"setct-PIData\0";
pub const NID_setct_PIData: u32 = 524;
pub const SN_setct_PIDataUnsigned: &[u8; 21usize] = b"setct-PIDataUnsigned\0";
pub const NID_setct_PIDataUnsigned: u32 = 525;
pub const SN_setct_HODInput: &[u8; 15usize] = b"setct-HODInput\0";
pub const NID_setct_HODInput: u32 = 526;
pub const SN_setct_AuthResBaggage: &[u8; 21usize] = b"setct-AuthResBaggage\0";
pub const NID_setct_AuthResBaggage: u32 = 527;
pub const SN_setct_AuthRevReqBaggage: &[u8; 24usize] = b"setct-AuthRevReqBaggage\0";
pub const NID_setct_AuthRevReqBaggage: u32 = 528;
pub const SN_setct_AuthRevResBaggage: &[u8; 24usize] = b"setct-AuthRevResBaggage\0";
pub const NID_setct_AuthRevResBaggage: u32 = 529;
pub const SN_setct_CapTokenSeq: &[u8; 18usize] = b"setct-CapTokenSeq\0";
pub const NID_setct_CapTokenSeq: u32 = 530;
pub const SN_setct_PInitResData: &[u8; 19usize] = b"setct-PInitResData\0";
pub const NID_setct_PInitResData: u32 = 531;
pub const SN_setct_PI_TBS: &[u8; 13usize] = b"setct-PI-TBS\0";
pub const NID_setct_PI_TBS: u32 = 532;
pub const SN_setct_PResData: &[u8; 15usize] = b"setct-PResData\0";
pub const NID_setct_PResData: u32 = 533;
pub const SN_setct_AuthReqTBS: &[u8; 17usize] = b"setct-AuthReqTBS\0";
pub const NID_setct_AuthReqTBS: u32 = 534;
pub const SN_setct_AuthResTBS: &[u8; 17usize] = b"setct-AuthResTBS\0";
pub const NID_setct_AuthResTBS: u32 = 535;
pub const SN_setct_AuthResTBSX: &[u8; 18usize] = b"setct-AuthResTBSX\0";
pub const NID_setct_AuthResTBSX: u32 = 536;
pub const SN_setct_AuthTokenTBS: &[u8; 19usize] = b"setct-AuthTokenTBS\0";
pub const NID_setct_AuthTokenTBS: u32 = 537;
pub const SN_setct_CapTokenData: &[u8; 19usize] = b"setct-CapTokenData\0";
pub const NID_setct_CapTokenData: u32 = 538;
pub const SN_setct_CapTokenTBS: &[u8; 18usize] = b"setct-CapTokenTBS\0";
pub const NID_setct_CapTokenTBS: u32 = 539;
pub const SN_setct_AcqCardCodeMsg: &[u8; 21usize] = b"setct-AcqCardCodeMsg\0";
pub const NID_setct_AcqCardCodeMsg: u32 = 540;
pub const SN_setct_AuthRevReqTBS: &[u8; 20usize] = b"setct-AuthRevReqTBS\0";
pub const NID_setct_AuthRevReqTBS: u32 = 541;
pub const SN_setct_AuthRevResData: &[u8; 21usize] = b"setct-AuthRevResData\0";
pub const NID_setct_AuthRevResData: u32 = 542;
pub const SN_setct_AuthRevResTBS: &[u8; 20usize] = b"setct-AuthRevResTBS\0";
pub const NID_setct_AuthRevResTBS: u32 = 543;
pub const SN_setct_CapReqTBS: &[u8; 16usize] = b"setct-CapReqTBS\0";
pub const NID_setct_CapReqTBS: u32 = 544;
pub const SN_setct_CapReqTBSX: &[u8; 17usize] = b"setct-CapReqTBSX\0";
pub const NID_setct_CapReqTBSX: u32 = 545;
pub const SN_setct_CapResData: &[u8; 17usize] = b"setct-CapResData\0";
pub const NID_setct_CapResData: u32 = 546;
pub const SN_setct_CapRevReqTBS: &[u8; 19usize] = b"setct-CapRevReqTBS\0";
pub const NID_setct_CapRevReqTBS: u32 = 547;
pub const SN_setct_CapRevReqTBSX: &[u8; 20usize] = b"setct-CapRevReqTBSX\0";
pub const NID_setct_CapRevReqTBSX: u32 = 548;
pub const SN_setct_CapRevResData: &[u8; 20usize] = b"setct-CapRevResData\0";
pub const NID_setct_CapRevResData: u32 = 549;
pub const SN_setct_CredReqTBS: &[u8; 17usize] = b"setct-CredReqTBS\0";
pub const NID_setct_CredReqTBS: u32 = 550;
pub const SN_setct_CredReqTBSX: &[u8; 18usize] = b"setct-CredReqTBSX\0";
pub const NID_setct_CredReqTBSX: u32 = 551;
pub const SN_setct_CredResData: &[u8; 18usize] = b"setct-CredResData\0";
pub const NID_setct_CredResData: u32 = 552;
pub const SN_setct_CredRevReqTBS: &[u8; 20usize] = b"setct-CredRevReqTBS\0";
pub const NID_setct_CredRevReqTBS: u32 = 553;
pub const SN_setct_CredRevReqTBSX: &[u8; 21usize] = b"setct-CredRevReqTBSX\0";
pub const NID_setct_CredRevReqTBSX: u32 = 554;
pub const SN_setct_CredRevResData: &[u8; 21usize] = b"setct-CredRevResData\0";
pub const NID_setct_CredRevResData: u32 = 555;
pub const SN_setct_PCertReqData: &[u8; 19usize] = b"setct-PCertReqData\0";
pub const NID_setct_PCertReqData: u32 = 556;
pub const SN_setct_PCertResTBS: &[u8; 18usize] = b"setct-PCertResTBS\0";
pub const NID_setct_PCertResTBS: u32 = 557;
pub const SN_setct_BatchAdminReqData: &[u8; 24usize] = b"setct-BatchAdminReqData\0";
pub const NID_setct_BatchAdminReqData: u32 = 558;
pub const SN_setct_BatchAdminResData: &[u8; 24usize] = b"setct-BatchAdminResData\0";
pub const NID_setct_BatchAdminResData: u32 = 559;
pub const SN_setct_CardCInitResTBS: &[u8; 22usize] = b"setct-CardCInitResTBS\0";
pub const NID_setct_CardCInitResTBS: u32 = 560;
pub const SN_setct_MeAqCInitResTBS: &[u8; 22usize] = b"setct-MeAqCInitResTBS\0";
pub const NID_setct_MeAqCInitResTBS: u32 = 561;
pub const SN_setct_RegFormResTBS: &[u8; 20usize] = b"setct-RegFormResTBS\0";
pub const NID_setct_RegFormResTBS: u32 = 562;
pub const SN_setct_CertReqData: &[u8; 18usize] = b"setct-CertReqData\0";
pub const NID_setct_CertReqData: u32 = 563;
pub const SN_setct_CertReqTBS: &[u8; 17usize] = b"setct-CertReqTBS\0";
pub const NID_setct_CertReqTBS: u32 = 564;
pub const SN_setct_CertResData: &[u8; 18usize] = b"setct-CertResData\0";
pub const NID_setct_CertResData: u32 = 565;
pub const SN_setct_CertInqReqTBS: &[u8; 20usize] = b"setct-CertInqReqTBS\0";
pub const NID_setct_CertInqReqTBS: u32 = 566;
pub const SN_setct_ErrorTBS: &[u8; 15usize] = b"setct-ErrorTBS\0";
pub const NID_setct_ErrorTBS: u32 = 567;
pub const SN_setct_PIDualSignedTBE: &[u8; 22usize] = b"setct-PIDualSignedTBE\0";
pub const NID_setct_PIDualSignedTBE: u32 = 568;
pub const SN_setct_PIUnsignedTBE: &[u8; 20usize] = b"setct-PIUnsignedTBE\0";
pub const NID_setct_PIUnsignedTBE: u32 = 569;
pub const SN_setct_AuthReqTBE: &[u8; 17usize] = b"setct-AuthReqTBE\0";
pub const NID_setct_AuthReqTBE: u32 = 570;
pub const SN_setct_AuthResTBE: &[u8; 17usize] = b"setct-AuthResTBE\0";
pub const NID_setct_AuthResTBE: u32 = 571;
pub const SN_setct_AuthResTBEX: &[u8; 18usize] = b"setct-AuthResTBEX\0";
pub const NID_setct_AuthResTBEX: u32 = 572;
pub const SN_setct_AuthTokenTBE: &[u8; 19usize] = b"setct-AuthTokenTBE\0";
pub const NID_setct_AuthTokenTBE: u32 = 573;
pub const SN_setct_CapTokenTBE: &[u8; 18usize] = b"setct-CapTokenTBE\0";
pub const NID_setct_CapTokenTBE: u32 = 574;
pub const SN_setct_CapTokenTBEX: &[u8; 19usize] = b"setct-CapTokenTBEX\0";
pub const NID_setct_CapTokenTBEX: u32 = 575;
pub const SN_setct_AcqCardCodeMsgTBE: &[u8; 24usize] = b"setct-AcqCardCodeMsgTBE\0";
pub const NID_setct_AcqCardCodeMsgTBE: u32 = 576;
pub const SN_setct_AuthRevReqTBE: &[u8; 20usize] = b"setct-AuthRevReqTBE\0";
pub const NID_setct_AuthRevReqTBE: u32 = 577;
pub const SN_setct_AuthRevResTBE: &[u8; 20usize] = b"setct-AuthRevResTBE\0";
pub const NID_setct_AuthRevResTBE: u32 = 578;
pub const SN_setct_AuthRevResTBEB: &[u8; 21usize] = b"setct-AuthRevResTBEB\0";
pub const NID_setct_AuthRevResTBEB: u32 = 579;
pub const SN_setct_CapReqTBE: &[u8; 16usize] = b"setct-CapReqTBE\0";
pub const NID_setct_CapReqTBE: u32 = 580;
pub const SN_setct_CapReqTBEX: &[u8; 17usize] = b"setct-CapReqTBEX\0";
pub const NID_setct_CapReqTBEX: u32 = 581;
pub const SN_setct_CapResTBE: &[u8; 16usize] = b"setct-CapResTBE\0";
pub const NID_setct_CapResTBE: u32 = 582;
pub const SN_setct_CapRevReqTBE: &[u8; 19usize] = b"setct-CapRevReqTBE\0";
pub const NID_setct_CapRevReqTBE: u32 = 583;
pub const SN_setct_CapRevReqTBEX: &[u8; 20usize] = b"setct-CapRevReqTBEX\0";
pub const NID_setct_CapRevReqTBEX: u32 = 584;
pub const SN_setct_CapRevResTBE: &[u8; 19usize] = b"setct-CapRevResTBE\0";
pub const NID_setct_CapRevResTBE: u32 = 585;
pub const SN_setct_CredReqTBE: &[u8; 17usize] = b"setct-CredReqTBE\0";
pub const NID_setct_CredReqTBE: u32 = 586;
pub const SN_setct_CredReqTBEX: &[u8; 18usize] = b"setct-CredReqTBEX\0";
pub const NID_setct_CredReqTBEX: u32 = 587;
pub const SN_setct_CredResTBE: &[u8; 17usize] = b"setct-CredResTBE\0";
pub const NID_setct_CredResTBE: u32 = 588;
pub const SN_setct_CredRevReqTBE: &[u8; 20usize] = b"setct-CredRevReqTBE\0";
pub const NID_setct_CredRevReqTBE: u32 = 589;
pub const SN_setct_CredRevReqTBEX: &[u8; 21usize] = b"setct-CredRevReqTBEX\0";
pub const NID_setct_CredRevReqTBEX: u32 = 590;
pub const SN_setct_CredRevResTBE: &[u8; 20usize] = b"setct-CredRevResTBE\0";
pub const NID_setct_CredRevResTBE: u32 = 591;
pub const SN_setct_BatchAdminReqTBE: &[u8; 23usize] = b"setct-BatchAdminReqTBE\0";
pub const NID_setct_BatchAdminReqTBE: u32 = 592;
pub const SN_setct_BatchAdminResTBE: &[u8; 23usize] = b"setct-BatchAdminResTBE\0";
pub const NID_setct_BatchAdminResTBE: u32 = 593;
pub const SN_setct_RegFormReqTBE: &[u8; 20usize] = b"setct-RegFormReqTBE\0";
pub const NID_setct_RegFormReqTBE: u32 = 594;
pub const SN_setct_CertReqTBE: &[u8; 17usize] = b"setct-CertReqTBE\0";
pub const NID_setct_CertReqTBE: u32 = 595;
pub const SN_setct_CertReqTBEX: &[u8; 18usize] = b"setct-CertReqTBEX\0";
pub const NID_setct_CertReqTBEX: u32 = 596;
pub const SN_setct_CertResTBE: &[u8; 17usize] = b"setct-CertResTBE\0";
pub const NID_setct_CertResTBE: u32 = 597;
pub const SN_setct_CRLNotificationTBS: &[u8; 25usize] = b"setct-CRLNotificationTBS\0";
pub const NID_setct_CRLNotificationTBS: u32 = 598;
pub const SN_setct_CRLNotificationResTBS: &[u8; 28usize] = b"setct-CRLNotificationResTBS\0";
pub const NID_setct_CRLNotificationResTBS: u32 = 599;
pub const SN_setct_BCIDistributionTBS: &[u8; 25usize] = b"setct-BCIDistributionTBS\0";
pub const NID_setct_BCIDistributionTBS: u32 = 600;
pub const SN_setext_genCrypt: &[u8; 16usize] = b"setext-genCrypt\0";
pub const LN_setext_genCrypt: &[u8; 19usize] = b"generic cryptogram\0";
pub const NID_setext_genCrypt: u32 = 601;
pub const SN_setext_miAuth: &[u8; 14usize] = b"setext-miAuth\0";
pub const LN_setext_miAuth: &[u8; 24usize] = b"merchant initiated auth\0";
pub const NID_setext_miAuth: u32 = 602;
pub const SN_setext_pinSecure: &[u8; 17usize] = b"setext-pinSecure\0";
pub const NID_setext_pinSecure: u32 = 603;
pub const SN_setext_pinAny: &[u8; 14usize] = b"setext-pinAny\0";
pub const NID_setext_pinAny: u32 = 604;
pub const SN_setext_track2: &[u8; 14usize] = b"setext-track2\0";
pub const NID_setext_track2: u32 = 605;
pub const SN_setext_cv: &[u8; 10usize] = b"setext-cv\0";
pub const LN_setext_cv: &[u8; 24usize] = b"additional verification\0";
pub const NID_setext_cv: u32 = 606;
pub const SN_set_policy_root: &[u8; 16usize] = b"set-policy-root\0";
pub const NID_set_policy_root: u32 = 607;
pub const SN_setCext_hashedRoot: &[u8; 19usize] = b"setCext-hashedRoot\0";
pub const NID_setCext_hashedRoot: u32 = 608;
pub const SN_setCext_certType: &[u8; 17usize] = b"setCext-certType\0";
pub const NID_setCext_certType: u32 = 609;
pub const SN_setCext_merchData: &[u8; 18usize] = b"setCext-merchData\0";
pub const NID_setCext_merchData: u32 = 610;
pub const SN_setCext_cCertRequired: &[u8; 22usize] = b"setCext-cCertRequired\0";
pub const NID_setCext_cCertRequired: u32 = 611;
pub const SN_setCext_tunneling: &[u8; 18usize] = b"setCext-tunneling\0";
pub const NID_setCext_tunneling: u32 = 612;
pub const SN_setCext_setExt: &[u8; 15usize] = b"setCext-setExt\0";
pub const NID_setCext_setExt: u32 = 613;
pub const SN_setCext_setQualf: &[u8; 17usize] = b"setCext-setQualf\0";
pub const NID_setCext_setQualf: u32 = 614;
pub const SN_setCext_PGWYcapabilities: &[u8; 25usize] = b"setCext-PGWYcapabilities\0";
pub const NID_setCext_PGWYcapabilities: u32 = 615;
pub const SN_setCext_TokenIdentifier: &[u8; 24usize] = b"setCext-TokenIdentifier\0";
pub const NID_setCext_TokenIdentifier: u32 = 616;
pub const SN_setCext_Track2Data: &[u8; 19usize] = b"setCext-Track2Data\0";
pub const NID_setCext_Track2Data: u32 = 617;
pub const SN_setCext_TokenType: &[u8; 18usize] = b"setCext-TokenType\0";
pub const NID_setCext_TokenType: u32 = 618;
pub const SN_setCext_IssuerCapabilities: &[u8; 27usize] = b"setCext-IssuerCapabilities\0";
pub const NID_setCext_IssuerCapabilities: u32 = 619;
pub const SN_setAttr_Cert: &[u8; 13usize] = b"setAttr-Cert\0";
pub const NID_setAttr_Cert: u32 = 620;
pub const SN_setAttr_PGWYcap: &[u8; 16usize] = b"setAttr-PGWYcap\0";
pub const LN_setAttr_PGWYcap: &[u8; 29usize] = b"payment gateway capabilities\0";
pub const NID_setAttr_PGWYcap: u32 = 621;
pub const SN_setAttr_TokenType: &[u8; 18usize] = b"setAttr-TokenType\0";
pub const NID_setAttr_TokenType: u32 = 622;
pub const SN_setAttr_IssCap: &[u8; 15usize] = b"setAttr-IssCap\0";
pub const LN_setAttr_IssCap: &[u8; 20usize] = b"issuer capabilities\0";
pub const NID_setAttr_IssCap: u32 = 623;
pub const SN_set_rootKeyThumb: &[u8; 17usize] = b"set-rootKeyThumb\0";
pub const NID_set_rootKeyThumb: u32 = 624;
pub const SN_set_addPolicy: &[u8; 14usize] = b"set-addPolicy\0";
pub const NID_set_addPolicy: u32 = 625;
pub const SN_setAttr_Token_EMV: &[u8; 18usize] = b"setAttr-Token-EMV\0";
pub const NID_setAttr_Token_EMV: u32 = 626;
pub const SN_setAttr_Token_B0Prime: &[u8; 22usize] = b"setAttr-Token-B0Prime\0";
pub const NID_setAttr_Token_B0Prime: u32 = 627;
pub const SN_setAttr_IssCap_CVM: &[u8; 19usize] = b"setAttr-IssCap-CVM\0";
pub const NID_setAttr_IssCap_CVM: u32 = 628;
pub const SN_setAttr_IssCap_T2: &[u8; 18usize] = b"setAttr-IssCap-T2\0";
pub const NID_setAttr_IssCap_T2: u32 = 629;
pub const SN_setAttr_IssCap_Sig: &[u8; 19usize] = b"setAttr-IssCap-Sig\0";
pub const NID_setAttr_IssCap_Sig: u32 = 630;
pub const SN_setAttr_GenCryptgrm: &[u8; 20usize] = b"setAttr-GenCryptgrm\0";
pub const LN_setAttr_GenCryptgrm: &[u8; 20usize] = b"generate cryptogram\0";
pub const NID_setAttr_GenCryptgrm: u32 = 631;
pub const SN_setAttr_T2Enc: &[u8; 14usize] = b"setAttr-T2Enc\0";
pub const LN_setAttr_T2Enc: &[u8; 18usize] = b"encrypted track 2\0";
pub const NID_setAttr_T2Enc: u32 = 632;
pub const SN_setAttr_T2cleartxt: &[u8; 19usize] = b"setAttr-T2cleartxt\0";
pub const LN_setAttr_T2cleartxt: &[u8; 18usize] = b"cleartext track 2\0";
pub const NID_setAttr_T2cleartxt: u32 = 633;
pub const SN_setAttr_TokICCsig: &[u8; 18usize] = b"setAttr-TokICCsig\0";
pub const LN_setAttr_TokICCsig: &[u8; 23usize] = b"ICC or token signature\0";
pub const NID_setAttr_TokICCsig: u32 = 634;
pub const SN_setAttr_SecDevSig: &[u8; 18usize] = b"setAttr-SecDevSig\0";
pub const LN_setAttr_SecDevSig: &[u8; 24usize] = b"secure device signature\0";
pub const NID_setAttr_SecDevSig: u32 = 635;
pub const SN_set_brand_IATA_ATA: &[u8; 19usize] = b"set-brand-IATA-ATA\0";
pub const NID_set_brand_IATA_ATA: u32 = 636;
pub const SN_set_brand_Diners: &[u8; 17usize] = b"set-brand-Diners\0";
pub const NID_set_brand_Diners: u32 = 637;
pub const SN_set_brand_AmericanExpress: &[u8; 26usize] = b"set-brand-AmericanExpress\0";
pub const NID_set_brand_AmericanExpress: u32 = 638;
pub const SN_set_brand_JCB: &[u8; 14usize] = b"set-brand-JCB\0";
pub const NID_set_brand_JCB: u32 = 639;
pub const SN_set_brand_Visa: &[u8; 15usize] = b"set-brand-Visa\0";
pub const NID_set_brand_Visa: u32 = 640;
pub const SN_set_brand_MasterCard: &[u8; 21usize] = b"set-brand-MasterCard\0";
pub const NID_set_brand_MasterCard: u32 = 641;
pub const SN_set_brand_Novus: &[u8; 16usize] = b"set-brand-Novus\0";
pub const NID_set_brand_Novus: u32 = 642;
pub const SN_des_cdmf: &[u8; 9usize] = b"DES-CDMF\0";
pub const LN_des_cdmf: &[u8; 9usize] = b"des-cdmf\0";
pub const NID_des_cdmf: u32 = 643;
pub const SN_rsaOAEPEncryptionSET: &[u8; 21usize] = b"rsaOAEPEncryptionSET\0";
pub const NID_rsaOAEPEncryptionSET: u32 = 644;
pub const SN_ipsec3: &[u8; 14usize] = b"Oakley-EC2N-3\0";
pub const LN_ipsec3: &[u8; 7usize] = b"ipsec3\0";
pub const NID_ipsec3: u32 = 749;
pub const SN_ipsec4: &[u8; 14usize] = b"Oakley-EC2N-4\0";
pub const LN_ipsec4: &[u8; 7usize] = b"ipsec4\0";
pub const NID_ipsec4: u32 = 750;
pub const SN_whirlpool: &[u8; 10usize] = b"whirlpool\0";
pub const NID_whirlpool: u32 = 804;
pub const SN_cryptopro: &[u8; 10usize] = b"cryptopro\0";
pub const NID_cryptopro: u32 = 805;
pub const SN_cryptocom: &[u8; 10usize] = b"cryptocom\0";
pub const NID_cryptocom: u32 = 806;
pub const SN_id_tc26: &[u8; 8usize] = b"id-tc26\0";
pub const NID_id_tc26: u32 = 974;
pub const SN_id_GostR3411_94_with_GostR3410_2001: &[u8; 36usize] =
    b"id-GostR3411-94-with-GostR3410-2001\0";
pub const LN_id_GostR3411_94_with_GostR3410_2001: &[u8; 39usize] =
    b"GOST R 34.11-94 with GOST R 34.10-2001\0";
pub const NID_id_GostR3411_94_with_GostR3410_2001: u32 = 807;
pub const SN_id_GostR3411_94_with_GostR3410_94: &[u8; 34usize] =
    b"id-GostR3411-94-with-GostR3410-94\0";
pub const LN_id_GostR3411_94_with_GostR3410_94: &[u8; 37usize] =
    b"GOST R 34.11-94 with GOST R 34.10-94\0";
pub const NID_id_GostR3411_94_with_GostR3410_94: u32 = 808;
pub const SN_id_GostR3411_94: &[u8; 10usize] = b"md_gost94\0";
pub const LN_id_GostR3411_94: &[u8; 16usize] = b"GOST R 34.11-94\0";
pub const NID_id_GostR3411_94: u32 = 809;
pub const SN_id_HMACGostR3411_94: &[u8; 20usize] = b"id-HMACGostR3411-94\0";
pub const LN_id_HMACGostR3411_94: &[u8; 19usize] = b"HMAC GOST 34.11-94\0";
pub const NID_id_HMACGostR3411_94: u32 = 810;
pub const SN_id_GostR3410_2001: &[u8; 9usize] = b"gost2001\0";
pub const LN_id_GostR3410_2001: &[u8; 18usize] = b"GOST R 34.10-2001\0";
pub const NID_id_GostR3410_2001: u32 = 811;
pub const SN_id_GostR3410_94: &[u8; 7usize] = b"gost94\0";
pub const LN_id_GostR3410_94: &[u8; 16usize] = b"GOST R 34.10-94\0";
pub const NID_id_GostR3410_94: u32 = 812;
pub const SN_id_Gost28147_89: &[u8; 7usize] = b"gost89\0";
pub const LN_id_Gost28147_89: &[u8; 14usize] = b"GOST 28147-89\0";
pub const NID_id_Gost28147_89: u32 = 813;
pub const SN_gost89_cnt: &[u8; 11usize] = b"gost89-cnt\0";
pub const NID_gost89_cnt: u32 = 814;
pub const SN_gost89_cnt_12: &[u8; 14usize] = b"gost89-cnt-12\0";
pub const NID_gost89_cnt_12: u32 = 975;
pub const SN_gost89_cbc: &[u8; 11usize] = b"gost89-cbc\0";
pub const NID_gost89_cbc: u32 = 1009;
pub const SN_gost89_ecb: &[u8; 11usize] = b"gost89-ecb\0";
pub const NID_gost89_ecb: u32 = 1010;
pub const SN_gost89_ctr: &[u8; 11usize] = b"gost89-ctr\0";
pub const NID_gost89_ctr: u32 = 1011;
pub const SN_id_Gost28147_89_MAC: &[u8; 9usize] = b"gost-mac\0";
pub const LN_id_Gost28147_89_MAC: &[u8; 18usize] = b"GOST 28147-89 MAC\0";
pub const NID_id_Gost28147_89_MAC: u32 = 815;
pub const SN_gost_mac_12: &[u8; 12usize] = b"gost-mac-12\0";
pub const NID_gost_mac_12: u32 = 976;
pub const SN_id_GostR3411_94_prf: &[u8; 17usize] = b"prf-gostr3411-94\0";
pub const LN_id_GostR3411_94_prf: &[u8; 20usize] = b"GOST R 34.11-94 PRF\0";
pub const NID_id_GostR3411_94_prf: u32 = 816;
pub const SN_id_GostR3410_2001DH: &[u8; 20usize] = b"id-GostR3410-2001DH\0";
pub const LN_id_GostR3410_2001DH: &[u8; 21usize] = b"GOST R 34.10-2001 DH\0";
pub const NID_id_GostR3410_2001DH: u32 = 817;
pub const SN_id_GostR3410_94DH: &[u8; 18usize] = b"id-GostR3410-94DH\0";
pub const LN_id_GostR3410_94DH: &[u8; 19usize] = b"GOST R 34.10-94 DH\0";
pub const NID_id_GostR3410_94DH: u32 = 818;
pub const SN_id_Gost28147_89_CryptoPro_KeyMeshing: &[u8; 37usize] =
    b"id-Gost28147-89-CryptoPro-KeyMeshing\0";
pub const NID_id_Gost28147_89_CryptoPro_KeyMeshing: u32 = 819;
pub const SN_id_Gost28147_89_None_KeyMeshing: &[u8; 32usize] = b"id-Gost28147-89-None-KeyMeshing\0";
pub const NID_id_Gost28147_89_None_KeyMeshing: u32 = 820;
pub const SN_id_GostR3411_94_TestParamSet: &[u8; 29usize] = b"id-GostR3411-94-TestParamSet\0";
pub const NID_id_GostR3411_94_TestParamSet: u32 = 821;
pub const SN_id_GostR3411_94_CryptoProParamSet: &[u8; 34usize] =
    b"id-GostR3411-94-CryptoProParamSet\0";
pub const NID_id_GostR3411_94_CryptoProParamSet: u32 = 822;
pub const SN_id_Gost28147_89_TestParamSet: &[u8; 29usize] = b"id-Gost28147-89-TestParamSet\0";
pub const NID_id_Gost28147_89_TestParamSet: u32 = 823;
pub const SN_id_Gost28147_89_CryptoPro_A_ParamSet: &[u8; 37usize] =
    b"id-Gost28147-89-CryptoPro-A-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_A_ParamSet: u32 = 824;
pub const SN_id_Gost28147_89_CryptoPro_B_ParamSet: &[u8; 37usize] =
    b"id-Gost28147-89-CryptoPro-B-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_B_ParamSet: u32 = 825;
pub const SN_id_Gost28147_89_CryptoPro_C_ParamSet: &[u8; 37usize] =
    b"id-Gost28147-89-CryptoPro-C-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_C_ParamSet: u32 = 826;
pub const SN_id_Gost28147_89_CryptoPro_D_ParamSet: &[u8; 37usize] =
    b"id-Gost28147-89-CryptoPro-D-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_D_ParamSet: u32 = 827;
pub const SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet: &[u8; 45usize] =
    b"id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet: u32 = 828;
pub const SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet: &[u8; 45usize] =
    b"id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet: u32 = 829;
pub const SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet: &[u8; 41usize] =
    b"id-Gost28147-89-CryptoPro-RIC-1-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet: u32 = 830;
pub const SN_id_GostR3410_94_TestParamSet: &[u8; 29usize] = b"id-GostR3410-94-TestParamSet\0";
pub const NID_id_GostR3410_94_TestParamSet: u32 = 831;
pub const SN_id_GostR3410_94_CryptoPro_A_ParamSet: &[u8; 37usize] =
    b"id-GostR3410-94-CryptoPro-A-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_A_ParamSet: u32 = 832;
pub const SN_id_GostR3410_94_CryptoPro_B_ParamSet: &[u8; 37usize] =
    b"id-GostR3410-94-CryptoPro-B-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_B_ParamSet: u32 = 833;
pub const SN_id_GostR3410_94_CryptoPro_C_ParamSet: &[u8; 37usize] =
    b"id-GostR3410-94-CryptoPro-C-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_C_ParamSet: u32 = 834;
pub const SN_id_GostR3410_94_CryptoPro_D_ParamSet: &[u8; 37usize] =
    b"id-GostR3410-94-CryptoPro-D-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_D_ParamSet: u32 = 835;
pub const SN_id_GostR3410_94_CryptoPro_XchA_ParamSet: &[u8; 40usize] =
    b"id-GostR3410-94-CryptoPro-XchA-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_XchA_ParamSet: u32 = 836;
pub const SN_id_GostR3410_94_CryptoPro_XchB_ParamSet: &[u8; 40usize] =
    b"id-GostR3410-94-CryptoPro-XchB-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_XchB_ParamSet: u32 = 837;
pub const SN_id_GostR3410_94_CryptoPro_XchC_ParamSet: &[u8; 40usize] =
    b"id-GostR3410-94-CryptoPro-XchC-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_XchC_ParamSet: u32 = 838;
pub const SN_id_GostR3410_2001_TestParamSet: &[u8; 31usize] = b"id-GostR3410-2001-TestParamSet\0";
pub const NID_id_GostR3410_2001_TestParamSet: u32 = 839;
pub const SN_id_GostR3410_2001_CryptoPro_A_ParamSet: &[u8; 39usize] =
    b"id-GostR3410-2001-CryptoPro-A-ParamSet\0";
pub const NID_id_GostR3410_2001_CryptoPro_A_ParamSet: u32 = 840;
pub const SN_id_GostR3410_2001_CryptoPro_B_ParamSet: &[u8; 39usize] =
    b"id-GostR3410-2001-CryptoPro-B-ParamSet\0";
pub const NID_id_GostR3410_2001_CryptoPro_B_ParamSet: u32 = 841;
pub const SN_id_GostR3410_2001_CryptoPro_C_ParamSet: &[u8; 39usize] =
    b"id-GostR3410-2001-CryptoPro-C-ParamSet\0";
pub const NID_id_GostR3410_2001_CryptoPro_C_ParamSet: u32 = 842;
pub const SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet: &[u8; 42usize] =
    b"id-GostR3410-2001-CryptoPro-XchA-ParamSet\0";
pub const NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet: u32 = 843;
pub const SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet: &[u8; 42usize] =
    b"id-GostR3410-2001-CryptoPro-XchB-ParamSet\0";
pub const NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet: u32 = 844;
pub const SN_id_GostR3410_94_a: &[u8; 18usize] = b"id-GostR3410-94-a\0";
pub const NID_id_GostR3410_94_a: u32 = 845;
pub const SN_id_GostR3410_94_aBis: &[u8; 21usize] = b"id-GostR3410-94-aBis\0";
pub const NID_id_GostR3410_94_aBis: u32 = 846;
pub const SN_id_GostR3410_94_b: &[u8; 18usize] = b"id-GostR3410-94-b\0";
pub const NID_id_GostR3410_94_b: u32 = 847;
pub const SN_id_GostR3410_94_bBis: &[u8; 21usize] = b"id-GostR3410-94-bBis\0";
pub const NID_id_GostR3410_94_bBis: u32 = 848;
pub const SN_id_Gost28147_89_cc: &[u8; 19usize] = b"id-Gost28147-89-cc\0";
pub const LN_id_Gost28147_89_cc: &[u8; 33usize] = b"GOST 28147-89 Cryptocom ParamSet\0";
pub const NID_id_Gost28147_89_cc: u32 = 849;
pub const SN_id_GostR3410_94_cc: &[u8; 9usize] = b"gost94cc\0";
pub const LN_id_GostR3410_94_cc: &[u8; 24usize] = b"GOST 34.10-94 Cryptocom\0";
pub const NID_id_GostR3410_94_cc: u32 = 850;
pub const SN_id_GostR3410_2001_cc: &[u8; 11usize] = b"gost2001cc\0";
pub const LN_id_GostR3410_2001_cc: &[u8; 26usize] = b"GOST 34.10-2001 Cryptocom\0";
pub const NID_id_GostR3410_2001_cc: u32 = 851;
pub const SN_id_GostR3411_94_with_GostR3410_94_cc: &[u8; 37usize] =
    b"id-GostR3411-94-with-GostR3410-94-cc\0";
pub const LN_id_GostR3411_94_with_GostR3410_94_cc: &[u8; 47usize] =
    b"GOST R 34.11-94 with GOST R 34.10-94 Cryptocom\0";
pub const NID_id_GostR3411_94_with_GostR3410_94_cc: u32 = 852;
pub const SN_id_GostR3411_94_with_GostR3410_2001_cc: &[u8; 39usize] =
    b"id-GostR3411-94-with-GostR3410-2001-cc\0";
pub const LN_id_GostR3411_94_with_GostR3410_2001_cc: &[u8; 49usize] =
    b"GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom\0";
pub const NID_id_GostR3411_94_with_GostR3410_2001_cc: u32 = 853;
pub const SN_id_GostR3410_2001_ParamSet_cc: &[u8; 30usize] = b"id-GostR3410-2001-ParamSet-cc\0";
pub const LN_id_GostR3410_2001_ParamSet_cc: &[u8; 41usize] =
    b"GOST R 3410-2001 Parameter Set Cryptocom\0";
pub const NID_id_GostR3410_2001_ParamSet_cc: u32 = 854;
pub const SN_id_tc26_algorithms: &[u8; 19usize] = b"id-tc26-algorithms\0";
pub const NID_id_tc26_algorithms: u32 = 977;
pub const SN_id_tc26_sign: &[u8; 13usize] = b"id-tc26-sign\0";
pub const NID_id_tc26_sign: u32 = 978;
pub const SN_id_GostR3410_2012_256: &[u8; 13usize] = b"gost2012_256\0";
pub const LN_id_GostR3410_2012_256: &[u8; 39usize] = b"GOST R 34.10-2012 with 256 bit modulus\0";
pub const NID_id_GostR3410_2012_256: u32 = 979;
pub const SN_id_GostR3410_2012_512: &[u8; 13usize] = b"gost2012_512\0";
pub const LN_id_GostR3410_2012_512: &[u8; 39usize] = b"GOST R 34.10-2012 with 512 bit modulus\0";
pub const NID_id_GostR3410_2012_512: u32 = 980;
pub const SN_id_tc26_digest: &[u8; 15usize] = b"id-tc26-digest\0";
pub const NID_id_tc26_digest: u32 = 981;
pub const SN_id_GostR3411_2012_256: &[u8; 14usize] = b"md_gost12_256\0";
pub const LN_id_GostR3411_2012_256: &[u8; 36usize] = b"GOST R 34.11-2012 with 256 bit hash\0";
pub const NID_id_GostR3411_2012_256: u32 = 982;
pub const SN_id_GostR3411_2012_512: &[u8; 14usize] = b"md_gost12_512\0";
pub const LN_id_GostR3411_2012_512: &[u8; 36usize] = b"GOST R 34.11-2012 with 512 bit hash\0";
pub const NID_id_GostR3411_2012_512: u32 = 983;
pub const SN_id_tc26_signwithdigest: &[u8; 23usize] = b"id-tc26-signwithdigest\0";
pub const NID_id_tc26_signwithdigest: u32 = 984;
pub const SN_id_tc26_signwithdigest_gost3410_2012_256: &[u8; 41usize] =
    b"id-tc26-signwithdigest-gost3410-2012-256\0";
pub const LN_id_tc26_signwithdigest_gost3410_2012_256: &[u8; 51usize] =
    b"GOST R 34.10-2012 with GOST R 34.11-2012 (256 bit)\0";
pub const NID_id_tc26_signwithdigest_gost3410_2012_256: u32 = 985;
pub const SN_id_tc26_signwithdigest_gost3410_2012_512: &[u8; 41usize] =
    b"id-tc26-signwithdigest-gost3410-2012-512\0";
pub const LN_id_tc26_signwithdigest_gost3410_2012_512: &[u8; 51usize] =
    b"GOST R 34.10-2012 with GOST R 34.11-2012 (512 bit)\0";
pub const NID_id_tc26_signwithdigest_gost3410_2012_512: u32 = 986;
pub const SN_id_tc26_mac: &[u8; 12usize] = b"id-tc26-mac\0";
pub const NID_id_tc26_mac: u32 = 987;
pub const SN_id_tc26_hmac_gost_3411_2012_256: &[u8; 32usize] = b"id-tc26-hmac-gost-3411-2012-256\0";
pub const LN_id_tc26_hmac_gost_3411_2012_256: &[u8; 29usize] = b"HMAC GOST 34.11-2012 256 bit\0";
pub const NID_id_tc26_hmac_gost_3411_2012_256: u32 = 988;
pub const SN_id_tc26_hmac_gost_3411_2012_512: &[u8; 32usize] = b"id-tc26-hmac-gost-3411-2012-512\0";
pub const LN_id_tc26_hmac_gost_3411_2012_512: &[u8; 29usize] = b"HMAC GOST 34.11-2012 512 bit\0";
pub const NID_id_tc26_hmac_gost_3411_2012_512: u32 = 989;
pub const SN_id_tc26_cipher: &[u8; 15usize] = b"id-tc26-cipher\0";
pub const NID_id_tc26_cipher: u32 = 990;
pub const SN_id_tc26_cipher_gostr3412_2015_magma: &[u8; 36usize] =
    b"id-tc26-cipher-gostr3412-2015-magma\0";
pub const NID_id_tc26_cipher_gostr3412_2015_magma: u32 = 1173;
pub const SN_magma_ctr_acpkm: &[u8; 16usize] = b"magma-ctr-acpkm\0";
pub const NID_magma_ctr_acpkm: u32 = 1174;
pub const SN_magma_ctr_acpkm_omac: &[u8; 21usize] = b"magma-ctr-acpkm-omac\0";
pub const NID_magma_ctr_acpkm_omac: u32 = 1175;
pub const SN_id_tc26_cipher_gostr3412_2015_kuznyechik: &[u8; 41usize] =
    b"id-tc26-cipher-gostr3412-2015-kuznyechik\0";
pub const NID_id_tc26_cipher_gostr3412_2015_kuznyechik: u32 = 1176;
pub const SN_kuznyechik_ctr_acpkm: &[u8; 21usize] = b"kuznyechik-ctr-acpkm\0";
pub const NID_kuznyechik_ctr_acpkm: u32 = 1177;
pub const SN_kuznyechik_ctr_acpkm_omac: &[u8; 26usize] = b"kuznyechik-ctr-acpkm-omac\0";
pub const NID_kuznyechik_ctr_acpkm_omac: u32 = 1178;
pub const SN_id_tc26_agreement: &[u8; 18usize] = b"id-tc26-agreement\0";
pub const NID_id_tc26_agreement: u32 = 991;
pub const SN_id_tc26_agreement_gost_3410_2012_256: &[u8; 37usize] =
    b"id-tc26-agreement-gost-3410-2012-256\0";
pub const NID_id_tc26_agreement_gost_3410_2012_256: u32 = 992;
pub const SN_id_tc26_agreement_gost_3410_2012_512: &[u8; 37usize] =
    b"id-tc26-agreement-gost-3410-2012-512\0";
pub const NID_id_tc26_agreement_gost_3410_2012_512: u32 = 993;
pub const SN_id_tc26_wrap: &[u8; 13usize] = b"id-tc26-wrap\0";
pub const NID_id_tc26_wrap: u32 = 1179;
pub const SN_id_tc26_wrap_gostr3412_2015_magma: &[u8; 34usize] =
    b"id-tc26-wrap-gostr3412-2015-magma\0";
pub const NID_id_tc26_wrap_gostr3412_2015_magma: u32 = 1180;
pub const SN_magma_kexp15: &[u8; 13usize] = b"magma-kexp15\0";
pub const NID_magma_kexp15: u32 = 1181;
pub const SN_id_tc26_wrap_gostr3412_2015_kuznyechik: &[u8; 39usize] =
    b"id-tc26-wrap-gostr3412-2015-kuznyechik\0";
pub const NID_id_tc26_wrap_gostr3412_2015_kuznyechik: u32 = 1182;
pub const SN_kuznyechik_kexp15: &[u8; 18usize] = b"kuznyechik-kexp15\0";
pub const NID_kuznyechik_kexp15: u32 = 1183;
pub const SN_id_tc26_constants: &[u8; 18usize] = b"id-tc26-constants\0";
pub const NID_id_tc26_constants: u32 = 994;
pub const SN_id_tc26_sign_constants: &[u8; 23usize] = b"id-tc26-sign-constants\0";
pub const NID_id_tc26_sign_constants: u32 = 995;
pub const SN_id_tc26_gost_3410_2012_256_constants: &[u8; 37usize] =
    b"id-tc26-gost-3410-2012-256-constants\0";
pub const NID_id_tc26_gost_3410_2012_256_constants: u32 = 1147;
pub const SN_id_tc26_gost_3410_2012_256_paramSetA: &[u8; 37usize] =
    b"id-tc26-gost-3410-2012-256-paramSetA\0";
pub const LN_id_tc26_gost_3410_2012_256_paramSetA: &[u8; 39usize] =
    b"GOST R 34.10-2012 (256 bit) ParamSet A\0";
pub const NID_id_tc26_gost_3410_2012_256_paramSetA: u32 = 1148;
pub const SN_id_tc26_gost_3410_2012_256_paramSetB: &[u8; 37usize] =
    b"id-tc26-gost-3410-2012-256-paramSetB\0";
pub const LN_id_tc26_gost_3410_2012_256_paramSetB: &[u8; 39usize] =
    b"GOST R 34.10-2012 (256 bit) ParamSet B\0";
pub const NID_id_tc26_gost_3410_2012_256_paramSetB: u32 = 1184;
pub const SN_id_tc26_gost_3410_2012_256_paramSetC: &[u8; 37usize] =
    b"id-tc26-gost-3410-2012-256-paramSetC\0";
pub const LN_id_tc26_gost_3410_2012_256_paramSetC: &[u8; 39usize] =
    b"GOST R 34.10-2012 (256 bit) ParamSet C\0";
pub const NID_id_tc26_gost_3410_2012_256_paramSetC: u32 = 1185;
pub const SN_id_tc26_gost_3410_2012_256_paramSetD: &[u8; 37usize] =
    b"id-tc26-gost-3410-2012-256-paramSetD\0";
pub const LN_id_tc26_gost_3410_2012_256_paramSetD: &[u8; 39usize] =
    b"GOST R 34.10-2012 (256 bit) ParamSet D\0";
pub const NID_id_tc26_gost_3410_2012_256_paramSetD: u32 = 1186;
pub const SN_id_tc26_gost_3410_2012_512_constants: &[u8; 37usize] =
    b"id-tc26-gost-3410-2012-512-constants\0";
pub const NID_id_tc26_gost_3410_2012_512_constants: u32 = 996;
pub const SN_id_tc26_gost_3410_2012_512_paramSetTest: &[u8; 40usize] =
    b"id-tc26-gost-3410-2012-512-paramSetTest\0";
pub const LN_id_tc26_gost_3410_2012_512_paramSetTest: &[u8; 50usize] =
    b"GOST R 34.10-2012 (512 bit) testing parameter set\0";
pub const NID_id_tc26_gost_3410_2012_512_paramSetTest: u32 = 997;
pub const SN_id_tc26_gost_3410_2012_512_paramSetA: &[u8; 37usize] =
    b"id-tc26-gost-3410-2012-512-paramSetA\0";
pub const LN_id_tc26_gost_3410_2012_512_paramSetA: &[u8; 39usize] =
    b"GOST R 34.10-2012 (512 bit) ParamSet A\0";
pub const NID_id_tc26_gost_3410_2012_512_paramSetA: u32 = 998;
pub const SN_id_tc26_gost_3410_2012_512_paramSetB: &[u8; 37usize] =
    b"id-tc26-gost-3410-2012-512-paramSetB\0";
pub const LN_id_tc26_gost_3410_2012_512_paramSetB: &[u8; 39usize] =
    b"GOST R 34.10-2012 (512 bit) ParamSet B\0";
pub const NID_id_tc26_gost_3410_2012_512_paramSetB: u32 = 999;
pub const SN_id_tc26_gost_3410_2012_512_paramSetC: &[u8; 37usize] =
    b"id-tc26-gost-3410-2012-512-paramSetC\0";
pub const LN_id_tc26_gost_3410_2012_512_paramSetC: &[u8; 39usize] =
    b"GOST R 34.10-2012 (512 bit) ParamSet C\0";
pub const NID_id_tc26_gost_3410_2012_512_paramSetC: u32 = 1149;
pub const SN_id_tc26_digest_constants: &[u8; 25usize] = b"id-tc26-digest-constants\0";
pub const NID_id_tc26_digest_constants: u32 = 1000;
pub const SN_id_tc26_cipher_constants: &[u8; 25usize] = b"id-tc26-cipher-constants\0";
pub const NID_id_tc26_cipher_constants: u32 = 1001;
pub const SN_id_tc26_gost_28147_constants: &[u8; 29usize] = b"id-tc26-gost-28147-constants\0";
pub const NID_id_tc26_gost_28147_constants: u32 = 1002;
pub const SN_id_tc26_gost_28147_param_Z: &[u8; 27usize] = b"id-tc26-gost-28147-param-Z\0";
pub const LN_id_tc26_gost_28147_param_Z: &[u8; 33usize] = b"GOST 28147-89 TC26 parameter set\0";
pub const NID_id_tc26_gost_28147_param_Z: u32 = 1003;
pub const SN_INN: &[u8; 4usize] = b"INN\0";
pub const LN_INN: &[u8; 4usize] = b"INN\0";
pub const NID_INN: u32 = 1004;
pub const SN_OGRN: &[u8; 5usize] = b"OGRN\0";
pub const LN_OGRN: &[u8; 5usize] = b"OGRN\0";
pub const NID_OGRN: u32 = 1005;
pub const SN_SNILS: &[u8; 6usize] = b"SNILS\0";
pub const LN_SNILS: &[u8; 6usize] = b"SNILS\0";
pub const NID_SNILS: u32 = 1006;
pub const SN_OGRNIP: &[u8; 7usize] = b"OGRNIP\0";
pub const LN_OGRNIP: &[u8; 7usize] = b"OGRNIP\0";
pub const NID_OGRNIP: u32 = 1226;
pub const SN_subjectSignTool: &[u8; 16usize] = b"subjectSignTool\0";
pub const LN_subjectSignTool: &[u8; 24usize] = b"Signing Tool of Subject\0";
pub const NID_subjectSignTool: u32 = 1007;
pub const SN_issuerSignTool: &[u8; 15usize] = b"issuerSignTool\0";
pub const LN_issuerSignTool: &[u8; 23usize] = b"Signing Tool of Issuer\0";
pub const NID_issuerSignTool: u32 = 1008;
pub const SN_classSignTool: &[u8; 14usize] = b"classSignTool\0";
pub const LN_classSignTool: &[u8; 22usize] = b"Class of Signing Tool\0";
pub const NID_classSignTool: u32 = 1227;
pub const SN_classSignToolKC1: &[u8; 17usize] = b"classSignToolKC1\0";
pub const LN_classSignToolKC1: &[u8; 26usize] = b"Class of Signing Tool KC1\0";
pub const NID_classSignToolKC1: u32 = 1228;
pub const SN_classSignToolKC2: &[u8; 17usize] = b"classSignToolKC2\0";
pub const LN_classSignToolKC2: &[u8; 26usize] = b"Class of Signing Tool KC2\0";
pub const NID_classSignToolKC2: u32 = 1229;
pub const SN_classSignToolKC3: &[u8; 17usize] = b"classSignToolKC3\0";
pub const LN_classSignToolKC3: &[u8; 26usize] = b"Class of Signing Tool KC3\0";
pub const NID_classSignToolKC3: u32 = 1230;
pub const SN_classSignToolKB1: &[u8; 17usize] = b"classSignToolKB1\0";
pub const LN_classSignToolKB1: &[u8; 26usize] = b"Class of Signing Tool KB1\0";
pub const NID_classSignToolKB1: u32 = 1231;
pub const SN_classSignToolKB2: &[u8; 17usize] = b"classSignToolKB2\0";
pub const LN_classSignToolKB2: &[u8; 26usize] = b"Class of Signing Tool KB2\0";
pub const NID_classSignToolKB2: u32 = 1232;
pub const SN_classSignToolKA1: &[u8; 17usize] = b"classSignToolKA1\0";
pub const LN_classSignToolKA1: &[u8; 26usize] = b"Class of Signing Tool KA1\0";
pub const NID_classSignToolKA1: u32 = 1233;
pub const SN_kuznyechik_ecb: &[u8; 15usize] = b"kuznyechik-ecb\0";
pub const NID_kuznyechik_ecb: u32 = 1012;
pub const SN_kuznyechik_ctr: &[u8; 15usize] = b"kuznyechik-ctr\0";
pub const NID_kuznyechik_ctr: u32 = 1013;
pub const SN_kuznyechik_ofb: &[u8; 15usize] = b"kuznyechik-ofb\0";
pub const NID_kuznyechik_ofb: u32 = 1014;
pub const SN_kuznyechik_cbc: &[u8; 15usize] = b"kuznyechik-cbc\0";
pub const NID_kuznyechik_cbc: u32 = 1015;
pub const SN_kuznyechik_cfb: &[u8; 15usize] = b"kuznyechik-cfb\0";
pub const NID_kuznyechik_cfb: u32 = 1016;
pub const SN_kuznyechik_mac: &[u8; 15usize] = b"kuznyechik-mac\0";
pub const NID_kuznyechik_mac: u32 = 1017;
pub const SN_magma_ecb: &[u8; 10usize] = b"magma-ecb\0";
pub const NID_magma_ecb: u32 = 1187;
pub const SN_magma_ctr: &[u8; 10usize] = b"magma-ctr\0";
pub const NID_magma_ctr: u32 = 1188;
pub const SN_magma_ofb: &[u8; 10usize] = b"magma-ofb\0";
pub const NID_magma_ofb: u32 = 1189;
pub const SN_magma_cbc: &[u8; 10usize] = b"magma-cbc\0";
pub const NID_magma_cbc: u32 = 1190;
pub const SN_magma_cfb: &[u8; 10usize] = b"magma-cfb\0";
pub const NID_magma_cfb: u32 = 1191;
pub const SN_magma_mac: &[u8; 10usize] = b"magma-mac\0";
pub const NID_magma_mac: u32 = 1192;
pub const SN_camellia_128_cbc: &[u8; 17usize] = b"CAMELLIA-128-CBC\0";
pub const LN_camellia_128_cbc: &[u8; 17usize] = b"camellia-128-cbc\0";
pub const NID_camellia_128_cbc: u32 = 751;
pub const SN_camellia_192_cbc: &[u8; 17usize] = b"CAMELLIA-192-CBC\0";
pub const LN_camellia_192_cbc: &[u8; 17usize] = b"camellia-192-cbc\0";
pub const NID_camellia_192_cbc: u32 = 752;
pub const SN_camellia_256_cbc: &[u8; 17usize] = b"CAMELLIA-256-CBC\0";
pub const LN_camellia_256_cbc: &[u8; 17usize] = b"camellia-256-cbc\0";
pub const NID_camellia_256_cbc: u32 = 753;
pub const SN_id_camellia128_wrap: &[u8; 20usize] = b"id-camellia128-wrap\0";
pub const NID_id_camellia128_wrap: u32 = 907;
pub const SN_id_camellia192_wrap: &[u8; 20usize] = b"id-camellia192-wrap\0";
pub const NID_id_camellia192_wrap: u32 = 908;
pub const SN_id_camellia256_wrap: &[u8; 20usize] = b"id-camellia256-wrap\0";
pub const NID_id_camellia256_wrap: u32 = 909;
pub const SN_camellia_128_ecb: &[u8; 17usize] = b"CAMELLIA-128-ECB\0";
pub const LN_camellia_128_ecb: &[u8; 17usize] = b"camellia-128-ecb\0";
pub const NID_camellia_128_ecb: u32 = 754;
pub const SN_camellia_128_ofb128: &[u8; 17usize] = b"CAMELLIA-128-OFB\0";
pub const LN_camellia_128_ofb128: &[u8; 17usize] = b"camellia-128-ofb\0";
pub const NID_camellia_128_ofb128: u32 = 766;
pub const SN_camellia_128_cfb128: &[u8; 17usize] = b"CAMELLIA-128-CFB\0";
pub const LN_camellia_128_cfb128: &[u8; 17usize] = b"camellia-128-cfb\0";
pub const NID_camellia_128_cfb128: u32 = 757;
pub const SN_camellia_128_gcm: &[u8; 17usize] = b"CAMELLIA-128-GCM\0";
pub const LN_camellia_128_gcm: &[u8; 17usize] = b"camellia-128-gcm\0";
pub const NID_camellia_128_gcm: u32 = 961;
pub const SN_camellia_128_ccm: &[u8; 17usize] = b"CAMELLIA-128-CCM\0";
pub const LN_camellia_128_ccm: &[u8; 17usize] = b"camellia-128-ccm\0";
pub const NID_camellia_128_ccm: u32 = 962;
pub const SN_camellia_128_ctr: &[u8; 17usize] = b"CAMELLIA-128-CTR\0";
pub const LN_camellia_128_ctr: &[u8; 17usize] = b"camellia-128-ctr\0";
pub const NID_camellia_128_ctr: u32 = 963;
pub const SN_camellia_128_cmac: &[u8; 18usize] = b"CAMELLIA-128-CMAC\0";
pub const LN_camellia_128_cmac: &[u8; 18usize] = b"camellia-128-cmac\0";
pub const NID_camellia_128_cmac: u32 = 964;
pub const SN_camellia_192_ecb: &[u8; 17usize] = b"CAMELLIA-192-ECB\0";
pub const LN_camellia_192_ecb: &[u8; 17usize] = b"camellia-192-ecb\0";
pub const NID_camellia_192_ecb: u32 = 755;
pub const SN_camellia_192_ofb128: &[u8; 17usize] = b"CAMELLIA-192-OFB\0";
pub const LN_camellia_192_ofb128: &[u8; 17usize] = b"camellia-192-ofb\0";
pub const NID_camellia_192_ofb128: u32 = 767;
pub const SN_camellia_192_cfb128: &[u8; 17usize] = b"CAMELLIA-192-CFB\0";
pub const LN_camellia_192_cfb128: &[u8; 17usize] = b"camellia-192-cfb\0";
pub const NID_camellia_192_cfb128: u32 = 758;
pub const SN_camellia_192_gcm: &[u8; 17usize] = b"CAMELLIA-192-GCM\0";
pub const LN_camellia_192_gcm: &[u8; 17usize] = b"camellia-192-gcm\0";
pub const NID_camellia_192_gcm: u32 = 965;
pub const SN_camellia_192_ccm: &[u8; 17usize] = b"CAMELLIA-192-CCM\0";
pub const LN_camellia_192_ccm: &[u8; 17usize] = b"camellia-192-ccm\0";
pub const NID_camellia_192_ccm: u32 = 966;
pub const SN_camellia_192_ctr: &[u8; 17usize] = b"CAMELLIA-192-CTR\0";
pub const LN_camellia_192_ctr: &[u8; 17usize] = b"camellia-192-ctr\0";
pub const NID_camellia_192_ctr: u32 = 967;
pub const SN_camellia_192_cmac: &[u8; 18usize] = b"CAMELLIA-192-CMAC\0";
pub const LN_camellia_192_cmac: &[u8; 18usize] = b"camellia-192-cmac\0";
pub const NID_camellia_192_cmac: u32 = 968;
pub const SN_camellia_256_ecb: &[u8; 17usize] = b"CAMELLIA-256-ECB\0";
pub const LN_camellia_256_ecb: &[u8; 17usize] = b"camellia-256-ecb\0";
pub const NID_camellia_256_ecb: u32 = 756;
pub const SN_camellia_256_ofb128: &[u8; 17usize] = b"CAMELLIA-256-OFB\0";
pub const LN_camellia_256_ofb128: &[u8; 17usize] = b"camellia-256-ofb\0";
pub const NID_camellia_256_ofb128: u32 = 768;
pub const SN_camellia_256_cfb128: &[u8; 17usize] = b"CAMELLIA-256-CFB\0";
pub const LN_camellia_256_cfb128: &[u8; 17usize] = b"camellia-256-cfb\0";
pub const NID_camellia_256_cfb128: u32 = 759;
pub const SN_camellia_256_gcm: &[u8; 17usize] = b"CAMELLIA-256-GCM\0";
pub const LN_camellia_256_gcm: &[u8; 17usize] = b"camellia-256-gcm\0";
pub const NID_camellia_256_gcm: u32 = 969;
pub const SN_camellia_256_ccm: &[u8; 17usize] = b"CAMELLIA-256-CCM\0";
pub const LN_camellia_256_ccm: &[u8; 17usize] = b"camellia-256-ccm\0";
pub const NID_camellia_256_ccm: u32 = 970;
pub const SN_camellia_256_ctr: &[u8; 17usize] = b"CAMELLIA-256-CTR\0";
pub const LN_camellia_256_ctr: &[u8; 17usize] = b"camellia-256-ctr\0";
pub const NID_camellia_256_ctr: u32 = 971;
pub const SN_camellia_256_cmac: &[u8; 18usize] = b"CAMELLIA-256-CMAC\0";
pub const LN_camellia_256_cmac: &[u8; 18usize] = b"camellia-256-cmac\0";
pub const NID_camellia_256_cmac: u32 = 972;
pub const SN_camellia_128_cfb1: &[u8; 18usize] = b"CAMELLIA-128-CFB1\0";
pub const LN_camellia_128_cfb1: &[u8; 18usize] = b"camellia-128-cfb1\0";
pub const NID_camellia_128_cfb1: u32 = 760;
pub const SN_camellia_192_cfb1: &[u8; 18usize] = b"CAMELLIA-192-CFB1\0";
pub const LN_camellia_192_cfb1: &[u8; 18usize] = b"camellia-192-cfb1\0";
pub const NID_camellia_192_cfb1: u32 = 761;
pub const SN_camellia_256_cfb1: &[u8; 18usize] = b"CAMELLIA-256-CFB1\0";
pub const LN_camellia_256_cfb1: &[u8; 18usize] = b"camellia-256-cfb1\0";
pub const NID_camellia_256_cfb1: u32 = 762;
pub const SN_camellia_128_cfb8: &[u8; 18usize] = b"CAMELLIA-128-CFB8\0";
pub const LN_camellia_128_cfb8: &[u8; 18usize] = b"camellia-128-cfb8\0";
pub const NID_camellia_128_cfb8: u32 = 763;
pub const SN_camellia_192_cfb8: &[u8; 18usize] = b"CAMELLIA-192-CFB8\0";
pub const LN_camellia_192_cfb8: &[u8; 18usize] = b"camellia-192-cfb8\0";
pub const NID_camellia_192_cfb8: u32 = 764;
pub const SN_camellia_256_cfb8: &[u8; 18usize] = b"CAMELLIA-256-CFB8\0";
pub const LN_camellia_256_cfb8: &[u8; 18usize] = b"camellia-256-cfb8\0";
pub const NID_camellia_256_cfb8: u32 = 765;
pub const SN_aria_128_ecb: &[u8; 13usize] = b"ARIA-128-ECB\0";
pub const LN_aria_128_ecb: &[u8; 13usize] = b"aria-128-ecb\0";
pub const NID_aria_128_ecb: u32 = 1065;
pub const SN_aria_128_cbc: &[u8; 13usize] = b"ARIA-128-CBC\0";
pub const LN_aria_128_cbc: &[u8; 13usize] = b"aria-128-cbc\0";
pub const NID_aria_128_cbc: u32 = 1066;
pub const SN_aria_128_cfb128: &[u8; 13usize] = b"ARIA-128-CFB\0";
pub const LN_aria_128_cfb128: &[u8; 13usize] = b"aria-128-cfb\0";
pub const NID_aria_128_cfb128: u32 = 1067;
pub const SN_aria_128_ofb128: &[u8; 13usize] = b"ARIA-128-OFB\0";
pub const LN_aria_128_ofb128: &[u8; 13usize] = b"aria-128-ofb\0";
pub const NID_aria_128_ofb128: u32 = 1068;
pub const SN_aria_128_ctr: &[u8; 13usize] = b"ARIA-128-CTR\0";
pub const LN_aria_128_ctr: &[u8; 13usize] = b"aria-128-ctr\0";
pub const NID_aria_128_ctr: u32 = 1069;
pub const SN_aria_192_ecb: &[u8; 13usize] = b"ARIA-192-ECB\0";
pub const LN_aria_192_ecb: &[u8; 13usize] = b"aria-192-ecb\0";
pub const NID_aria_192_ecb: u32 = 1070;
pub const SN_aria_192_cbc: &[u8; 13usize] = b"ARIA-192-CBC\0";
pub const LN_aria_192_cbc: &[u8; 13usize] = b"aria-192-cbc\0";
pub const NID_aria_192_cbc: u32 = 1071;
pub const SN_aria_192_cfb128: &[u8; 13usize] = b"ARIA-192-CFB\0";
pub const LN_aria_192_cfb128: &[u8; 13usize] = b"aria-192-cfb\0";
pub const NID_aria_192_cfb128: u32 = 1072;
pub const SN_aria_192_ofb128: &[u8; 13usize] = b"ARIA-192-OFB\0";
pub const LN_aria_192_ofb128: &[u8; 13usize] = b"aria-192-ofb\0";
pub const NID_aria_192_ofb128: u32 = 1073;
pub const SN_aria_192_ctr: &[u8; 13usize] = b"ARIA-192-CTR\0";
pub const LN_aria_192_ctr: &[u8; 13usize] = b"aria-192-ctr\0";
pub const NID_aria_192_ctr: u32 = 1074;
pub const SN_aria_256_ecb: &[u8; 13usize] = b"ARIA-256-ECB\0";
pub const LN_aria_256_ecb: &[u8; 13usize] = b"aria-256-ecb\0";
pub const NID_aria_256_ecb: u32 = 1075;
pub const SN_aria_256_cbc: &[u8; 13usize] = b"ARIA-256-CBC\0";
pub const LN_aria_256_cbc: &[u8; 13usize] = b"aria-256-cbc\0";
pub const NID_aria_256_cbc: u32 = 1076;
pub const SN_aria_256_cfb128: &[u8; 13usize] = b"ARIA-256-CFB\0";
pub const LN_aria_256_cfb128: &[u8; 13usize] = b"aria-256-cfb\0";
pub const NID_aria_256_cfb128: u32 = 1077;
pub const SN_aria_256_ofb128: &[u8; 13usize] = b"ARIA-256-OFB\0";
pub const LN_aria_256_ofb128: &[u8; 13usize] = b"aria-256-ofb\0";
pub const NID_aria_256_ofb128: u32 = 1078;
pub const SN_aria_256_ctr: &[u8; 13usize] = b"ARIA-256-CTR\0";
pub const LN_aria_256_ctr: &[u8; 13usize] = b"aria-256-ctr\0";
pub const NID_aria_256_ctr: u32 = 1079;
pub const SN_aria_128_cfb1: &[u8; 14usize] = b"ARIA-128-CFB1\0";
pub const LN_aria_128_cfb1: &[u8; 14usize] = b"aria-128-cfb1\0";
pub const NID_aria_128_cfb1: u32 = 1080;
pub const SN_aria_192_cfb1: &[u8; 14usize] = b"ARIA-192-CFB1\0";
pub const LN_aria_192_cfb1: &[u8; 14usize] = b"aria-192-cfb1\0";
pub const NID_aria_192_cfb1: u32 = 1081;
pub const SN_aria_256_cfb1: &[u8; 14usize] = b"ARIA-256-CFB1\0";
pub const LN_aria_256_cfb1: &[u8; 14usize] = b"aria-256-cfb1\0";
pub const NID_aria_256_cfb1: u32 = 1082;
pub const SN_aria_128_cfb8: &[u8; 14usize] = b"ARIA-128-CFB8\0";
pub const LN_aria_128_cfb8: &[u8; 14usize] = b"aria-128-cfb8\0";
pub const NID_aria_128_cfb8: u32 = 1083;
pub const SN_aria_192_cfb8: &[u8; 14usize] = b"ARIA-192-CFB8\0";
pub const LN_aria_192_cfb8: &[u8; 14usize] = b"aria-192-cfb8\0";
pub const NID_aria_192_cfb8: u32 = 1084;
pub const SN_aria_256_cfb8: &[u8; 14usize] = b"ARIA-256-CFB8\0";
pub const LN_aria_256_cfb8: &[u8; 14usize] = b"aria-256-cfb8\0";
pub const NID_aria_256_cfb8: u32 = 1085;
pub const SN_aria_128_ccm: &[u8; 13usize] = b"ARIA-128-CCM\0";
pub const LN_aria_128_ccm: &[u8; 13usize] = b"aria-128-ccm\0";
pub const NID_aria_128_ccm: u32 = 1120;
pub const SN_aria_192_ccm: &[u8; 13usize] = b"ARIA-192-CCM\0";
pub const LN_aria_192_ccm: &[u8; 13usize] = b"aria-192-ccm\0";
pub const NID_aria_192_ccm: u32 = 1121;
pub const SN_aria_256_ccm: &[u8; 13usize] = b"ARIA-256-CCM\0";
pub const LN_aria_256_ccm: &[u8; 13usize] = b"aria-256-ccm\0";
pub const NID_aria_256_ccm: u32 = 1122;
pub const SN_aria_128_gcm: &[u8; 13usize] = b"ARIA-128-GCM\0";
pub const LN_aria_128_gcm: &[u8; 13usize] = b"aria-128-gcm\0";
pub const NID_aria_128_gcm: u32 = 1123;
pub const SN_aria_192_gcm: &[u8; 13usize] = b"ARIA-192-GCM\0";
pub const LN_aria_192_gcm: &[u8; 13usize] = b"aria-192-gcm\0";
pub const NID_aria_192_gcm: u32 = 1124;
pub const SN_aria_256_gcm: &[u8; 13usize] = b"ARIA-256-GCM\0";
pub const LN_aria_256_gcm: &[u8; 13usize] = b"aria-256-gcm\0";
pub const NID_aria_256_gcm: u32 = 1125;
pub const SN_kisa: &[u8; 5usize] = b"KISA\0";
pub const LN_kisa: &[u8; 5usize] = b"kisa\0";
pub const NID_kisa: u32 = 773;
pub const SN_seed_ecb: &[u8; 9usize] = b"SEED-ECB\0";
pub const LN_seed_ecb: &[u8; 9usize] = b"seed-ecb\0";
pub const NID_seed_ecb: u32 = 776;
pub const SN_seed_cbc: &[u8; 9usize] = b"SEED-CBC\0";
pub const LN_seed_cbc: &[u8; 9usize] = b"seed-cbc\0";
pub const NID_seed_cbc: u32 = 777;
pub const SN_seed_cfb128: &[u8; 9usize] = b"SEED-CFB\0";
pub const LN_seed_cfb128: &[u8; 9usize] = b"seed-cfb\0";
pub const NID_seed_cfb128: u32 = 779;
pub const SN_seed_ofb128: &[u8; 9usize] = b"SEED-OFB\0";
pub const LN_seed_ofb128: &[u8; 9usize] = b"seed-ofb\0";
pub const NID_seed_ofb128: u32 = 778;
pub const SN_sm4_ecb: &[u8; 8usize] = b"SM4-ECB\0";
pub const LN_sm4_ecb: &[u8; 8usize] = b"sm4-ecb\0";
pub const NID_sm4_ecb: u32 = 1133;
pub const SN_sm4_cbc: &[u8; 8usize] = b"SM4-CBC\0";
pub const LN_sm4_cbc: &[u8; 8usize] = b"sm4-cbc\0";
pub const NID_sm4_cbc: u32 = 1134;
pub const SN_sm4_ofb128: &[u8; 8usize] = b"SM4-OFB\0";
pub const LN_sm4_ofb128: &[u8; 8usize] = b"sm4-ofb\0";
pub const NID_sm4_ofb128: u32 = 1135;
pub const SN_sm4_cfb128: &[u8; 8usize] = b"SM4-CFB\0";
pub const LN_sm4_cfb128: &[u8; 8usize] = b"sm4-cfb\0";
pub const NID_sm4_cfb128: u32 = 1137;
pub const SN_sm4_cfb1: &[u8; 9usize] = b"SM4-CFB1\0";
pub const LN_sm4_cfb1: &[u8; 9usize] = b"sm4-cfb1\0";
pub const NID_sm4_cfb1: u32 = 1136;
pub const SN_sm4_cfb8: &[u8; 9usize] = b"SM4-CFB8\0";
pub const LN_sm4_cfb8: &[u8; 9usize] = b"sm4-cfb8\0";
pub const NID_sm4_cfb8: u32 = 1138;
pub const SN_sm4_ctr: &[u8; 8usize] = b"SM4-CTR\0";
pub const LN_sm4_ctr: &[u8; 8usize] = b"sm4-ctr\0";
pub const NID_sm4_ctr: u32 = 1139;
pub const SN_hmac: &[u8; 5usize] = b"HMAC\0";
pub const LN_hmac: &[u8; 5usize] = b"hmac\0";
pub const NID_hmac: u32 = 855;
pub const SN_cmac: &[u8; 5usize] = b"CMAC\0";
pub const LN_cmac: &[u8; 5usize] = b"cmac\0";
pub const NID_cmac: u32 = 894;
pub const SN_rc4_hmac_md5: &[u8; 13usize] = b"RC4-HMAC-MD5\0";
pub const LN_rc4_hmac_md5: &[u8; 13usize] = b"rc4-hmac-md5\0";
pub const NID_rc4_hmac_md5: u32 = 915;
pub const SN_aes_128_cbc_hmac_sha1: &[u8; 22usize] = b"AES-128-CBC-HMAC-SHA1\0";
pub const LN_aes_128_cbc_hmac_sha1: &[u8; 22usize] = b"aes-128-cbc-hmac-sha1\0";
pub const NID_aes_128_cbc_hmac_sha1: u32 = 916;
pub const SN_aes_192_cbc_hmac_sha1: &[u8; 22usize] = b"AES-192-CBC-HMAC-SHA1\0";
pub const LN_aes_192_cbc_hmac_sha1: &[u8; 22usize] = b"aes-192-cbc-hmac-sha1\0";
pub const NID_aes_192_cbc_hmac_sha1: u32 = 917;
pub const SN_aes_256_cbc_hmac_sha1: &[u8; 22usize] = b"AES-256-CBC-HMAC-SHA1\0";
pub const LN_aes_256_cbc_hmac_sha1: &[u8; 22usize] = b"aes-256-cbc-hmac-sha1\0";
pub const NID_aes_256_cbc_hmac_sha1: u32 = 918;
pub const SN_aes_128_cbc_hmac_sha256: &[u8; 24usize] = b"AES-128-CBC-HMAC-SHA256\0";
pub const LN_aes_128_cbc_hmac_sha256: &[u8; 24usize] = b"aes-128-cbc-hmac-sha256\0";
pub const NID_aes_128_cbc_hmac_sha256: u32 = 948;
pub const SN_aes_192_cbc_hmac_sha256: &[u8; 24usize] = b"AES-192-CBC-HMAC-SHA256\0";
pub const LN_aes_192_cbc_hmac_sha256: &[u8; 24usize] = b"aes-192-cbc-hmac-sha256\0";
pub const NID_aes_192_cbc_hmac_sha256: u32 = 949;
pub const SN_aes_256_cbc_hmac_sha256: &[u8; 24usize] = b"AES-256-CBC-HMAC-SHA256\0";
pub const LN_aes_256_cbc_hmac_sha256: &[u8; 24usize] = b"aes-256-cbc-hmac-sha256\0";
pub const NID_aes_256_cbc_hmac_sha256: u32 = 950;
pub const SN_chacha20_poly1305: &[u8; 18usize] = b"ChaCha20-Poly1305\0";
pub const LN_chacha20_poly1305: &[u8; 18usize] = b"chacha20-poly1305\0";
pub const NID_chacha20_poly1305: u32 = 1018;
pub const SN_chacha20: &[u8; 9usize] = b"ChaCha20\0";
pub const LN_chacha20: &[u8; 9usize] = b"chacha20\0";
pub const NID_chacha20: u32 = 1019;
pub const SN_dhpublicnumber: &[u8; 15usize] = b"dhpublicnumber\0";
pub const LN_dhpublicnumber: &[u8; 9usize] = b"X9.42 DH\0";
pub const NID_dhpublicnumber: u32 = 920;
pub const SN_brainpoolP160r1: &[u8; 16usize] = b"brainpoolP160r1\0";
pub const NID_brainpoolP160r1: u32 = 921;
pub const SN_brainpoolP160t1: &[u8; 16usize] = b"brainpoolP160t1\0";
pub const NID_brainpoolP160t1: u32 = 922;
pub const SN_brainpoolP192r1: &[u8; 16usize] = b"brainpoolP192r1\0";
pub const NID_brainpoolP192r1: u32 = 923;
pub const SN_brainpoolP192t1: &[u8; 16usize] = b"brainpoolP192t1\0";
pub const NID_brainpoolP192t1: u32 = 924;
pub const SN_brainpoolP224r1: &[u8; 16usize] = b"brainpoolP224r1\0";
pub const NID_brainpoolP224r1: u32 = 925;
pub const SN_brainpoolP224t1: &[u8; 16usize] = b"brainpoolP224t1\0";
pub const NID_brainpoolP224t1: u32 = 926;
pub const SN_brainpoolP256r1: &[u8; 16usize] = b"brainpoolP256r1\0";
pub const NID_brainpoolP256r1: u32 = 927;
pub const SN_brainpoolP256t1: &[u8; 16usize] = b"brainpoolP256t1\0";
pub const NID_brainpoolP256t1: u32 = 928;
pub const SN_brainpoolP320r1: &[u8; 16usize] = b"brainpoolP320r1\0";
pub const NID_brainpoolP320r1: u32 = 929;
pub const SN_brainpoolP320t1: &[u8; 16usize] = b"brainpoolP320t1\0";
pub const NID_brainpoolP320t1: u32 = 930;
pub const SN_brainpoolP384r1: &[u8; 16usize] = b"brainpoolP384r1\0";
pub const NID_brainpoolP384r1: u32 = 931;
pub const SN_brainpoolP384t1: &[u8; 16usize] = b"brainpoolP384t1\0";
pub const NID_brainpoolP384t1: u32 = 932;
pub const SN_brainpoolP512r1: &[u8; 16usize] = b"brainpoolP512r1\0";
pub const NID_brainpoolP512r1: u32 = 933;
pub const SN_brainpoolP512t1: &[u8; 16usize] = b"brainpoolP512t1\0";
pub const NID_brainpoolP512t1: u32 = 934;
pub const SN_dhSinglePass_stdDH_sha1kdf_scheme: &[u8; 34usize] =
    b"dhSinglePass-stdDH-sha1kdf-scheme\0";
pub const NID_dhSinglePass_stdDH_sha1kdf_scheme: u32 = 936;
pub const SN_dhSinglePass_stdDH_sha224kdf_scheme: &[u8; 36usize] =
    b"dhSinglePass-stdDH-sha224kdf-scheme\0";
pub const NID_dhSinglePass_stdDH_sha224kdf_scheme: u32 = 937;
pub const SN_dhSinglePass_stdDH_sha256kdf_scheme: &[u8; 36usize] =
    b"dhSinglePass-stdDH-sha256kdf-scheme\0";
pub const NID_dhSinglePass_stdDH_sha256kdf_scheme: u32 = 938;
pub const SN_dhSinglePass_stdDH_sha384kdf_scheme: &[u8; 36usize] =
    b"dhSinglePass-stdDH-sha384kdf-scheme\0";
pub const NID_dhSinglePass_stdDH_sha384kdf_scheme: u32 = 939;
pub const SN_dhSinglePass_stdDH_sha512kdf_scheme: &[u8; 36usize] =
    b"dhSinglePass-stdDH-sha512kdf-scheme\0";
pub const NID_dhSinglePass_stdDH_sha512kdf_scheme: u32 = 940;
pub const SN_dhSinglePass_cofactorDH_sha1kdf_scheme: &[u8; 39usize] =
    b"dhSinglePass-cofactorDH-sha1kdf-scheme\0";
pub const NID_dhSinglePass_cofactorDH_sha1kdf_scheme: u32 = 941;
pub const SN_dhSinglePass_cofactorDH_sha224kdf_scheme: &[u8; 41usize] =
    b"dhSinglePass-cofactorDH-sha224kdf-scheme\0";
pub const NID_dhSinglePass_cofactorDH_sha224kdf_scheme: u32 = 942;
pub const SN_dhSinglePass_cofactorDH_sha256kdf_scheme: &[u8; 41usize] =
    b"dhSinglePass-cofactorDH-sha256kdf-scheme\0";
pub const NID_dhSinglePass_cofactorDH_sha256kdf_scheme: u32 = 943;
pub const SN_dhSinglePass_cofactorDH_sha384kdf_scheme: &[u8; 41usize] =
    b"dhSinglePass-cofactorDH-sha384kdf-scheme\0";
pub const NID_dhSinglePass_cofactorDH_sha384kdf_scheme: u32 = 944;
pub const SN_dhSinglePass_cofactorDH_sha512kdf_scheme: &[u8; 41usize] =
    b"dhSinglePass-cofactorDH-sha512kdf-scheme\0";
pub const NID_dhSinglePass_cofactorDH_sha512kdf_scheme: u32 = 945;
pub const SN_dh_std_kdf: &[u8; 11usize] = b"dh-std-kdf\0";
pub const NID_dh_std_kdf: u32 = 946;
pub const SN_dh_cofactor_kdf: &[u8; 16usize] = b"dh-cofactor-kdf\0";
pub const NID_dh_cofactor_kdf: u32 = 947;
pub const SN_ct_precert_scts: &[u8; 16usize] = b"ct_precert_scts\0";
pub const LN_ct_precert_scts: &[u8; 23usize] = b"CT Precertificate SCTs\0";
pub const NID_ct_precert_scts: u32 = 951;
pub const SN_ct_precert_poison: &[u8; 18usize] = b"ct_precert_poison\0";
pub const LN_ct_precert_poison: &[u8; 25usize] = b"CT Precertificate Poison\0";
pub const NID_ct_precert_poison: u32 = 952;
pub const SN_ct_precert_signer: &[u8; 18usize] = b"ct_precert_signer\0";
pub const LN_ct_precert_signer: &[u8; 25usize] = b"CT Precertificate Signer\0";
pub const NID_ct_precert_signer: u32 = 953;
pub const SN_ct_cert_scts: &[u8; 13usize] = b"ct_cert_scts\0";
pub const LN_ct_cert_scts: &[u8; 20usize] = b"CT Certificate SCTs\0";
pub const NID_ct_cert_scts: u32 = 954;
pub const SN_jurisdictionLocalityName: &[u8; 14usize] = b"jurisdictionL\0";
pub const LN_jurisdictionLocalityName: &[u8; 25usize] = b"jurisdictionLocalityName\0";
pub const NID_jurisdictionLocalityName: u32 = 955;
pub const SN_jurisdictionStateOrProvinceName: &[u8; 15usize] = b"jurisdictionST\0";
pub const LN_jurisdictionStateOrProvinceName: &[u8; 32usize] = b"jurisdictionStateOrProvinceName\0";
pub const NID_jurisdictionStateOrProvinceName: u32 = 956;
pub const SN_jurisdictionCountryName: &[u8; 14usize] = b"jurisdictionC\0";
pub const LN_jurisdictionCountryName: &[u8; 24usize] = b"jurisdictionCountryName\0";
pub const NID_jurisdictionCountryName: u32 = 957;
pub const SN_id_scrypt: &[u8; 10usize] = b"id-scrypt\0";
pub const LN_id_scrypt: &[u8; 7usize] = b"scrypt\0";
pub const NID_id_scrypt: u32 = 973;
pub const SN_tls1_prf: &[u8; 9usize] = b"TLS1-PRF\0";
pub const LN_tls1_prf: &[u8; 9usize] = b"tls1-prf\0";
pub const NID_tls1_prf: u32 = 1021;
pub const SN_hkdf: &[u8; 5usize] = b"HKDF\0";
pub const LN_hkdf: &[u8; 5usize] = b"hkdf\0";
pub const NID_hkdf: u32 = 1036;
pub const SN_sshkdf: &[u8; 7usize] = b"SSHKDF\0";
pub const LN_sshkdf: &[u8; 7usize] = b"sshkdf\0";
pub const NID_sshkdf: u32 = 1203;
pub const SN_sskdf: &[u8; 6usize] = b"SSKDF\0";
pub const LN_sskdf: &[u8; 6usize] = b"sskdf\0";
pub const NID_sskdf: u32 = 1205;
pub const SN_x942kdf: &[u8; 8usize] = b"X942KDF\0";
pub const LN_x942kdf: &[u8; 8usize] = b"x942kdf\0";
pub const NID_x942kdf: u32 = 1207;
pub const SN_x963kdf: &[u8; 8usize] = b"X963KDF\0";
pub const LN_x963kdf: &[u8; 8usize] = b"x963kdf\0";
pub const NID_x963kdf: u32 = 1206;
pub const SN_id_pkinit: &[u8; 10usize] = b"id-pkinit\0";
pub const NID_id_pkinit: u32 = 1031;
pub const SN_pkInitClientAuth: &[u8; 17usize] = b"pkInitClientAuth\0";
pub const LN_pkInitClientAuth: &[u8; 19usize] = b"PKINIT Client Auth\0";
pub const NID_pkInitClientAuth: u32 = 1032;
pub const SN_pkInitKDC: &[u8; 10usize] = b"pkInitKDC\0";
pub const LN_pkInitKDC: &[u8; 21usize] = b"Signing KDC Response\0";
pub const NID_pkInitKDC: u32 = 1033;
pub const SN_X25519: &[u8; 7usize] = b"X25519\0";
pub const NID_X25519: u32 = 1034;
pub const SN_X448: &[u8; 5usize] = b"X448\0";
pub const NID_X448: u32 = 1035;
pub const SN_ED25519: &[u8; 8usize] = b"ED25519\0";
pub const NID_ED25519: u32 = 1087;
pub const SN_ED448: &[u8; 6usize] = b"ED448\0";
pub const NID_ED448: u32 = 1088;
pub const SN_kx_rsa: &[u8; 6usize] = b"KxRSA\0";
pub const LN_kx_rsa: &[u8; 7usize] = b"kx-rsa\0";
pub const NID_kx_rsa: u32 = 1037;
pub const SN_kx_ecdhe: &[u8; 8usize] = b"KxECDHE\0";
pub const LN_kx_ecdhe: &[u8; 9usize] = b"kx-ecdhe\0";
pub const NID_kx_ecdhe: u32 = 1038;
pub const SN_kx_dhe: &[u8; 6usize] = b"KxDHE\0";
pub const LN_kx_dhe: &[u8; 7usize] = b"kx-dhe\0";
pub const NID_kx_dhe: u32 = 1039;
pub const SN_kx_ecdhe_psk: &[u8; 12usize] = b"KxECDHE-PSK\0";
pub const LN_kx_ecdhe_psk: &[u8; 13usize] = b"kx-ecdhe-psk\0";
pub const NID_kx_ecdhe_psk: u32 = 1040;
pub const SN_kx_dhe_psk: &[u8; 10usize] = b"KxDHE-PSK\0";
pub const LN_kx_dhe_psk: &[u8; 11usize] = b"kx-dhe-psk\0";
pub const NID_kx_dhe_psk: u32 = 1041;
pub const SN_kx_rsa_psk: &[u8; 10usize] = b"KxRSA_PSK\0";
pub const LN_kx_rsa_psk: &[u8; 11usize] = b"kx-rsa-psk\0";
pub const NID_kx_rsa_psk: u32 = 1042;
pub const SN_kx_psk: &[u8; 6usize] = b"KxPSK\0";
pub const LN_kx_psk: &[u8; 7usize] = b"kx-psk\0";
pub const NID_kx_psk: u32 = 1043;
pub const SN_kx_srp: &[u8; 6usize] = b"KxSRP\0";
pub const LN_kx_srp: &[u8; 7usize] = b"kx-srp\0";
pub const NID_kx_srp: u32 = 1044;
pub const SN_kx_gost: &[u8; 7usize] = b"KxGOST\0";
pub const LN_kx_gost: &[u8; 8usize] = b"kx-gost\0";
pub const NID_kx_gost: u32 = 1045;
pub const SN_kx_gost18: &[u8; 9usize] = b"KxGOST18\0";
pub const LN_kx_gost18: &[u8; 10usize] = b"kx-gost18\0";
pub const NID_kx_gost18: u32 = 1218;
pub const SN_kx_any: &[u8; 6usize] = b"KxANY\0";
pub const LN_kx_any: &[u8; 7usize] = b"kx-any\0";
pub const NID_kx_any: u32 = 1063;
pub const SN_auth_rsa: &[u8; 8usize] = b"AuthRSA\0";
pub const LN_auth_rsa: &[u8; 9usize] = b"auth-rsa\0";
pub const NID_auth_rsa: u32 = 1046;
pub const SN_auth_ecdsa: &[u8; 10usize] = b"AuthECDSA\0";
pub const LN_auth_ecdsa: &[u8; 11usize] = b"auth-ecdsa\0";
pub const NID_auth_ecdsa: u32 = 1047;
pub const SN_auth_psk: &[u8; 8usize] = b"AuthPSK\0";
pub const LN_auth_psk: &[u8; 9usize] = b"auth-psk\0";
pub const NID_auth_psk: u32 = 1048;
pub const SN_auth_dss: &[u8; 8usize] = b"AuthDSS\0";
pub const LN_auth_dss: &[u8; 9usize] = b"auth-dss\0";
pub const NID_auth_dss: u32 = 1049;
pub const SN_auth_gost01: &[u8; 11usize] = b"AuthGOST01\0";
pub const LN_auth_gost01: &[u8; 12usize] = b"auth-gost01\0";
pub const NID_auth_gost01: u32 = 1050;
pub const SN_auth_gost12: &[u8; 11usize] = b"AuthGOST12\0";
pub const LN_auth_gost12: &[u8; 12usize] = b"auth-gost12\0";
pub const NID_auth_gost12: u32 = 1051;
pub const SN_auth_srp: &[u8; 8usize] = b"AuthSRP\0";
pub const LN_auth_srp: &[u8; 9usize] = b"auth-srp\0";
pub const NID_auth_srp: u32 = 1052;
pub const SN_auth_null: &[u8; 9usize] = b"AuthNULL\0";
pub const LN_auth_null: &[u8; 10usize] = b"auth-null\0";
pub const NID_auth_null: u32 = 1053;
pub const SN_auth_any: &[u8; 8usize] = b"AuthANY\0";
pub const LN_auth_any: &[u8; 9usize] = b"auth-any\0";
pub const NID_auth_any: u32 = 1064;
pub const SN_poly1305: &[u8; 9usize] = b"Poly1305\0";
pub const LN_poly1305: &[u8; 9usize] = b"poly1305\0";
pub const NID_poly1305: u32 = 1061;
pub const SN_siphash: &[u8; 8usize] = b"SipHash\0";
pub const LN_siphash: &[u8; 8usize] = b"siphash\0";
pub const NID_siphash: u32 = 1062;
pub const SN_ffdhe2048: &[u8; 10usize] = b"ffdhe2048\0";
pub const NID_ffdhe2048: u32 = 1126;
pub const SN_ffdhe3072: &[u8; 10usize] = b"ffdhe3072\0";
pub const NID_ffdhe3072: u32 = 1127;
pub const SN_ffdhe4096: &[u8; 10usize] = b"ffdhe4096\0";
pub const NID_ffdhe4096: u32 = 1128;
pub const SN_ffdhe6144: &[u8; 10usize] = b"ffdhe6144\0";
pub const NID_ffdhe6144: u32 = 1129;
pub const SN_ffdhe8192: &[u8; 10usize] = b"ffdhe8192\0";
pub const NID_ffdhe8192: u32 = 1130;
pub const SN_modp_1536: &[u8; 10usize] = b"modp_1536\0";
pub const NID_modp_1536: u32 = 1212;
pub const SN_modp_2048: &[u8; 10usize] = b"modp_2048\0";
pub const NID_modp_2048: u32 = 1213;
pub const SN_modp_3072: &[u8; 10usize] = b"modp_3072\0";
pub const NID_modp_3072: u32 = 1214;
pub const SN_modp_4096: &[u8; 10usize] = b"modp_4096\0";
pub const NID_modp_4096: u32 = 1215;
pub const SN_modp_6144: &[u8; 10usize] = b"modp_6144\0";
pub const NID_modp_6144: u32 = 1216;
pub const SN_modp_8192: &[u8; 10usize] = b"modp_8192\0";
pub const NID_modp_8192: u32 = 1217;
pub const SN_ISO_UA: &[u8; 7usize] = b"ISO-UA\0";
pub const NID_ISO_UA: u32 = 1150;
pub const SN_ua_pki: &[u8; 7usize] = b"ua-pki\0";
pub const NID_ua_pki: u32 = 1151;
pub const SN_dstu28147: &[u8; 10usize] = b"dstu28147\0";
pub const LN_dstu28147: &[u8; 21usize] = b"DSTU Gost 28147-2009\0";
pub const NID_dstu28147: u32 = 1152;
pub const SN_dstu28147_ofb: &[u8; 14usize] = b"dstu28147-ofb\0";
pub const LN_dstu28147_ofb: &[u8; 30usize] = b"DSTU Gost 28147-2009 OFB mode\0";
pub const NID_dstu28147_ofb: u32 = 1153;
pub const SN_dstu28147_cfb: &[u8; 14usize] = b"dstu28147-cfb\0";
pub const LN_dstu28147_cfb: &[u8; 30usize] = b"DSTU Gost 28147-2009 CFB mode\0";
pub const NID_dstu28147_cfb: u32 = 1154;
pub const SN_dstu28147_wrap: &[u8; 15usize] = b"dstu28147-wrap\0";
pub const LN_dstu28147_wrap: &[u8; 30usize] = b"DSTU Gost 28147-2009 key wrap\0";
pub const NID_dstu28147_wrap: u32 = 1155;
pub const SN_hmacWithDstu34311: &[u8; 18usize] = b"hmacWithDstu34311\0";
pub const LN_hmacWithDstu34311: &[u8; 24usize] = b"HMAC DSTU Gost 34311-95\0";
pub const NID_hmacWithDstu34311: u32 = 1156;
pub const SN_dstu34311: &[u8; 10usize] = b"dstu34311\0";
pub const LN_dstu34311: &[u8; 19usize] = b"DSTU Gost 34311-95\0";
pub const NID_dstu34311: u32 = 1157;
pub const SN_dstu4145le: &[u8; 11usize] = b"dstu4145le\0";
pub const LN_dstu4145le: &[u8; 29usize] = b"DSTU 4145-2002 little endian\0";
pub const NID_dstu4145le: u32 = 1158;
pub const SN_dstu4145be: &[u8; 11usize] = b"dstu4145be\0";
pub const LN_dstu4145be: &[u8; 26usize] = b"DSTU 4145-2002 big endian\0";
pub const NID_dstu4145be: u32 = 1159;
pub const SN_uacurve0: &[u8; 9usize] = b"uacurve0\0";
pub const LN_uacurve0: &[u8; 13usize] = b"DSTU curve 0\0";
pub const NID_uacurve0: u32 = 1160;
pub const SN_uacurve1: &[u8; 9usize] = b"uacurve1\0";
pub const LN_uacurve1: &[u8; 13usize] = b"DSTU curve 1\0";
pub const NID_uacurve1: u32 = 1161;
pub const SN_uacurve2: &[u8; 9usize] = b"uacurve2\0";
pub const LN_uacurve2: &[u8; 13usize] = b"DSTU curve 2\0";
pub const NID_uacurve2: u32 = 1162;
pub const SN_uacurve3: &[u8; 9usize] = b"uacurve3\0";
pub const LN_uacurve3: &[u8; 13usize] = b"DSTU curve 3\0";
pub const NID_uacurve3: u32 = 1163;
pub const SN_uacurve4: &[u8; 9usize] = b"uacurve4\0";
pub const LN_uacurve4: &[u8; 13usize] = b"DSTU curve 4\0";
pub const NID_uacurve4: u32 = 1164;
pub const SN_uacurve5: &[u8; 9usize] = b"uacurve5\0";
pub const LN_uacurve5: &[u8; 13usize] = b"DSTU curve 5\0";
pub const NID_uacurve5: u32 = 1165;
pub const SN_uacurve6: &[u8; 9usize] = b"uacurve6\0";
pub const LN_uacurve6: &[u8; 13usize] = b"DSTU curve 6\0";
pub const NID_uacurve6: u32 = 1166;
pub const SN_uacurve7: &[u8; 9usize] = b"uacurve7\0";
pub const LN_uacurve7: &[u8; 13usize] = b"DSTU curve 7\0";
pub const NID_uacurve7: u32 = 1167;
pub const SN_uacurve8: &[u8; 9usize] = b"uacurve8\0";
pub const LN_uacurve8: &[u8; 13usize] = b"DSTU curve 8\0";
pub const NID_uacurve8: u32 = 1168;
pub const SN_uacurve9: &[u8; 9usize] = b"uacurve9\0";
pub const LN_uacurve9: &[u8; 13usize] = b"DSTU curve 9\0";
pub const NID_uacurve9: u32 = 1169;
pub const SN_aes_128_siv: &[u8; 12usize] = b"AES-128-SIV\0";
pub const LN_aes_128_siv: &[u8; 12usize] = b"aes-128-siv\0";
pub const NID_aes_128_siv: u32 = 1198;
pub const SN_aes_192_siv: &[u8; 12usize] = b"AES-192-SIV\0";
pub const LN_aes_192_siv: &[u8; 12usize] = b"aes-192-siv\0";
pub const NID_aes_192_siv: u32 = 1199;
pub const SN_aes_256_siv: &[u8; 12usize] = b"AES-256-SIV\0";
pub const LN_aes_256_siv: &[u8; 12usize] = b"aes-256-siv\0";
pub const NID_aes_256_siv: u32 = 1200;
pub const SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm: &[u8; 16usize] = b"magma-ctr-acpkm\0";
pub const NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm: u32 = 1174;
pub const SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac: &[u8; 21usize] =
    b"magma-ctr-acpkm-omac\0";
pub const NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac: u32 = 1175;
pub const SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm: &[u8; 21usize] =
    b"kuznyechik-ctr-acpkm\0";
pub const NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm: u32 = 1177;
pub const SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac: &[u8; 26usize] =
    b"kuznyechik-ctr-acpkm-omac\0";
pub const NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac: u32 = 1178;
pub const SN_id_tc26_wrap_gostr3412_2015_magma_kexp15: &[u8; 13usize] = b"magma-kexp15\0";
pub const NID_id_tc26_wrap_gostr3412_2015_magma_kexp15: u32 = 1181;
pub const SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15: &[u8; 18usize] = b"kuznyechik-kexp15\0";
pub const NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15: u32 = 1183;
pub const SN_grasshopper_ecb: &[u8; 15usize] = b"kuznyechik-ecb\0";
pub const NID_grasshopper_ecb: u32 = 1012;
pub const SN_grasshopper_ctr: &[u8; 15usize] = b"kuznyechik-ctr\0";
pub const NID_grasshopper_ctr: u32 = 1013;
pub const SN_grasshopper_ofb: &[u8; 15usize] = b"kuznyechik-ofb\0";
pub const NID_grasshopper_ofb: u32 = 1014;
pub const SN_grasshopper_cbc: &[u8; 15usize] = b"kuznyechik-cbc\0";
pub const NID_grasshopper_cbc: u32 = 1015;
pub const SN_grasshopper_cfb: &[u8; 15usize] = b"kuznyechik-cfb\0";
pub const NID_grasshopper_cfb: u32 = 1016;
pub const SN_grasshopper_mac: &[u8; 15usize] = b"kuznyechik-mac\0";
pub const NID_grasshopper_mac: u32 = 1017;
pub const ASN1_R_ADDING_OBJECT: u32 = 171;
pub const ASN1_R_ASN1_PARSE_ERROR: u32 = 203;
pub const ASN1_R_ASN1_SIG_PARSE_ERROR: u32 = 204;
pub const ASN1_R_AUX_ERROR: u32 = 100;
pub const ASN1_R_BAD_OBJECT_HEADER: u32 = 102;
pub const ASN1_R_BAD_TEMPLATE: u32 = 230;
pub const ASN1_R_BMPSTRING_IS_WRONG_LENGTH: u32 = 214;
pub const ASN1_R_BN_LIB: u32 = 105;
pub const ASN1_R_BOOLEAN_IS_WRONG_LENGTH: u32 = 106;
pub const ASN1_R_BUFFER_TOO_SMALL: u32 = 107;
pub const ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER: u32 = 108;
pub const ASN1_R_CONTEXT_NOT_INITIALISED: u32 = 217;
pub const ASN1_R_DATA_IS_WRONG: u32 = 109;
pub const ASN1_R_DECODE_ERROR: u32 = 110;
pub const ASN1_R_DEPTH_EXCEEDED: u32 = 174;
pub const ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED: u32 = 198;
pub const ASN1_R_ENCODE_ERROR: u32 = 112;
pub const ASN1_R_ERROR_GETTING_TIME: u32 = 173;
pub const ASN1_R_ERROR_LOADING_SECTION: u32 = 172;
pub const ASN1_R_ERROR_SETTING_CIPHER_PARAMS: u32 = 114;
pub const ASN1_R_EXPECTING_AN_INTEGER: u32 = 115;
pub const ASN1_R_EXPECTING_AN_OBJECT: u32 = 116;
pub const ASN1_R_EXPLICIT_LENGTH_MISMATCH: u32 = 119;
pub const ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED: u32 = 120;
pub const ASN1_R_FIELD_MISSING: u32 = 121;
pub const ASN1_R_FIRST_NUM_TOO_LARGE: u32 = 122;
pub const ASN1_R_HEADER_TOO_LONG: u32 = 123;
pub const ASN1_R_ILLEGAL_BITSTRING_FORMAT: u32 = 175;
pub const ASN1_R_ILLEGAL_BOOLEAN: u32 = 176;
pub const ASN1_R_ILLEGAL_CHARACTERS: u32 = 124;
pub const ASN1_R_ILLEGAL_FORMAT: u32 = 177;
pub const ASN1_R_ILLEGAL_HEX: u32 = 178;
pub const ASN1_R_ILLEGAL_IMPLICIT_TAG: u32 = 179;
pub const ASN1_R_ILLEGAL_INTEGER: u32 = 180;
pub const ASN1_R_ILLEGAL_NEGATIVE_VALUE: u32 = 226;
pub const ASN1_R_ILLEGAL_NESTED_TAGGING: u32 = 181;
pub const ASN1_R_ILLEGAL_NULL: u32 = 125;
pub const ASN1_R_ILLEGAL_NULL_VALUE: u32 = 182;
pub const ASN1_R_ILLEGAL_OBJECT: u32 = 183;
pub const ASN1_R_ILLEGAL_OPTIONAL_ANY: u32 = 126;
pub const ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE: u32 = 170;
pub const ASN1_R_ILLEGAL_PADDING: u32 = 221;
pub const ASN1_R_ILLEGAL_TAGGED_ANY: u32 = 127;
pub const ASN1_R_ILLEGAL_TIME_VALUE: u32 = 184;
pub const ASN1_R_ILLEGAL_ZERO_CONTENT: u32 = 222;
pub const ASN1_R_INTEGER_NOT_ASCII_FORMAT: u32 = 185;
pub const ASN1_R_INTEGER_TOO_LARGE_FOR_LONG: u32 = 128;
pub const ASN1_R_INVALID_BIT_STRING_BITS_LEFT: u32 = 220;
pub const ASN1_R_INVALID_BMPSTRING_LENGTH: u32 = 129;
pub const ASN1_R_INVALID_DIGIT: u32 = 130;
pub const ASN1_R_INVALID_MIME_TYPE: u32 = 205;
pub const ASN1_R_INVALID_MODIFIER: u32 = 186;
pub const ASN1_R_INVALID_NUMBER: u32 = 187;
pub const ASN1_R_INVALID_OBJECT_ENCODING: u32 = 216;
pub const ASN1_R_INVALID_SCRYPT_PARAMETERS: u32 = 227;
pub const ASN1_R_INVALID_SEPARATOR: u32 = 131;
pub const ASN1_R_INVALID_STRING_TABLE_VALUE: u32 = 218;
pub const ASN1_R_INVALID_UNIVERSALSTRING_LENGTH: u32 = 133;
pub const ASN1_R_INVALID_UTF8STRING: u32 = 134;
pub const ASN1_R_INVALID_VALUE: u32 = 219;
pub const ASN1_R_LENGTH_TOO_LONG: u32 = 231;
pub const ASN1_R_LIST_ERROR: u32 = 188;
pub const ASN1_R_MIME_NO_CONTENT_TYPE: u32 = 206;
pub const ASN1_R_MIME_PARSE_ERROR: u32 = 207;
pub const ASN1_R_MIME_SIG_PARSE_ERROR: u32 = 208;
pub const ASN1_R_MISSING_EOC: u32 = 137;
pub const ASN1_R_MISSING_SECOND_NUMBER: u32 = 138;
pub const ASN1_R_MISSING_VALUE: u32 = 189;
pub const ASN1_R_MSTRING_NOT_UNIVERSAL: u32 = 139;
pub const ASN1_R_MSTRING_WRONG_TAG: u32 = 140;
pub const ASN1_R_NESTED_ASN1_STRING: u32 = 197;
pub const ASN1_R_NESTED_TOO_DEEP: u32 = 201;
pub const ASN1_R_NON_HEX_CHARACTERS: u32 = 141;
pub const ASN1_R_NOT_ASCII_FORMAT: u32 = 190;
pub const ASN1_R_NOT_ENOUGH_DATA: u32 = 142;
pub const ASN1_R_NO_CONTENT_TYPE: u32 = 209;
pub const ASN1_R_NO_MATCHING_CHOICE_TYPE: u32 = 143;
pub const ASN1_R_NO_MULTIPART_BODY_FAILURE: u32 = 210;
pub const ASN1_R_NO_MULTIPART_BOUNDARY: u32 = 211;
pub const ASN1_R_NO_SIG_CONTENT_TYPE: u32 = 212;
pub const ASN1_R_NULL_IS_WRONG_LENGTH: u32 = 144;
pub const ASN1_R_OBJECT_NOT_ASCII_FORMAT: u32 = 191;
pub const ASN1_R_ODD_NUMBER_OF_CHARS: u32 = 145;
pub const ASN1_R_SECOND_NUMBER_TOO_LARGE: u32 = 147;
pub const ASN1_R_SEQUENCE_LENGTH_MISMATCH: u32 = 148;
pub const ASN1_R_SEQUENCE_NOT_CONSTRUCTED: u32 = 149;
pub const ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG: u32 = 192;
pub const ASN1_R_SHORT_LINE: u32 = 150;
pub const ASN1_R_SIG_INVALID_MIME_TYPE: u32 = 213;
pub const ASN1_R_STREAMING_NOT_SUPPORTED: u32 = 202;
pub const ASN1_R_STRING_TOO_LONG: u32 = 151;
pub const ASN1_R_STRING_TOO_SHORT: u32 = 152;
pub const ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD: u32 = 154;
pub const ASN1_R_TIME_NOT_ASCII_FORMAT: u32 = 193;
pub const ASN1_R_TOO_LARGE: u32 = 223;
pub const ASN1_R_TOO_LONG: u32 = 155;
pub const ASN1_R_TOO_SMALL: u32 = 224;
pub const ASN1_R_TYPE_NOT_CONSTRUCTED: u32 = 156;
pub const ASN1_R_TYPE_NOT_PRIMITIVE: u32 = 195;
pub const ASN1_R_UNEXPECTED_EOC: u32 = 159;
pub const ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH: u32 = 215;
pub const ASN1_R_UNKNOWN_DIGEST: u32 = 229;
pub const ASN1_R_UNKNOWN_FORMAT: u32 = 160;
pub const ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM: u32 = 161;
pub const ASN1_R_UNKNOWN_OBJECT_TYPE: u32 = 162;
pub const ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE: u32 = 163;
pub const ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM: u32 = 199;
pub const ASN1_R_UNKNOWN_TAG: u32 = 194;
pub const ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE: u32 = 164;
pub const ASN1_R_UNSUPPORTED_CIPHER: u32 = 228;
pub const ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE: u32 = 167;
pub const ASN1_R_UNSUPPORTED_TYPE: u32 = 196;
pub const ASN1_R_WRONG_INTEGER_TYPE: u32 = 225;
pub const ASN1_R_WRONG_PUBLIC_KEY_TYPE: u32 = 200;
pub const ASN1_R_WRONG_TAG: u32 = 168;
pub const V_ASN1_UNIVERSAL: u32 = 0;
pub const V_ASN1_APPLICATION: u32 = 64;
pub const V_ASN1_CONTEXT_SPECIFIC: u32 = 128;
pub const V_ASN1_PRIVATE: u32 = 192;
pub const V_ASN1_CONSTRUCTED: u32 = 32;
pub const V_ASN1_PRIMITIVE_TAG: u32 = 31;
pub const V_ASN1_PRIMATIVE_TAG: u32 = 31;
pub const V_ASN1_APP_CHOOSE: i32 = -2;
pub const V_ASN1_OTHER: i32 = -3;
pub const V_ASN1_ANY: i32 = -4;
pub const V_ASN1_UNDEF: i32 = -1;
pub const V_ASN1_EOC: u32 = 0;
pub const V_ASN1_BOOLEAN: u32 = 1;
pub const V_ASN1_INTEGER: u32 = 2;
pub const V_ASN1_BIT_STRING: u32 = 3;
pub const V_ASN1_OCTET_STRING: u32 = 4;
pub const V_ASN1_NULL: u32 = 5;
pub const V_ASN1_OBJECT: u32 = 6;
pub const V_ASN1_OBJECT_DESCRIPTOR: u32 = 7;
pub const V_ASN1_EXTERNAL: u32 = 8;
pub const V_ASN1_REAL: u32 = 9;
pub const V_ASN1_ENUMERATED: u32 = 10;
pub const V_ASN1_UTF8STRING: u32 = 12;
pub const V_ASN1_SEQUENCE: u32 = 16;
pub const V_ASN1_SET: u32 = 17;
pub const V_ASN1_NUMERICSTRING: u32 = 18;
pub const V_ASN1_PRINTABLESTRING: u32 = 19;
pub const V_ASN1_T61STRING: u32 = 20;
pub const V_ASN1_TELETEXSTRING: u32 = 20;
pub const V_ASN1_VIDEOTEXSTRING: u32 = 21;
pub const V_ASN1_IA5STRING: u32 = 22;
pub const V_ASN1_UTCTIME: u32 = 23;
pub const V_ASN1_GENERALIZEDTIME: u32 = 24;
pub const V_ASN1_GRAPHICSTRING: u32 = 25;
pub const V_ASN1_ISO64STRING: u32 = 26;
pub const V_ASN1_VISIBLESTRING: u32 = 26;
pub const V_ASN1_GENERALSTRING: u32 = 27;
pub const V_ASN1_UNIVERSALSTRING: u32 = 28;
pub const V_ASN1_BMPSTRING: u32 = 30;
pub const V_ASN1_NEG: u32 = 256;
pub const V_ASN1_NEG_INTEGER: u32 = 258;
pub const V_ASN1_NEG_ENUMERATED: u32 = 266;
pub const B_ASN1_NUMERICSTRING: u32 = 1;
pub const B_ASN1_PRINTABLESTRING: u32 = 2;
pub const B_ASN1_T61STRING: u32 = 4;
pub const B_ASN1_TELETEXSTRING: u32 = 4;
pub const B_ASN1_VIDEOTEXSTRING: u32 = 8;
pub const B_ASN1_IA5STRING: u32 = 16;
pub const B_ASN1_GRAPHICSTRING: u32 = 32;
pub const B_ASN1_ISO64STRING: u32 = 64;
pub const B_ASN1_VISIBLESTRING: u32 = 64;
pub const B_ASN1_GENERALSTRING: u32 = 128;
pub const B_ASN1_UNIVERSALSTRING: u32 = 256;
pub const B_ASN1_OCTET_STRING: u32 = 512;
pub const B_ASN1_BIT_STRING: u32 = 1024;
pub const B_ASN1_BMPSTRING: u32 = 2048;
pub const B_ASN1_UNKNOWN: u32 = 4096;
pub const B_ASN1_UTF8STRING: u32 = 8192;
pub const B_ASN1_UTCTIME: u32 = 16384;
pub const B_ASN1_GENERALIZEDTIME: u32 = 32768;
pub const B_ASN1_SEQUENCE: u32 = 65536;
pub const MBSTRING_FLAG: u32 = 4096;
pub const MBSTRING_UTF8: u32 = 4096;
pub const MBSTRING_ASC: u32 = 4097;
pub const MBSTRING_BMP: u32 = 4098;
pub const MBSTRING_UNIV: u32 = 4100;
pub const SMIME_OLDMIME: u32 = 1024;
pub const SMIME_CRLFEOL: u32 = 2048;
pub const SMIME_STREAM: u32 = 4096;
pub const ASN1_STRING_FLAG_BITS_LEFT: u32 = 8;
pub const ASN1_STRING_FLAG_NDEF: u32 = 16;
pub const ASN1_STRING_FLAG_CONT: u32 = 32;
pub const ASN1_STRING_FLAG_MSTRING: u32 = 64;
pub const ASN1_STRING_FLAG_EMBED: u32 = 128;
pub const ASN1_STRING_FLAG_X509_TIME: u32 = 256;
pub const ASN1_LONG_UNDEF: u32 = 2147483647;
pub const STABLE_FLAGS_MALLOC: u32 = 1;
pub const STABLE_FLAGS_CLEAR: u32 = 1;
pub const STABLE_NO_MASK: u32 = 2;
pub const DIRSTRING_TYPE: u32 = 10246;
pub const PKCS9STRING_TYPE: u32 = 10262;
pub const ub_name: u32 = 32768;
pub const ub_common_name: u32 = 64;
pub const ub_locality_name: u32 = 128;
pub const ub_state_name: u32 = 128;
pub const ub_organization_name: u32 = 64;
pub const ub_organization_unit_name: u32 = 64;
pub const ub_title: u32 = 64;
pub const ub_email_address: u32 = 128;
pub const ASN1_STRFLGS_ESC_2253: u32 = 1;
pub const ASN1_STRFLGS_ESC_CTRL: u32 = 2;
pub const ASN1_STRFLGS_ESC_MSB: u32 = 4;
pub const ASN1_DTFLGS_TYPE_MASK: u32 = 15;
pub const ASN1_DTFLGS_RFC822: u32 = 0;
pub const ASN1_DTFLGS_ISO8601: u32 = 1;
pub const ASN1_STRFLGS_ESC_QUOTE: u32 = 8;
pub const CHARTYPE_PRINTABLESTRING: u32 = 16;
pub const CHARTYPE_FIRST_ESC_2253: u32 = 32;
pub const CHARTYPE_LAST_ESC_2253: u32 = 64;
pub const ASN1_STRFLGS_UTF8_CONVERT: u32 = 16;
pub const ASN1_STRFLGS_IGNORE_TYPE: u32 = 32;
pub const ASN1_STRFLGS_SHOW_TYPE: u32 = 64;
pub const ASN1_STRFLGS_DUMP_ALL: u32 = 128;
pub const ASN1_STRFLGS_DUMP_UNKNOWN: u32 = 256;
pub const ASN1_STRFLGS_DUMP_DER: u32 = 512;
pub const ASN1_STRFLGS_ESC_2254: u32 = 1024;
pub const ASN1_STRFLGS_RFC2253: u32 = 791;
pub const B_ASN1_TIME: u32 = 49152;
pub const B_ASN1_PRINTABLE: u32 = 81175;
pub const B_ASN1_DIRECTORYSTRING: u32 = 10502;
pub const B_ASN1_DISPLAYTEXT: u32 = 10320;
pub const ASN1_PCTX_FLAGS_SHOW_ABSENT: u32 = 1;
pub const ASN1_PCTX_FLAGS_SHOW_SEQUENCE: u32 = 2;
pub const ASN1_PCTX_FLAGS_SHOW_SSOF: u32 = 4;
pub const ASN1_PCTX_FLAGS_SHOW_TYPE: u32 = 8;
pub const ASN1_PCTX_FLAGS_NO_ANY_TYPE: u32 = 16;
pub const ASN1_PCTX_FLAGS_NO_MSTRING_TYPE: u32 = 32;
pub const ASN1_PCTX_FLAGS_NO_FIELD_NAME: u32 = 64;
pub const ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME: u32 = 128;
pub const ASN1_PCTX_FLAGS_NO_STRUCT_NAME: u32 = 256;
pub const OBJ_R_OID_EXISTS: u32 = 102;
pub const OBJ_R_UNKNOWN_NID: u32 = 101;
pub const OBJ_R_UNKNOWN_OBJECT_NAME: u32 = 103;
pub const OBJ_NAME_TYPE_UNDEF: u32 = 0;
pub const OBJ_NAME_TYPE_MD_METH: u32 = 1;
pub const OBJ_NAME_TYPE_CIPHER_METH: u32 = 2;
pub const OBJ_NAME_TYPE_PKEY_METH: u32 = 3;
pub const OBJ_NAME_TYPE_COMP_METH: u32 = 4;
pub const OBJ_NAME_TYPE_MAC_METH: u32 = 5;
pub const OBJ_NAME_TYPE_KDF_METH: u32 = 6;
pub const OBJ_NAME_TYPE_NUM: u32 = 7;
pub const OBJ_NAME_ALIAS: u32 = 32768;
pub const OBJ_BSEARCH_VALUE_ON_NOMATCH: u32 = 1;
pub const OBJ_BSEARCH_FIRST_VALUE_ON_MATCH: u32 = 2;
pub const EVP_PK_RSA: u32 = 1;
pub const EVP_PK_DSA: u32 = 2;
pub const EVP_PK_DH: u32 = 4;
pub const EVP_PK_EC: u32 = 8;
pub const EVP_PKT_SIGN: u32 = 16;
pub const EVP_PKT_ENC: u32 = 32;
pub const EVP_PKT_EXCH: u32 = 64;
pub const EVP_PKS_RSA: u32 = 256;
pub const EVP_PKS_DSA: u32 = 512;
pub const EVP_PKS_EC: u32 = 1024;
pub const EVP_PKEY_NONE: u32 = 0;
pub const EVP_PKEY_RSA: u32 = 6;
pub const EVP_PKEY_RSA2: u32 = 19;
pub const EVP_PKEY_RSA_PSS: u32 = 912;
pub const EVP_PKEY_DSA: u32 = 116;
pub const EVP_PKEY_DSA1: u32 = 67;
pub const EVP_PKEY_DSA2: u32 = 66;
pub const EVP_PKEY_DSA3: u32 = 113;
pub const EVP_PKEY_DSA4: u32 = 70;
pub const EVP_PKEY_DH: u32 = 28;
pub const EVP_PKEY_DHX: u32 = 920;
pub const EVP_PKEY_EC: u32 = 408;
pub const EVP_PKEY_SM2: u32 = 1172;
pub const EVP_PKEY_HMAC: u32 = 855;
pub const EVP_PKEY_CMAC: u32 = 894;
pub const EVP_PKEY_SCRYPT: u32 = 973;
pub const EVP_PKEY_TLS1_PRF: u32 = 1021;
pub const EVP_PKEY_HKDF: u32 = 1036;
pub const EVP_PKEY_POLY1305: u32 = 1061;
pub const EVP_PKEY_SIPHASH: u32 = 1062;
pub const EVP_PKEY_X25519: u32 = 1034;
pub const EVP_PKEY_ED25519: u32 = 1087;
pub const EVP_PKEY_X448: u32 = 1035;
pub const EVP_PKEY_ED448: u32 = 1088;
pub const EVP_PKEY_KEYMGMT: i32 = -1;
pub const EVP_PKEY_KEY_PARAMETERS: u32 = 132;
pub const EVP_PKEY_PUBLIC_KEY: u32 = 134;
pub const EVP_PKEY_KEYPAIR: u32 = 135;
pub const EVP_PKEY_MO_SIGN: u32 = 1;
pub const EVP_PKEY_MO_VERIFY: u32 = 2;
pub const EVP_PKEY_MO_ENCRYPT: u32 = 4;
pub const EVP_PKEY_MO_DECRYPT: u32 = 8;
pub const EVP_MD_FLAG_ONESHOT: u32 = 1;
pub const EVP_MD_FLAG_XOF: u32 = 2;
pub const EVP_MD_FLAG_DIGALGID_MASK: u32 = 24;
pub const EVP_MD_FLAG_DIGALGID_NULL: u32 = 0;
pub const EVP_MD_FLAG_DIGALGID_ABSENT: u32 = 8;
pub const EVP_MD_FLAG_DIGALGID_CUSTOM: u32 = 24;
pub const EVP_MD_FLAG_FIPS: u32 = 1024;
pub const EVP_MD_CTRL_DIGALGID: u32 = 1;
pub const EVP_MD_CTRL_MICALG: u32 = 2;
pub const EVP_MD_CTRL_XOF_LEN: u32 = 3;
pub const EVP_MD_CTRL_TLSTREE: u32 = 4;
pub const EVP_MD_CTRL_ALG_CTRL: u32 = 4096;
pub const EVP_MD_CTX_FLAG_ONESHOT: u32 = 1;
pub const EVP_MD_CTX_FLAG_CLEANED: u32 = 2;
pub const EVP_MD_CTX_FLAG_REUSE: u32 = 4;
pub const EVP_MD_CTX_FLAG_NON_FIPS_ALLOW: u32 = 8;
pub const EVP_MD_CTX_FLAG_PAD_MASK: u32 = 240;
pub const EVP_MD_CTX_FLAG_PAD_PKCS1: u32 = 0;
pub const EVP_MD_CTX_FLAG_PAD_X931: u32 = 16;
pub const EVP_MD_CTX_FLAG_PAD_PSS: u32 = 32;
pub const EVP_MD_CTX_FLAG_NO_INIT: u32 = 256;
pub const EVP_MD_CTX_FLAG_FINALISE: u32 = 512;
pub const EVP_CIPH_STREAM_CIPHER: u32 = 0;
pub const EVP_CIPH_ECB_MODE: u32 = 1;
pub const EVP_CIPH_CBC_MODE: u32 = 2;
pub const EVP_CIPH_CFB_MODE: u32 = 3;
pub const EVP_CIPH_OFB_MODE: u32 = 4;
pub const EVP_CIPH_CTR_MODE: u32 = 5;
pub const EVP_CIPH_GCM_MODE: u32 = 6;
pub const EVP_CIPH_CCM_MODE: u32 = 7;
pub const EVP_CIPH_XTS_MODE: u32 = 65537;
pub const EVP_CIPH_WRAP_MODE: u32 = 65538;
pub const EVP_CIPH_OCB_MODE: u32 = 65539;
pub const EVP_CIPH_SIV_MODE: u32 = 65540;
pub const EVP_CIPH_MODE: u32 = 983047;
pub const EVP_CIPH_VARIABLE_LENGTH: u32 = 8;
pub const EVP_CIPH_CUSTOM_IV: u32 = 16;
pub const EVP_CIPH_ALWAYS_CALL_INIT: u32 = 32;
pub const EVP_CIPH_CTRL_INIT: u32 = 64;
pub const EVP_CIPH_CUSTOM_KEY_LENGTH: u32 = 128;
pub const EVP_CIPH_NO_PADDING: u32 = 256;
pub const EVP_CIPH_RAND_KEY: u32 = 512;
pub const EVP_CIPH_CUSTOM_COPY: u32 = 1024;
pub const EVP_CIPH_CUSTOM_IV_LENGTH: u32 = 2048;
pub const EVP_CIPH_FLAG_DEFAULT_ASN1: u32 = 0;
pub const EVP_CIPH_FLAG_LENGTH_BITS: u32 = 8192;
pub const EVP_CIPH_FLAG_FIPS: u32 = 0;
pub const EVP_CIPH_FLAG_NON_FIPS_ALLOW: u32 = 0;
pub const EVP_CIPH_FLAG_CTS: u32 = 16384;
pub const EVP_CIPH_FLAG_CUSTOM_CIPHER: u32 = 1048576;
pub const EVP_CIPH_FLAG_AEAD_CIPHER: u32 = 2097152;
pub const EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK: u32 = 4194304;
pub const EVP_CIPH_FLAG_PIPELINE: u32 = 8388608;
pub const EVP_CIPH_FLAG_CUSTOM_ASN1: u32 = 16777216;
pub const EVP_CIPH_FLAG_CIPHER_WITH_MAC: u32 = 33554432;
pub const EVP_CIPH_FLAG_GET_WRAP_CIPHER: u32 = 67108864;
pub const EVP_CIPH_FLAG_INVERSE_CIPHER: u32 = 134217728;
pub const EVP_CIPHER_CTX_FLAG_WRAP_ALLOW: u32 = 1;
pub const EVP_CTRL_INIT: u32 = 0;
pub const EVP_CTRL_SET_KEY_LENGTH: u32 = 1;
pub const EVP_CTRL_GET_RC2_KEY_BITS: u32 = 2;
pub const EVP_CTRL_SET_RC2_KEY_BITS: u32 = 3;
pub const EVP_CTRL_GET_RC5_ROUNDS: u32 = 4;
pub const EVP_CTRL_SET_RC5_ROUNDS: u32 = 5;
pub const EVP_CTRL_RAND_KEY: u32 = 6;
pub const EVP_CTRL_PBE_PRF_NID: u32 = 7;
pub const EVP_CTRL_COPY: u32 = 8;
pub const EVP_CTRL_AEAD_SET_IVLEN: u32 = 9;
pub const EVP_CTRL_AEAD_GET_TAG: u32 = 16;
pub const EVP_CTRL_AEAD_SET_TAG: u32 = 17;
pub const EVP_CTRL_AEAD_SET_IV_FIXED: u32 = 18;
pub const EVP_CTRL_GCM_SET_IVLEN: u32 = 9;
pub const EVP_CTRL_GCM_GET_TAG: u32 = 16;
pub const EVP_CTRL_GCM_SET_TAG: u32 = 17;
pub const EVP_CTRL_GCM_SET_IV_FIXED: u32 = 18;
pub const EVP_CTRL_GCM_IV_GEN: u32 = 19;
pub const EVP_CTRL_CCM_SET_IVLEN: u32 = 9;
pub const EVP_CTRL_CCM_GET_TAG: u32 = 16;
pub const EVP_CTRL_CCM_SET_TAG: u32 = 17;
pub const EVP_CTRL_CCM_SET_IV_FIXED: u32 = 18;
pub const EVP_CTRL_CCM_SET_L: u32 = 20;
pub const EVP_CTRL_CCM_SET_MSGLEN: u32 = 21;
pub const EVP_CTRL_AEAD_TLS1_AAD: u32 = 22;
pub const EVP_CTRL_AEAD_SET_MAC_KEY: u32 = 23;
pub const EVP_CTRL_GCM_SET_IV_INV: u32 = 24;
pub const EVP_CTRL_TLS1_1_MULTIBLOCK_AAD: u32 = 25;
pub const EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT: u32 = 26;
pub const EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT: u32 = 27;
pub const EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE: u32 = 28;
pub const EVP_CTRL_SSL3_MASTER_SECRET: u32 = 29;
pub const EVP_CTRL_SET_SBOX: u32 = 30;
pub const EVP_CTRL_SBOX_USED: u32 = 31;
pub const EVP_CTRL_KEY_MESH: u32 = 32;
pub const EVP_CTRL_BLOCK_PADDING_MODE: u32 = 33;
pub const EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS: u32 = 34;
pub const EVP_CTRL_SET_PIPELINE_INPUT_BUFS: u32 = 35;
pub const EVP_CTRL_SET_PIPELINE_INPUT_LENS: u32 = 36;
pub const EVP_CTRL_GET_IVLEN: u32 = 37;
pub const EVP_CTRL_SET_SPEED: u32 = 39;
pub const EVP_CTRL_PROCESS_UNPROTECTED: u32 = 40;
pub const EVP_CTRL_GET_WRAP_CIPHER: u32 = 41;
pub const EVP_CTRL_TLSTREE: u32 = 42;
pub const EVP_PADDING_PKCS7: u32 = 1;
pub const EVP_PADDING_ISO7816_4: u32 = 2;
pub const EVP_PADDING_ANSI923: u32 = 3;
pub const EVP_PADDING_ISO10126: u32 = 4;
pub const EVP_PADDING_ZERO: u32 = 5;
pub const EVP_AEAD_TLS1_AAD_LEN: u32 = 13;
pub const EVP_GCM_TLS_FIXED_IV_LEN: u32 = 4;
pub const EVP_GCM_TLS_EXPLICIT_IV_LEN: u32 = 8;
pub const EVP_GCM_TLS_TAG_LEN: u32 = 16;
pub const EVP_CCM_TLS_FIXED_IV_LEN: u32 = 4;
pub const EVP_CCM_TLS_EXPLICIT_IV_LEN: u32 = 8;
pub const EVP_CCM_TLS_IV_LEN: u32 = 12;
pub const EVP_CCM_TLS_TAG_LEN: u32 = 16;
pub const EVP_CCM8_TLS_TAG_LEN: u32 = 8;
pub const EVP_CHACHAPOLY_TLS_TAG_LEN: u32 = 16;
pub const EVP_RAND_STATE_UNINITIALISED: u32 = 0;
pub const EVP_RAND_STATE_READY: u32 = 1;
pub const EVP_RAND_STATE_ERROR: u32 = 2;
pub const EVP_PBE_TYPE_OUTER: u32 = 0;
pub const EVP_PBE_TYPE_PRF: u32 = 1;
pub const EVP_PBE_TYPE_KDF: u32 = 2;
pub const ASN1_PKEY_ALIAS: u32 = 1;
pub const ASN1_PKEY_DYNAMIC: u32 = 2;
pub const ASN1_PKEY_SIGPARAM_NULL: u32 = 4;
pub const ASN1_PKEY_CTRL_PKCS7_SIGN: u32 = 1;
pub const ASN1_PKEY_CTRL_PKCS7_ENCRYPT: u32 = 2;
pub const ASN1_PKEY_CTRL_DEFAULT_MD_NID: u32 = 3;
pub const ASN1_PKEY_CTRL_CMS_SIGN: u32 = 5;
pub const ASN1_PKEY_CTRL_CMS_ENVELOPE: u32 = 7;
pub const ASN1_PKEY_CTRL_CMS_RI_TYPE: u32 = 8;
pub const ASN1_PKEY_CTRL_SET1_TLS_ENCPT: u32 = 9;
pub const ASN1_PKEY_CTRL_GET1_TLS_ENCPT: u32 = 10;
pub const ASN1_PKEY_CTRL_CMS_IS_RI_TYPE_SUPPORTED: u32 = 11;
pub const EVP_PKEY_OP_UNDEFINED: u32 = 0;
pub const EVP_PKEY_OP_PARAMGEN: u32 = 2;
pub const EVP_PKEY_OP_KEYGEN: u32 = 4;
pub const EVP_PKEY_OP_FROMDATA: u32 = 8;
pub const EVP_PKEY_OP_SIGN: u32 = 16;
pub const EVP_PKEY_OP_VERIFY: u32 = 32;
pub const EVP_PKEY_OP_VERIFYRECOVER: u32 = 64;
pub const EVP_PKEY_OP_SIGNCTX: u32 = 128;
pub const EVP_PKEY_OP_VERIFYCTX: u32 = 256;
pub const EVP_PKEY_OP_ENCRYPT: u32 = 512;
pub const EVP_PKEY_OP_DECRYPT: u32 = 1024;
pub const EVP_PKEY_OP_DERIVE: u32 = 2048;
pub const EVP_PKEY_OP_ENCAPSULATE: u32 = 4096;
pub const EVP_PKEY_OP_DECAPSULATE: u32 = 8192;
pub const EVP_PKEY_OP_TYPE_SIG: u32 = 496;
pub const EVP_PKEY_OP_TYPE_CRYPT: u32 = 1536;
pub const EVP_PKEY_OP_TYPE_NOGEN: u32 = 4080;
pub const EVP_PKEY_OP_TYPE_GEN: u32 = 6;
pub const EVP_PKEY_CTRL_MD: u32 = 1;
pub const EVP_PKEY_CTRL_PEER_KEY: u32 = 2;
pub const EVP_PKEY_CTRL_SET_MAC_KEY: u32 = 6;
pub const EVP_PKEY_CTRL_DIGESTINIT: u32 = 7;
pub const EVP_PKEY_CTRL_SET_IV: u32 = 8;
pub const EVP_PKEY_CTRL_PKCS7_ENCRYPT: u32 = 3;
pub const EVP_PKEY_CTRL_PKCS7_DECRYPT: u32 = 4;
pub const EVP_PKEY_CTRL_PKCS7_SIGN: u32 = 5;
pub const EVP_PKEY_CTRL_CMS_ENCRYPT: u32 = 9;
pub const EVP_PKEY_CTRL_CMS_DECRYPT: u32 = 10;
pub const EVP_PKEY_CTRL_CMS_SIGN: u32 = 11;
pub const EVP_PKEY_CTRL_CIPHER: u32 = 12;
pub const EVP_PKEY_CTRL_GET_MD: u32 = 13;
pub const EVP_PKEY_CTRL_SET_DIGEST_SIZE: u32 = 14;
pub const EVP_PKEY_CTRL_SET1_ID: u32 = 15;
pub const EVP_PKEY_CTRL_GET1_ID: u32 = 16;
pub const EVP_PKEY_CTRL_GET1_ID_LEN: u32 = 17;
pub const EVP_PKEY_ALG_CTRL: u32 = 4096;
pub const EVP_PKEY_FLAG_AUTOARGLEN: u32 = 2;
pub const EVP_PKEY_FLAG_SIGCTX_CUSTOM: u32 = 4;
pub const ASN1_ITYPE_PRIMITIVE: u32 = 0;
pub const ASN1_ITYPE_SEQUENCE: u32 = 1;
pub const ASN1_ITYPE_CHOICE: u32 = 2;
pub const ASN1_ITYPE_EXTERN: u32 = 4;
pub const ASN1_ITYPE_MSTRING: u32 = 5;
pub const ASN1_ITYPE_NDEF_SEQUENCE: u32 = 6;
pub const ASN1_TFLG_OPTIONAL: u32 = 1;
pub const ASN1_TFLG_SET_OF: u32 = 2;
pub const ASN1_TFLG_SEQUENCE_OF: u32 = 4;
pub const ASN1_TFLG_SET_ORDER: u32 = 6;
pub const ASN1_TFLG_SK_MASK: u32 = 6;
pub const ASN1_TFLG_IMPTAG: u32 = 8;
pub const ASN1_TFLG_EXPTAG: u32 = 16;
pub const ASN1_TFLG_TAG_MASK: u32 = 24;
pub const ASN1_TFLG_UNIVERSAL: u32 = 0;
pub const ASN1_TFLG_APPLICATION: u32 = 64;
pub const ASN1_TFLG_CONTEXT: u32 = 128;
pub const ASN1_TFLG_PRIVATE: u32 = 192;
pub const ASN1_TFLG_TAG_CLASS: u32 = 192;
pub const ASN1_TFLG_ADB_MASK: u32 = 768;
pub const ASN1_TFLG_ADB_OID: u32 = 256;
pub const ASN1_TFLG_ADB_INT: u32 = 512;
pub const ASN1_TFLG_NDEF: u32 = 2048;
pub const ASN1_TFLG_EMBED: u32 = 4096;
pub const ASN1_AFLG_REFCOUNT: u32 = 1;
pub const ASN1_AFLG_ENCODING: u32 = 2;
pub const ASN1_AFLG_BROKEN: u32 = 4;
pub const ASN1_AFLG_CONST_CB: u32 = 8;
pub const ASN1_OP_NEW_PRE: u32 = 0;
pub const ASN1_OP_NEW_POST: u32 = 1;
pub const ASN1_OP_FREE_PRE: u32 = 2;
pub const ASN1_OP_FREE_POST: u32 = 3;
pub const ASN1_OP_D2I_PRE: u32 = 4;
pub const ASN1_OP_D2I_POST: u32 = 5;
pub const ASN1_OP_I2D_PRE: u32 = 6;
pub const ASN1_OP_I2D_POST: u32 = 7;
pub const ASN1_OP_PRINT_PRE: u32 = 8;
pub const ASN1_OP_PRINT_POST: u32 = 9;
pub const ASN1_OP_STREAM_PRE: u32 = 10;
pub const ASN1_OP_STREAM_POST: u32 = 11;
pub const ASN1_OP_DETACHED_PRE: u32 = 12;
pub const ASN1_OP_DETACHED_POST: u32 = 13;
pub const ASN1_OP_DUP_PRE: u32 = 14;
pub const ASN1_OP_DUP_POST: u32 = 15;
pub const ASN1_OP_GET0_LIBCTX: u32 = 16;
pub const ASN1_OP_GET0_PROPQ: u32 = 17;
pub const BUF_MEM_FLAG_SECURE: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const OPENSSL_EC_EXPLICIT_CURVE: u32 = 0;
pub const OPENSSL_EC_NAMED_CURVE: u32 = 1;
pub const EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID: u32 = 4097;
pub const EVP_PKEY_CTRL_EC_PARAM_ENC: u32 = 4098;
pub const EVP_PKEY_CTRL_EC_ECDH_COFACTOR: u32 = 4099;
pub const EVP_PKEY_CTRL_EC_KDF_TYPE: u32 = 4100;
pub const EVP_PKEY_CTRL_EC_KDF_MD: u32 = 4101;
pub const EVP_PKEY_CTRL_GET_EC_KDF_MD: u32 = 4102;
pub const EVP_PKEY_CTRL_EC_KDF_OUTLEN: u32 = 4103;
pub const EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN: u32 = 4104;
pub const EVP_PKEY_CTRL_EC_KDF_UKM: u32 = 4105;
pub const EVP_PKEY_CTRL_GET_EC_KDF_UKM: u32 = 4106;
pub const EVP_PKEY_ECDH_KDF_NONE: u32 = 1;
pub const EVP_PKEY_ECDH_KDF_X9_63: u32 = 2;
pub const EVP_PKEY_ECDH_KDF_X9_62: u32 = 2;
pub const EC_R_ASN1_ERROR: u32 = 115;
pub const EC_R_BAD_SIGNATURE: u32 = 156;
pub const EC_R_BIGNUM_OUT_OF_RANGE: u32 = 144;
pub const EC_R_BUFFER_TOO_SMALL: u32 = 100;
pub const EC_R_CANNOT_INVERT: u32 = 165;
pub const EC_R_COORDINATES_OUT_OF_RANGE: u32 = 146;
pub const EC_R_CURVE_DOES_NOT_SUPPORT_ECDH: u32 = 160;
pub const EC_R_CURVE_DOES_NOT_SUPPORT_ECDSA: u32 = 170;
pub const EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING: u32 = 159;
pub const EC_R_DECODE_ERROR: u32 = 142;
pub const EC_R_DISCRIMINANT_IS_ZERO: u32 = 118;
pub const EC_R_EC_GROUP_NEW_BY_NAME_FAILURE: u32 = 119;
pub const EC_R_EXPLICIT_PARAMS_NOT_SUPPORTED: u32 = 127;
pub const EC_R_FAILED_MAKING_PUBLIC_KEY: u32 = 166;
pub const EC_R_FIELD_TOO_LARGE: u32 = 143;
pub const EC_R_GF2M_NOT_SUPPORTED: u32 = 147;
pub const EC_R_GROUP2PKPARAMETERS_FAILURE: u32 = 120;
pub const EC_R_I2D_ECPKPARAMETERS_FAILURE: u32 = 121;
pub const EC_R_INCOMPATIBLE_OBJECTS: u32 = 101;
pub const EC_R_INVALID_A: u32 = 168;
pub const EC_R_INVALID_ARGUMENT: u32 = 112;
pub const EC_R_INVALID_B: u32 = 169;
pub const EC_R_INVALID_COFACTOR: u32 = 171;
pub const EC_R_INVALID_COMPRESSED_POINT: u32 = 110;
pub const EC_R_INVALID_COMPRESSION_BIT: u32 = 109;
pub const EC_R_INVALID_CURVE: u32 = 141;
pub const EC_R_INVALID_DIGEST: u32 = 151;
pub const EC_R_INVALID_DIGEST_TYPE: u32 = 138;
pub const EC_R_INVALID_ENCODING: u32 = 102;
pub const EC_R_INVALID_FIELD: u32 = 103;
pub const EC_R_INVALID_FORM: u32 = 104;
pub const EC_R_INVALID_GENERATOR: u32 = 173;
pub const EC_R_INVALID_GROUP_ORDER: u32 = 122;
pub const EC_R_INVALID_KEY: u32 = 116;
pub const EC_R_INVALID_LENGTH: u32 = 117;
pub const EC_R_INVALID_NAMED_GROUP_CONVERSION: u32 = 174;
pub const EC_R_INVALID_OUTPUT_LENGTH: u32 = 161;
pub const EC_R_INVALID_P: u32 = 172;
pub const EC_R_INVALID_PEER_KEY: u32 = 133;
pub const EC_R_INVALID_PENTANOMIAL_BASIS: u32 = 132;
pub const EC_R_INVALID_PRIVATE_KEY: u32 = 123;
pub const EC_R_INVALID_SEED: u32 = 175;
pub const EC_R_INVALID_TRINOMIAL_BASIS: u32 = 137;
pub const EC_R_KDF_PARAMETER_ERROR: u32 = 148;
pub const EC_R_KEYS_NOT_SET: u32 = 140;
pub const EC_R_LADDER_POST_FAILURE: u32 = 136;
pub const EC_R_LADDER_PRE_FAILURE: u32 = 153;
pub const EC_R_LADDER_STEP_FAILURE: u32 = 162;
pub const EC_R_MISSING_OID: u32 = 167;
pub const EC_R_MISSING_PARAMETERS: u32 = 124;
pub const EC_R_MISSING_PRIVATE_KEY: u32 = 125;
pub const EC_R_NEED_NEW_SETUP_VALUES: u32 = 157;
pub const EC_R_NOT_A_NIST_PRIME: u32 = 135;
pub const EC_R_NOT_IMPLEMENTED: u32 = 126;
pub const EC_R_NOT_INITIALIZED: u32 = 111;
pub const EC_R_NO_PARAMETERS_SET: u32 = 139;
pub const EC_R_NO_PRIVATE_VALUE: u32 = 154;
pub const EC_R_OPERATION_NOT_SUPPORTED: u32 = 152;
pub const EC_R_PASSED_NULL_PARAMETER: u32 = 134;
pub const EC_R_PEER_KEY_ERROR: u32 = 149;
pub const EC_R_POINT_ARITHMETIC_FAILURE: u32 = 155;
pub const EC_R_POINT_AT_INFINITY: u32 = 106;
pub const EC_R_POINT_COORDINATES_BLIND_FAILURE: u32 = 163;
pub const EC_R_POINT_IS_NOT_ON_CURVE: u32 = 107;
pub const EC_R_RANDOM_NUMBER_GENERATION_FAILED: u32 = 158;
pub const EC_R_SHARED_INFO_ERROR: u32 = 150;
pub const EC_R_SLOT_FULL: u32 = 108;
pub const EC_R_UNDEFINED_GENERATOR: u32 = 113;
pub const EC_R_UNDEFINED_ORDER: u32 = 128;
pub const EC_R_UNKNOWN_COFACTOR: u32 = 164;
pub const EC_R_UNKNOWN_GROUP: u32 = 129;
pub const EC_R_UNKNOWN_ORDER: u32 = 114;
pub const EC_R_UNSUPPORTED_FIELD: u32 = 131;
pub const EC_R_WRONG_CURVE_PARAMETERS: u32 = 145;
pub const EC_R_WRONG_ORDER: u32 = 130;
pub const OPENSSL_ECC_MAX_FIELD_BITS: u32 = 661;
pub const EC_PKEY_NO_PARAMETERS: u32 = 1;
pub const EC_PKEY_NO_PUBKEY: u32 = 2;
pub const EC_FLAG_SM2_RANGE: u32 = 4;
pub const EC_FLAG_COFACTOR_ECDH: u32 = 4096;
pub const EC_FLAG_CHECK_NAMED_GROUP: u32 = 8192;
pub const EC_FLAG_CHECK_NAMED_GROUP_NIST: u32 = 16384;
pub const EC_FLAG_CHECK_NAMED_GROUP_MASK: u32 = 24576;
pub const EC_FLAG_NON_FIPS_ALLOW: u32 = 0;
pub const EC_FLAG_FIPS_CHECKED: u32 = 0;
pub const RSA_R_ALGORITHM_MISMATCH: u32 = 100;
pub const RSA_R_BAD_E_VALUE: u32 = 101;
pub const RSA_R_BAD_FIXED_HEADER_DECRYPT: u32 = 102;
pub const RSA_R_BAD_PAD_BYTE_COUNT: u32 = 103;
pub const RSA_R_BAD_SIGNATURE: u32 = 104;
pub const RSA_R_BLOCK_TYPE_IS_NOT_01: u32 = 106;
pub const RSA_R_BLOCK_TYPE_IS_NOT_02: u32 = 107;
pub const RSA_R_DATA_GREATER_THAN_MOD_LEN: u32 = 108;
pub const RSA_R_DATA_TOO_LARGE: u32 = 109;
pub const RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE: u32 = 110;
pub const RSA_R_DATA_TOO_LARGE_FOR_MODULUS: u32 = 132;
pub const RSA_R_DATA_TOO_SMALL: u32 = 111;
pub const RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE: u32 = 122;
pub const RSA_R_DIGEST_DOES_NOT_MATCH: u32 = 158;
pub const RSA_R_DIGEST_NOT_ALLOWED: u32 = 145;
pub const RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY: u32 = 112;
pub const RSA_R_DMP1_NOT_CONGRUENT_TO_D: u32 = 124;
pub const RSA_R_DMQ1_NOT_CONGRUENT_TO_D: u32 = 125;
pub const RSA_R_D_E_NOT_CONGRUENT_TO_1: u32 = 123;
pub const RSA_R_FIRST_OCTET_INVALID: u32 = 133;
pub const RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE: u32 = 144;
pub const RSA_R_INVALID_DIGEST: u32 = 157;
pub const RSA_R_INVALID_DIGEST_LENGTH: u32 = 143;
pub const RSA_R_INVALID_HEADER: u32 = 137;
pub const RSA_R_INVALID_KEYPAIR: u32 = 171;
pub const RSA_R_INVALID_KEY_LENGTH: u32 = 173;
pub const RSA_R_INVALID_LABEL: u32 = 160;
pub const RSA_R_INVALID_LENGTH: u32 = 181;
pub const RSA_R_INVALID_MESSAGE_LENGTH: u32 = 131;
pub const RSA_R_INVALID_MGF1_MD: u32 = 156;
pub const RSA_R_INVALID_MODULUS: u32 = 174;
pub const RSA_R_INVALID_MULTI_PRIME_KEY: u32 = 167;
pub const RSA_R_INVALID_OAEP_PARAMETERS: u32 = 161;
pub const RSA_R_INVALID_PADDING: u32 = 138;
pub const RSA_R_INVALID_PADDING_MODE: u32 = 141;
pub const RSA_R_INVALID_PSS_PARAMETERS: u32 = 149;
pub const RSA_R_INVALID_PSS_SALTLEN: u32 = 146;
pub const RSA_R_INVALID_REQUEST: u32 = 175;
pub const RSA_R_INVALID_SALT_LENGTH: u32 = 150;
pub const RSA_R_INVALID_STRENGTH: u32 = 176;
pub const RSA_R_INVALID_TRAILER: u32 = 139;
pub const RSA_R_INVALID_X931_DIGEST: u32 = 142;
pub const RSA_R_IQMP_NOT_INVERSE_OF_Q: u32 = 126;
pub const RSA_R_KEY_PRIME_NUM_INVALID: u32 = 165;
pub const RSA_R_KEY_SIZE_TOO_SMALL: u32 = 120;
pub const RSA_R_LAST_OCTET_INVALID: u32 = 134;
pub const RSA_R_MGF1_DIGEST_NOT_ALLOWED: u32 = 152;
pub const RSA_R_MISSING_PRIVATE_KEY: u32 = 179;
pub const RSA_R_MODULUS_TOO_LARGE: u32 = 105;
pub const RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R: u32 = 168;
pub const RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D: u32 = 169;
pub const RSA_R_MP_R_NOT_PRIME: u32 = 170;
pub const RSA_R_NO_PUBLIC_EXPONENT: u32 = 140;
pub const RSA_R_NULL_BEFORE_BLOCK_MISSING: u32 = 113;
pub const RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES: u32 = 172;
pub const RSA_R_N_DOES_NOT_EQUAL_P_Q: u32 = 127;
pub const RSA_R_OAEP_DECODING_ERROR: u32 = 121;
pub const RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE: u32 = 148;
pub const RSA_R_PADDING_CHECK_FAILED: u32 = 114;
pub const RSA_R_PAIRWISE_TEST_FAILURE: u32 = 177;
pub const RSA_R_PKCS_DECODING_ERROR: u32 = 159;
pub const RSA_R_PSS_SALTLEN_TOO_SMALL: u32 = 164;
pub const RSA_R_PUB_EXPONENT_OUT_OF_RANGE: u32 = 178;
pub const RSA_R_P_NOT_PRIME: u32 = 128;
pub const RSA_R_Q_NOT_PRIME: u32 = 129;
pub const RSA_R_RANDOMNESS_SOURCE_STRENGTH_INSUFFICIENT: u32 = 180;
pub const RSA_R_RSA_OPERATIONS_NOT_SUPPORTED: u32 = 130;
pub const RSA_R_SLEN_CHECK_FAILED: u32 = 136;
pub const RSA_R_SLEN_RECOVERY_FAILED: u32 = 135;
pub const RSA_R_SSLV3_ROLLBACK_ATTACK: u32 = 115;
pub const RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD: u32 = 116;
pub const RSA_R_UNKNOWN_ALGORITHM_TYPE: u32 = 117;
pub const RSA_R_UNKNOWN_DIGEST: u32 = 166;
pub const RSA_R_UNKNOWN_MASK_DIGEST: u32 = 151;
pub const RSA_R_UNKNOWN_PADDING_TYPE: u32 = 118;
pub const RSA_R_UNSUPPORTED_ENCRYPTION_TYPE: u32 = 162;
pub const RSA_R_UNSUPPORTED_LABEL_SOURCE: u32 = 163;
pub const RSA_R_UNSUPPORTED_MASK_ALGORITHM: u32 = 153;
pub const RSA_R_UNSUPPORTED_MASK_PARAMETER: u32 = 154;
pub const RSA_R_UNSUPPORTED_SIGNATURE_TYPE: u32 = 155;
pub const RSA_R_VALUE_MISSING: u32 = 147;
pub const RSA_R_WRONG_SIGNATURE_LENGTH: u32 = 119;
pub const OPENSSL_RSA_MAX_MODULUS_BITS: u32 = 16384;
pub const RSA_3: u32 = 3;
pub const RSA_F4: u32 = 65537;
pub const OPENSSL_RSA_FIPS_MIN_MODULUS_BITS: u32 = 2048;
pub const OPENSSL_RSA_SMALL_MODULUS_BITS: u32 = 3072;
pub const OPENSSL_RSA_MAX_PUBEXP_BITS: u32 = 64;
pub const RSA_ASN1_VERSION_DEFAULT: u32 = 0;
pub const RSA_ASN1_VERSION_MULTI: u32 = 1;
pub const RSA_DEFAULT_PRIME_NUM: u32 = 2;
pub const RSA_METHOD_FLAG_NO_CHECK: u32 = 1;
pub const RSA_FLAG_CACHE_PUBLIC: u32 = 2;
pub const RSA_FLAG_CACHE_PRIVATE: u32 = 4;
pub const RSA_FLAG_BLINDING: u32 = 8;
pub const RSA_FLAG_THREAD_SAFE: u32 = 16;
pub const RSA_FLAG_EXT_PKEY: u32 = 32;
pub const RSA_FLAG_NO_BLINDING: u32 = 128;
pub const RSA_FLAG_NO_CONSTTIME: u32 = 0;
pub const RSA_FLAG_NO_EXP_CONSTTIME: u32 = 0;
pub const RSA_FLAG_TYPE_MASK: u32 = 61440;
pub const RSA_FLAG_TYPE_RSA: u32 = 0;
pub const RSA_FLAG_TYPE_RSASSAPSS: u32 = 4096;
pub const RSA_FLAG_TYPE_RSAESOAEP: u32 = 8192;
pub const RSA_PSS_SALTLEN_DIGEST: i32 = -1;
pub const RSA_PSS_SALTLEN_AUTO: i32 = -2;
pub const RSA_PSS_SALTLEN_MAX: i32 = -3;
pub const RSA_PSS_SALTLEN_MAX_SIGN: i32 = -2;
pub const EVP_PKEY_CTRL_RSA_PADDING: u32 = 4097;
pub const EVP_PKEY_CTRL_RSA_PSS_SALTLEN: u32 = 4098;
pub const EVP_PKEY_CTRL_RSA_KEYGEN_BITS: u32 = 4099;
pub const EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP: u32 = 4100;
pub const EVP_PKEY_CTRL_RSA_MGF1_MD: u32 = 4101;
pub const EVP_PKEY_CTRL_GET_RSA_PADDING: u32 = 4102;
pub const EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN: u32 = 4103;
pub const EVP_PKEY_CTRL_GET_RSA_MGF1_MD: u32 = 4104;
pub const EVP_PKEY_CTRL_RSA_OAEP_MD: u32 = 4105;
pub const EVP_PKEY_CTRL_RSA_OAEP_LABEL: u32 = 4106;
pub const EVP_PKEY_CTRL_GET_RSA_OAEP_MD: u32 = 4107;
pub const EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL: u32 = 4108;
pub const EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES: u32 = 4109;
pub const RSA_PKCS1_PADDING: u32 = 1;
pub const RSA_NO_PADDING: u32 = 3;
pub const RSA_PKCS1_OAEP_PADDING: u32 = 4;
pub const RSA_X931_PADDING: u32 = 5;
pub const RSA_PKCS1_PSS_PADDING: u32 = 6;
pub const RSA_PKCS1_WITH_TLS_PADDING: u32 = 7;
pub const RSA_PKCS1_PADDING_SIZE: u32 = 11;
pub const RSA_FLAG_FIPS_METHOD: u32 = 1024;
pub const RSA_FLAG_NON_FIPS_ALLOW: u32 = 1024;
pub const RSA_FLAG_CHECKED: u32 = 2048;
pub const EVP_PKEY_CTRL_DSA_PARAMGEN_BITS: u32 = 4097;
pub const EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS: u32 = 4098;
pub const EVP_PKEY_CTRL_DSA_PARAMGEN_MD: u32 = 4099;
pub const DH_PARAMGEN_TYPE_GENERATOR: u32 = 0;
pub const DH_PARAMGEN_TYPE_FIPS_186_2: u32 = 1;
pub const DH_PARAMGEN_TYPE_FIPS_186_4: u32 = 2;
pub const DH_PARAMGEN_TYPE_GROUP: u32 = 3;
pub const EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN: u32 = 4097;
pub const EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR: u32 = 4098;
pub const EVP_PKEY_CTRL_DH_RFC5114: u32 = 4099;
pub const EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN: u32 = 4100;
pub const EVP_PKEY_CTRL_DH_PARAMGEN_TYPE: u32 = 4101;
pub const EVP_PKEY_CTRL_DH_KDF_TYPE: u32 = 4102;
pub const EVP_PKEY_CTRL_DH_KDF_MD: u32 = 4103;
pub const EVP_PKEY_CTRL_GET_DH_KDF_MD: u32 = 4104;
pub const EVP_PKEY_CTRL_DH_KDF_OUTLEN: u32 = 4105;
pub const EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN: u32 = 4106;
pub const EVP_PKEY_CTRL_DH_KDF_UKM: u32 = 4107;
pub const EVP_PKEY_CTRL_GET_DH_KDF_UKM: u32 = 4108;
pub const EVP_PKEY_CTRL_DH_KDF_OID: u32 = 4109;
pub const EVP_PKEY_CTRL_GET_DH_KDF_OID: u32 = 4110;
pub const EVP_PKEY_CTRL_DH_NID: u32 = 4111;
pub const EVP_PKEY_CTRL_DH_PAD: u32 = 4112;
pub const EVP_PKEY_DH_KDF_NONE: u32 = 1;
pub const EVP_PKEY_DH_KDF_X9_42: u32 = 2;
pub const DH_R_BAD_FFC_PARAMETERS: u32 = 127;
pub const DH_R_BAD_GENERATOR: u32 = 101;
pub const DH_R_BN_DECODE_ERROR: u32 = 109;
pub const DH_R_BN_ERROR: u32 = 106;
pub const DH_R_CHECK_INVALID_J_VALUE: u32 = 115;
pub const DH_R_CHECK_INVALID_Q_VALUE: u32 = 116;
pub const DH_R_CHECK_PUBKEY_INVALID: u32 = 122;
pub const DH_R_CHECK_PUBKEY_TOO_LARGE: u32 = 123;
pub const DH_R_CHECK_PUBKEY_TOO_SMALL: u32 = 124;
pub const DH_R_CHECK_P_NOT_PRIME: u32 = 117;
pub const DH_R_CHECK_P_NOT_SAFE_PRIME: u32 = 118;
pub const DH_R_CHECK_Q_NOT_PRIME: u32 = 119;
pub const DH_R_DECODE_ERROR: u32 = 104;
pub const DH_R_INVALID_PARAMETER_NAME: u32 = 110;
pub const DH_R_INVALID_PARAMETER_NID: u32 = 114;
pub const DH_R_INVALID_PUBKEY: u32 = 102;
pub const DH_R_INVALID_SECRET: u32 = 128;
pub const DH_R_KDF_PARAMETER_ERROR: u32 = 112;
pub const DH_R_KEYS_NOT_SET: u32 = 108;
pub const DH_R_MISSING_PUBKEY: u32 = 125;
pub const DH_R_MODULUS_TOO_LARGE: u32 = 103;
pub const DH_R_MODULUS_TOO_SMALL: u32 = 126;
pub const DH_R_NOT_SUITABLE_GENERATOR: u32 = 120;
pub const DH_R_NO_PARAMETERS_SET: u32 = 107;
pub const DH_R_NO_PRIVATE_VALUE: u32 = 100;
pub const DH_R_PARAMETER_ENCODING_ERROR: u32 = 105;
pub const DH_R_PEER_KEY_ERROR: u32 = 111;
pub const DH_R_SHARED_INFO_ERROR: u32 = 113;
pub const DH_R_UNABLE_TO_CHECK_GENERATOR: u32 = 121;
pub const OPENSSL_DH_MAX_MODULUS_BITS: u32 = 10000;
pub const OPENSSL_DH_FIPS_MIN_MODULUS_BITS: u32 = 1024;
pub const DH_FLAG_CACHE_MONT_P: u32 = 1;
pub const DH_FLAG_TYPE_MASK: u32 = 61440;
pub const DH_FLAG_TYPE_DH: u32 = 0;
pub const DH_FLAG_TYPE_DHX: u32 = 4096;
pub const DH_FLAG_NO_EXP_CONSTTIME: u32 = 0;
pub const DH_FLAG_FIPS_METHOD: u32 = 1024;
pub const DH_FLAG_NON_FIPS_ALLOW: u32 = 1024;
pub const DH_GENERATOR_2: u32 = 2;
pub const DH_GENERATOR_3: u32 = 3;
pub const DH_GENERATOR_5: u32 = 5;
pub const DH_CHECK_P_NOT_PRIME: u32 = 1;
pub const DH_CHECK_P_NOT_SAFE_PRIME: u32 = 2;
pub const DH_UNABLE_TO_CHECK_GENERATOR: u32 = 4;
pub const DH_NOT_SUITABLE_GENERATOR: u32 = 8;
pub const DH_CHECK_Q_NOT_PRIME: u32 = 16;
pub const DH_CHECK_INVALID_Q_VALUE: u32 = 32;
pub const DH_CHECK_INVALID_J_VALUE: u32 = 64;
pub const DH_MODULUS_TOO_SMALL: u32 = 128;
pub const DH_MODULUS_TOO_LARGE: u32 = 256;
pub const DH_CHECK_PUBKEY_TOO_SMALL: u32 = 1;
pub const DH_CHECK_PUBKEY_TOO_LARGE: u32 = 2;
pub const DH_CHECK_PUBKEY_INVALID: u32 = 4;
pub const DH_CHECK_P_NOT_STRONG_PRIME: u32 = 2;
pub const DSA_R_BAD_FFC_PARAMETERS: u32 = 114;
pub const DSA_R_BAD_Q_VALUE: u32 = 102;
pub const DSA_R_BN_DECODE_ERROR: u32 = 108;
pub const DSA_R_BN_ERROR: u32 = 109;
pub const DSA_R_DECODE_ERROR: u32 = 104;
pub const DSA_R_INVALID_DIGEST_TYPE: u32 = 106;
pub const DSA_R_INVALID_PARAMETERS: u32 = 112;
pub const DSA_R_MISSING_PARAMETERS: u32 = 101;
pub const DSA_R_MISSING_PRIVATE_KEY: u32 = 111;
pub const DSA_R_MODULUS_TOO_LARGE: u32 = 103;
pub const DSA_R_NO_PARAMETERS_SET: u32 = 107;
pub const DSA_R_PARAMETER_ENCODING_ERROR: u32 = 105;
pub const DSA_R_P_NOT_PRIME: u32 = 115;
pub const DSA_R_Q_NOT_PRIME: u32 = 113;
pub const DSA_R_SEED_LEN_SMALL: u32 = 110;
pub const OPENSSL_DSA_MAX_MODULUS_BITS: u32 = 10000;
pub const OPENSSL_DSA_FIPS_MIN_MODULUS_BITS: u32 = 1024;
pub const DSA_FLAG_NO_EXP_CONSTTIME: u32 = 0;
pub const DSA_FLAG_CACHE_MONT_P: u32 = 1;
pub const DSA_FLAG_FIPS_METHOD: u32 = 1024;
pub const DSA_FLAG_NON_FIPS_ALLOW: u32 = 1024;
pub const DSA_FLAG_FIPS_CHECKED: u32 = 2048;
pub const DSS_prime_checks: u32 = 64;
pub const SHA_DIGEST_LENGTH: u32 = 20;
pub const SHA_LBLOCK: u32 = 16;
pub const SHA_CBLOCK: u32 = 64;
pub const SHA_LAST_BLOCK: u32 = 56;
pub const SHA256_CBLOCK: u32 = 64;
pub const SHA224_DIGEST_LENGTH: u32 = 28;
pub const SHA256_DIGEST_LENGTH: u32 = 32;
pub const SHA384_DIGEST_LENGTH: u32 = 48;
pub const SHA512_DIGEST_LENGTH: u32 = 64;
pub const SHA512_CBLOCK: u32 = 128;
pub const X509_R_AKID_MISMATCH: u32 = 110;
pub const X509_R_BAD_SELECTOR: u32 = 133;
pub const X509_R_BAD_X509_FILETYPE: u32 = 100;
pub const X509_R_BASE64_DECODE_ERROR: u32 = 118;
pub const X509_R_CANT_CHECK_DH_KEY: u32 = 114;
pub const X509_R_CERTIFICATE_VERIFICATION_FAILED: u32 = 139;
pub const X509_R_CERT_ALREADY_IN_HASH_TABLE: u32 = 101;
pub const X509_R_CRL_ALREADY_DELTA: u32 = 127;
pub const X509_R_CRL_VERIFY_FAILURE: u32 = 131;
pub const X509_R_ERROR_GETTING_MD_BY_NID: u32 = 141;
pub const X509_R_ERROR_USING_SIGINF_SET: u32 = 142;
pub const X509_R_IDP_MISMATCH: u32 = 128;
pub const X509_R_INVALID_ATTRIBUTES: u32 = 138;
pub const X509_R_INVALID_DIRECTORY: u32 = 113;
pub const X509_R_INVALID_DISTPOINT: u32 = 143;
pub const X509_R_INVALID_FIELD_NAME: u32 = 119;
pub const X509_R_INVALID_TRUST: u32 = 123;
pub const X509_R_ISSUER_MISMATCH: u32 = 129;
pub const X509_R_KEY_TYPE_MISMATCH: u32 = 115;
pub const X509_R_KEY_VALUES_MISMATCH: u32 = 116;
pub const X509_R_LOADING_CERT_DIR: u32 = 103;
pub const X509_R_LOADING_DEFAULTS: u32 = 104;
pub const X509_R_METHOD_NOT_SUPPORTED: u32 = 124;
pub const X509_R_NAME_TOO_LONG: u32 = 134;
pub const X509_R_NEWER_CRL_NOT_NEWER: u32 = 132;
pub const X509_R_NO_CERTIFICATE_FOUND: u32 = 135;
pub const X509_R_NO_CERTIFICATE_OR_CRL_FOUND: u32 = 136;
pub const X509_R_NO_CERT_SET_FOR_US_TO_VERIFY: u32 = 105;
pub const X509_R_NO_CRL_FOUND: u32 = 137;
pub const X509_R_NO_CRL_NUMBER: u32 = 130;
pub const X509_R_PUBLIC_KEY_DECODE_ERROR: u32 = 125;
pub const X509_R_PUBLIC_KEY_ENCODE_ERROR: u32 = 126;
pub const X509_R_SHOULD_RETRY: u32 = 106;
pub const X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN: u32 = 107;
pub const X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY: u32 = 108;
pub const X509_R_UNKNOWN_KEY_TYPE: u32 = 117;
pub const X509_R_UNKNOWN_NID: u32 = 109;
pub const X509_R_UNKNOWN_PURPOSE_ID: u32 = 121;
pub const X509_R_UNKNOWN_SIGID_ALGS: u32 = 144;
pub const X509_R_UNKNOWN_TRUST_ID: u32 = 120;
pub const X509_R_UNSUPPORTED_ALGORITHM: u32 = 111;
pub const X509_R_WRONG_LOOKUP_TYPE: u32 = 112;
pub const X509_R_WRONG_TYPE: u32 = 122;
pub const X509_SIG_INFO_VALID: u32 = 1;
pub const X509_SIG_INFO_TLS: u32 = 2;
pub const X509_FILETYPE_PEM: u32 = 1;
pub const X509_FILETYPE_ASN1: u32 = 2;
pub const X509_FILETYPE_DEFAULT: u32 = 3;
pub const X509v3_KU_DIGITAL_SIGNATURE: u32 = 128;
pub const X509v3_KU_NON_REPUDIATION: u32 = 64;
pub const X509v3_KU_KEY_ENCIPHERMENT: u32 = 32;
pub const X509v3_KU_DATA_ENCIPHERMENT: u32 = 16;
pub const X509v3_KU_KEY_AGREEMENT: u32 = 8;
pub const X509v3_KU_KEY_CERT_SIGN: u32 = 4;
pub const X509v3_KU_CRL_SIGN: u32 = 2;
pub const X509v3_KU_ENCIPHER_ONLY: u32 = 1;
pub const X509v3_KU_DECIPHER_ONLY: u32 = 32768;
pub const X509v3_KU_UNDEF: u32 = 65535;
pub const X509_EX_V_NETSCAPE_HACK: u32 = 32768;
pub const X509_EX_V_INIT: u32 = 1;
pub const X509_FLAG_COMPAT: u32 = 0;
pub const X509_FLAG_NO_HEADER: u32 = 1;
pub const X509_FLAG_NO_VERSION: u32 = 2;
pub const X509_FLAG_NO_SERIAL: u32 = 4;
pub const X509_FLAG_NO_SIGNAME: u32 = 8;
pub const X509_FLAG_NO_ISSUER: u32 = 16;
pub const X509_FLAG_NO_VALIDITY: u32 = 32;
pub const X509_FLAG_NO_SUBJECT: u32 = 64;
pub const X509_FLAG_NO_PUBKEY: u32 = 128;
pub const X509_FLAG_NO_EXTENSIONS: u32 = 256;
pub const X509_FLAG_NO_SIGDUMP: u32 = 512;
pub const X509_FLAG_NO_AUX: u32 = 1024;
pub const X509_FLAG_NO_ATTRIBUTES: u32 = 2048;
pub const X509_FLAG_NO_IDS: u32 = 4096;
pub const X509_FLAG_EXTENSIONS_ONLY_KID: u32 = 8192;
pub const XN_FLAG_SEP_MASK: u32 = 983040;
pub const XN_FLAG_COMPAT: u32 = 0;
pub const XN_FLAG_SEP_COMMA_PLUS: u32 = 65536;
pub const XN_FLAG_SEP_CPLUS_SPC: u32 = 131072;
pub const XN_FLAG_SEP_SPLUS_SPC: u32 = 196608;
pub const XN_FLAG_SEP_MULTILINE: u32 = 262144;
pub const XN_FLAG_DN_REV: u32 = 1048576;
pub const XN_FLAG_FN_MASK: u32 = 6291456;
pub const XN_FLAG_FN_SN: u32 = 0;
pub const XN_FLAG_FN_LN: u32 = 2097152;
pub const XN_FLAG_FN_OID: u32 = 4194304;
pub const XN_FLAG_FN_NONE: u32 = 6291456;
pub const XN_FLAG_SPC_EQ: u32 = 8388608;
pub const XN_FLAG_DUMP_UNKNOWN_FIELDS: u32 = 16777216;
pub const XN_FLAG_FN_ALIGN: u32 = 33554432;
pub const XN_FLAG_RFC2253: u32 = 17892119;
pub const XN_FLAG_ONELINE: u32 = 8520479;
pub const XN_FLAG_MULTILINE: u32 = 44302342;
pub const LH_LOAD_MULT: u32 = 256;
pub const X509_LU_RETRY: i32 = -1;
pub const X509_LU_FAIL: u32 = 0;
pub const X509_TRUST_DEFAULT: u32 = 0;
pub const X509_TRUST_COMPAT: u32 = 1;
pub const X509_TRUST_SSL_CLIENT: u32 = 2;
pub const X509_TRUST_SSL_SERVER: u32 = 3;
pub const X509_TRUST_EMAIL: u32 = 4;
pub const X509_TRUST_OBJECT_SIGN: u32 = 5;
pub const X509_TRUST_OCSP_SIGN: u32 = 6;
pub const X509_TRUST_OCSP_REQUEST: u32 = 7;
pub const X509_TRUST_TSA: u32 = 8;
pub const X509_TRUST_MIN: u32 = 1;
pub const X509_TRUST_MAX: u32 = 8;
pub const X509_TRUST_DYNAMIC: u32 = 1;
pub const X509_TRUST_DYNAMIC_NAME: u32 = 2;
pub const X509_TRUST_NO_SS_COMPAT: u32 = 4;
pub const X509_TRUST_DO_SS_COMPAT: u32 = 8;
pub const X509_TRUST_OK_ANY_EKU: u32 = 16;
pub const X509_TRUST_TRUSTED: u32 = 1;
pub const X509_TRUST_REJECTED: u32 = 2;
pub const X509_TRUST_UNTRUSTED: u32 = 3;
pub const X509_L_FILE_LOAD: u32 = 1;
pub const X509_L_ADD_DIR: u32 = 2;
pub const X509_L_ADD_STORE: u32 = 3;
pub const X509_L_LOAD_STORE: u32 = 4;
pub const X509_V_OK: u32 = 0;
pub const X509_V_ERR_UNSPECIFIED: u32 = 1;
pub const X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: u32 = 2;
pub const X509_V_ERR_UNABLE_TO_GET_CRL: u32 = 3;
pub const X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: u32 = 4;
pub const X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: u32 = 5;
pub const X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: u32 = 6;
pub const X509_V_ERR_CERT_SIGNATURE_FAILURE: u32 = 7;
pub const X509_V_ERR_CRL_SIGNATURE_FAILURE: u32 = 8;
pub const X509_V_ERR_CERT_NOT_YET_VALID: u32 = 9;
pub const X509_V_ERR_CERT_HAS_EXPIRED: u32 = 10;
pub const X509_V_ERR_CRL_NOT_YET_VALID: u32 = 11;
pub const X509_V_ERR_CRL_HAS_EXPIRED: u32 = 12;
pub const X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: u32 = 13;
pub const X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: u32 = 14;
pub const X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: u32 = 15;
pub const X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: u32 = 16;
pub const X509_V_ERR_OUT_OF_MEM: u32 = 17;
pub const X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: u32 = 18;
pub const X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: u32 = 19;
pub const X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: u32 = 20;
pub const X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: u32 = 21;
pub const X509_V_ERR_CERT_CHAIN_TOO_LONG: u32 = 22;
pub const X509_V_ERR_CERT_REVOKED: u32 = 23;
pub const X509_V_ERR_NO_ISSUER_PUBLIC_KEY: u32 = 24;
pub const X509_V_ERR_PATH_LENGTH_EXCEEDED: u32 = 25;
pub const X509_V_ERR_INVALID_PURPOSE: u32 = 26;
pub const X509_V_ERR_CERT_UNTRUSTED: u32 = 27;
pub const X509_V_ERR_CERT_REJECTED: u32 = 28;
pub const X509_V_ERR_SUBJECT_ISSUER_MISMATCH: u32 = 29;
pub const X509_V_ERR_AKID_SKID_MISMATCH: u32 = 30;
pub const X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: u32 = 31;
pub const X509_V_ERR_KEYUSAGE_NO_CERTSIGN: u32 = 32;
pub const X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER: u32 = 33;
pub const X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION: u32 = 34;
pub const X509_V_ERR_KEYUSAGE_NO_CRL_SIGN: u32 = 35;
pub const X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION: u32 = 36;
pub const X509_V_ERR_INVALID_NON_CA: u32 = 37;
pub const X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED: u32 = 38;
pub const X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE: u32 = 39;
pub const X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED: u32 = 40;
pub const X509_V_ERR_INVALID_EXTENSION: u32 = 41;
pub const X509_V_ERR_INVALID_POLICY_EXTENSION: u32 = 42;
pub const X509_V_ERR_NO_EXPLICIT_POLICY: u32 = 43;
pub const X509_V_ERR_DIFFERENT_CRL_SCOPE: u32 = 44;
pub const X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE: u32 = 45;
pub const X509_V_ERR_UNNESTED_RESOURCE: u32 = 46;
pub const X509_V_ERR_PERMITTED_VIOLATION: u32 = 47;
pub const X509_V_ERR_EXCLUDED_VIOLATION: u32 = 48;
pub const X509_V_ERR_SUBTREE_MINMAX: u32 = 49;
pub const X509_V_ERR_APPLICATION_VERIFICATION: u32 = 50;
pub const X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE: u32 = 51;
pub const X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX: u32 = 52;
pub const X509_V_ERR_UNSUPPORTED_NAME_SYNTAX: u32 = 53;
pub const X509_V_ERR_CRL_PATH_VALIDATION_ERROR: u32 = 54;
pub const X509_V_ERR_PATH_LOOP: u32 = 55;
pub const X509_V_ERR_SUITE_B_INVALID_VERSION: u32 = 56;
pub const X509_V_ERR_SUITE_B_INVALID_ALGORITHM: u32 = 57;
pub const X509_V_ERR_SUITE_B_INVALID_CURVE: u32 = 58;
pub const X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM: u32 = 59;
pub const X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED: u32 = 60;
pub const X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256: u32 = 61;
pub const X509_V_ERR_HOSTNAME_MISMATCH: u32 = 62;
pub const X509_V_ERR_EMAIL_MISMATCH: u32 = 63;
pub const X509_V_ERR_IP_ADDRESS_MISMATCH: u32 = 64;
pub const X509_V_ERR_DANE_NO_MATCH: u32 = 65;
pub const X509_V_ERR_EE_KEY_TOO_SMALL: u32 = 66;
pub const X509_V_ERR_CA_KEY_TOO_SMALL: u32 = 67;
pub const X509_V_ERR_CA_MD_TOO_WEAK: u32 = 68;
pub const X509_V_ERR_INVALID_CALL: u32 = 69;
pub const X509_V_ERR_STORE_LOOKUP: u32 = 70;
pub const X509_V_ERR_NO_VALID_SCTS: u32 = 71;
pub const X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION: u32 = 72;
pub const X509_V_ERR_OCSP_VERIFY_NEEDED: u32 = 73;
pub const X509_V_ERR_OCSP_VERIFY_FAILED: u32 = 74;
pub const X509_V_ERR_OCSP_CERT_UNKNOWN: u32 = 75;
pub const X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM: u32 = 76;
pub const X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH: u32 = 77;
pub const X509_V_ERR_SIGNATURE_ALGORITHM_INCONSISTENCY: u32 = 78;
pub const X509_V_ERR_INVALID_CA: u32 = 79;
pub const X509_V_ERR_PATHLEN_INVALID_FOR_NON_CA: u32 = 80;
pub const X509_V_ERR_PATHLEN_WITHOUT_KU_KEY_CERT_SIGN: u32 = 81;
pub const X509_V_ERR_KU_KEY_CERT_SIGN_INVALID_FOR_NON_CA: u32 = 82;
pub const X509_V_ERR_ISSUER_NAME_EMPTY: u32 = 83;
pub const X509_V_ERR_SUBJECT_NAME_EMPTY: u32 = 84;
pub const X509_V_ERR_MISSING_AUTHORITY_KEY_IDENTIFIER: u32 = 85;
pub const X509_V_ERR_MISSING_SUBJECT_KEY_IDENTIFIER: u32 = 86;
pub const X509_V_ERR_EMPTY_SUBJECT_ALT_NAME: u32 = 87;
pub const X509_V_ERR_EMPTY_SUBJECT_SAN_NOT_CRITICAL: u32 = 88;
pub const X509_V_ERR_CA_BCONS_NOT_CRITICAL: u32 = 89;
pub const X509_V_ERR_AUTHORITY_KEY_IDENTIFIER_CRITICAL: u32 = 90;
pub const X509_V_ERR_SUBJECT_KEY_IDENTIFIER_CRITICAL: u32 = 91;
pub const X509_V_ERR_CA_CERT_MISSING_KEY_USAGE: u32 = 92;
pub const X509_V_ERR_EXTENSIONS_REQUIRE_VERSION_3: u32 = 93;
pub const X509_V_ERR_EC_KEY_EXPLICIT_PARAMS: u32 = 94;
pub const X509_V_FLAG_CB_ISSUER_CHECK: u32 = 0;
pub const X509_V_FLAG_USE_CHECK_TIME: u32 = 2;
pub const X509_V_FLAG_CRL_CHECK: u32 = 4;
pub const X509_V_FLAG_CRL_CHECK_ALL: u32 = 8;
pub const X509_V_FLAG_IGNORE_CRITICAL: u32 = 16;
pub const X509_V_FLAG_X509_STRICT: u32 = 32;
pub const X509_V_FLAG_ALLOW_PROXY_CERTS: u32 = 64;
pub const X509_V_FLAG_POLICY_CHECK: u32 = 128;
pub const X509_V_FLAG_EXPLICIT_POLICY: u32 = 256;
pub const X509_V_FLAG_INHIBIT_ANY: u32 = 512;
pub const X509_V_FLAG_INHIBIT_MAP: u32 = 1024;
pub const X509_V_FLAG_NOTIFY_POLICY: u32 = 2048;
pub const X509_V_FLAG_EXTENDED_CRL_SUPPORT: u32 = 4096;
pub const X509_V_FLAG_USE_DELTAS: u32 = 8192;
pub const X509_V_FLAG_CHECK_SS_SIGNATURE: u32 = 16384;
pub const X509_V_FLAG_TRUSTED_FIRST: u32 = 32768;
pub const X509_V_FLAG_SUITEB_128_LOS_ONLY: u32 = 65536;
pub const X509_V_FLAG_SUITEB_192_LOS: u32 = 131072;
pub const X509_V_FLAG_SUITEB_128_LOS: u32 = 196608;
pub const X509_V_FLAG_PARTIAL_CHAIN: u32 = 524288;
pub const X509_V_FLAG_NO_ALT_CHAINS: u32 = 1048576;
pub const X509_V_FLAG_NO_CHECK_TIME: u32 = 2097152;
pub const X509_VP_FLAG_DEFAULT: u32 = 1;
pub const X509_VP_FLAG_OVERWRITE: u32 = 2;
pub const X509_VP_FLAG_RESET_FLAGS: u32 = 4;
pub const X509_VP_FLAG_LOCKED: u32 = 8;
pub const X509_VP_FLAG_ONCE: u32 = 16;
pub const X509_V_FLAG_POLICY_MASK: u32 = 1920;
pub const DANE_FLAG_NO_DANE_EE_NAMECHECKS: u32 = 1;
pub const X509_PCY_TREE_FAILURE: i32 = -2;
pub const X509_PCY_TREE_INVALID: i32 = -1;
pub const X509_PCY_TREE_INTERNAL: u32 = 0;
pub const X509_PCY_TREE_VALID: u32 = 1;
pub const X509_PCY_TREE_EMPTY: u32 = 2;
pub const X509_PCY_TREE_EXPLICIT: u32 = 4;
pub const PKCS7_R_CERTIFICATE_VERIFY_ERROR: u32 = 117;
pub const PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER: u32 = 144;
pub const PKCS7_R_CIPHER_NOT_INITIALIZED: u32 = 116;
pub const PKCS7_R_CONTENT_AND_DATA_PRESENT: u32 = 118;
pub const PKCS7_R_CTRL_ERROR: u32 = 152;
pub const PKCS7_R_DECRYPT_ERROR: u32 = 119;
pub const PKCS7_R_DIGEST_FAILURE: u32 = 101;
pub const PKCS7_R_ENCRYPTION_CTRL_FAILURE: u32 = 149;
pub const PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE: u32 = 150;
pub const PKCS7_R_ERROR_ADDING_RECIPIENT: u32 = 120;
pub const PKCS7_R_ERROR_SETTING_CIPHER: u32 = 121;
pub const PKCS7_R_INVALID_NULL_POINTER: u32 = 143;
pub const PKCS7_R_INVALID_SIGNED_DATA_TYPE: u32 = 155;
pub const PKCS7_R_NO_CONTENT: u32 = 122;
pub const PKCS7_R_NO_DEFAULT_DIGEST: u32 = 151;
pub const PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND: u32 = 154;
pub const PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE: u32 = 115;
pub const PKCS7_R_NO_SIGNATURES_ON_DATA: u32 = 123;
pub const PKCS7_R_NO_SIGNERS: u32 = 142;
pub const PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE: u32 = 104;
pub const PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR: u32 = 124;
pub const PKCS7_R_PKCS7_ADD_SIGNER_ERROR: u32 = 153;
pub const PKCS7_R_PKCS7_DATASIGN: u32 = 145;
pub const PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE: u32 = 127;
pub const PKCS7_R_SIGNATURE_FAILURE: u32 = 105;
pub const PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND: u32 = 128;
pub const PKCS7_R_SIGNING_CTRL_FAILURE: u32 = 147;
pub const PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE: u32 = 148;
pub const PKCS7_R_SMIME_TEXT_ERROR: u32 = 129;
pub const PKCS7_R_UNABLE_TO_FIND_CERTIFICATE: u32 = 106;
pub const PKCS7_R_UNABLE_TO_FIND_MEM_BIO: u32 = 107;
pub const PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST: u32 = 108;
pub const PKCS7_R_UNKNOWN_DIGEST_TYPE: u32 = 109;
pub const PKCS7_R_UNKNOWN_OPERATION: u32 = 110;
pub const PKCS7_R_UNSUPPORTED_CIPHER_TYPE: u32 = 111;
pub const PKCS7_R_UNSUPPORTED_CONTENT_TYPE: u32 = 112;
pub const PKCS7_R_WRONG_CONTENT_TYPE: u32 = 113;
pub const PKCS7_R_WRONG_PKCS7_TYPE: u32 = 114;
pub const PKCS7_S_HEADER: u32 = 0;
pub const PKCS7_S_BODY: u32 = 1;
pub const PKCS7_S_TAIL: u32 = 2;
pub const PKCS7_OP_SET_DETACHED_SIGNATURE: u32 = 1;
pub const PKCS7_OP_GET_DETACHED_SIGNATURE: u32 = 2;
pub const PKCS7_TEXT: u32 = 1;
pub const PKCS7_NOCERTS: u32 = 2;
pub const PKCS7_NOSIGS: u32 = 4;
pub const PKCS7_NOCHAIN: u32 = 8;
pub const PKCS7_NOINTERN: u32 = 16;
pub const PKCS7_NOVERIFY: u32 = 32;
pub const PKCS7_DETACHED: u32 = 64;
pub const PKCS7_BINARY: u32 = 128;
pub const PKCS7_NOATTR: u32 = 256;
pub const PKCS7_NOSMIMECAP: u32 = 512;
pub const PKCS7_NOOLDMIMETYPE: u32 = 1024;
pub const PKCS7_CRLFEOL: u32 = 2048;
pub const PKCS7_STREAM: u32 = 4096;
pub const PKCS7_NOCRL: u32 = 8192;
pub const PKCS7_PARTIAL: u32 = 16384;
pub const PKCS7_REUSE_DIGEST: u32 = 32768;
pub const PKCS7_NO_DUAL_CONTENT: u32 = 65536;
pub const SMIME_TEXT: u32 = 1;
pub const SMIME_NOCERTS: u32 = 2;
pub const SMIME_NOSIGS: u32 = 4;
pub const SMIME_NOCHAIN: u32 = 8;
pub const SMIME_NOINTERN: u32 = 16;
pub const SMIME_NOVERIFY: u32 = 32;
pub const SMIME_DETACHED: u32 = 64;
pub const SMIME_BINARY: u32 = 128;
pub const SMIME_NOATTR: u32 = 256;
pub const SMIME_ASCIICRLF: u32 = 524288;
pub const X509_EXT_PACK_UNKNOWN: u32 = 1;
pub const X509_EXT_PACK_STRING: u32 = 2;
pub const CONF_R_ERROR_LOADING_DSO: u32 = 110;
pub const CONF_R_INVALID_PRAGMA: u32 = 122;
pub const CONF_R_LIST_CANNOT_BE_NULL: u32 = 115;
pub const CONF_R_MANDATORY_BRACES_IN_VARIABLE_EXPANSION: u32 = 123;
pub const CONF_R_MISSING_CLOSE_SQUARE_BRACKET: u32 = 100;
pub const CONF_R_MISSING_EQUAL_SIGN: u32 = 101;
pub const CONF_R_MISSING_INIT_FUNCTION: u32 = 112;
pub const CONF_R_MODULE_INITIALIZATION_ERROR: u32 = 109;
pub const CONF_R_NO_CLOSE_BRACE: u32 = 102;
pub const CONF_R_NO_CONF: u32 = 105;
pub const CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE: u32 = 106;
pub const CONF_R_NO_SECTION: u32 = 107;
pub const CONF_R_NO_SUCH_FILE: u32 = 114;
pub const CONF_R_NO_VALUE: u32 = 108;
pub const CONF_R_NUMBER_TOO_LARGE: u32 = 121;
pub const CONF_R_OPENSSL_CONF_REFERENCES_MISSING_SECTION: u32 = 124;
pub const CONF_R_RECURSIVE_DIRECTORY_INCLUDE: u32 = 111;
pub const CONF_R_RELATIVE_PATH: u32 = 125;
pub const CONF_R_SSL_COMMAND_SECTION_EMPTY: u32 = 117;
pub const CONF_R_SSL_COMMAND_SECTION_NOT_FOUND: u32 = 118;
pub const CONF_R_SSL_SECTION_EMPTY: u32 = 119;
pub const CONF_R_SSL_SECTION_NOT_FOUND: u32 = 120;
pub const CONF_R_UNABLE_TO_CREATE_NEW_SECTION: u32 = 103;
pub const CONF_R_UNKNOWN_MODULE_NAME: u32 = 113;
pub const CONF_R_VARIABLE_EXPANSION_TOO_LONG: u32 = 116;
pub const CONF_R_VARIABLE_HAS_NO_VALUE: u32 = 104;
pub const CONF_MFLAGS_IGNORE_ERRORS: u32 = 1;
pub const CONF_MFLAGS_IGNORE_RETURN_CODES: u32 = 2;
pub const CONF_MFLAGS_SILENT: u32 = 4;
pub const CONF_MFLAGS_NO_DSO: u32 = 8;
pub const CONF_MFLAGS_IGNORE_MISSING_FILE: u32 = 16;
pub const CONF_MFLAGS_DEFAULT_SECTION: u32 = 32;
pub const OSSL_HTTP_NAME: &[u8; 5usize] = b"http\0";
pub const OSSL_HTTPS_NAME: &[u8; 6usize] = b"https\0";
pub const OSSL_HTTP_PREFIX: &[u8; 8usize] = b"http://\0";
pub const OSSL_HTTPS_PREFIX: &[u8; 9usize] = b"https://\0";
pub const OSSL_HTTP_PORT: &[u8; 3usize] = b"80\0";
pub const OSSL_HTTPS_PORT: &[u8; 4usize] = b"443\0";
pub const OPENSSL_NO_PROXY: &[u8; 9usize] = b"NO_PROXY\0";
pub const OPENSSL_HTTP_PROXY: &[u8; 11usize] = b"HTTP_PROXY\0";
pub const OPENSSL_HTTPS_PROXY: &[u8; 12usize] = b"HTTPS_PROXY\0";
pub const OSSL_HTTP_DEFAULT_MAX_LINE_LEN: u32 = 4096;
pub const OSSL_HTTP_DEFAULT_MAX_RESP_LEN: u32 = 102400;
pub const X509_VERSION_1: u32 = 0;
pub const X509_VERSION_2: u32 = 1;
pub const X509_VERSION_3: u32 = 2;
pub const X509_REQ_VERSION_1: u32 = 0;
pub const X509_CRL_VERSION_1: u32 = 0;
pub const X509_CRL_VERSION_2: u32 = 1;
pub const X509_ADD_FLAG_DEFAULT: u32 = 0;
pub const X509_ADD_FLAG_UP_REF: u32 = 1;
pub const X509_ADD_FLAG_PREPEND: u32 = 2;
pub const X509_ADD_FLAG_NO_DUP: u32 = 4;
pub const X509_ADD_FLAG_NO_SS: u32 = 8;
pub const RAND_R_ADDITIONAL_INPUT_TOO_LONG: u32 = 102;
pub const RAND_R_ALREADY_INSTANTIATED: u32 = 103;
pub const RAND_R_ARGUMENT_OUT_OF_RANGE: u32 = 105;
pub const RAND_R_CANNOT_OPEN_FILE: u32 = 121;
pub const RAND_R_DRBG_ALREADY_INITIALIZED: u32 = 129;
pub const RAND_R_DRBG_NOT_INITIALISED: u32 = 104;
pub const RAND_R_ENTROPY_INPUT_TOO_LONG: u32 = 106;
pub const RAND_R_ENTROPY_OUT_OF_RANGE: u32 = 124;
pub const RAND_R_ERROR_ENTROPY_POOL_WAS_IGNORED: u32 = 127;
pub const RAND_R_ERROR_INITIALISING_DRBG: u32 = 107;
pub const RAND_R_ERROR_INSTANTIATING_DRBG: u32 = 108;
pub const RAND_R_ERROR_RETRIEVING_ADDITIONAL_INPUT: u32 = 109;
pub const RAND_R_ERROR_RETRIEVING_ENTROPY: u32 = 110;
pub const RAND_R_ERROR_RETRIEVING_NONCE: u32 = 111;
pub const RAND_R_FAILED_TO_CREATE_LOCK: u32 = 126;
pub const RAND_R_FUNC_NOT_IMPLEMENTED: u32 = 101;
pub const RAND_R_FWRITE_ERROR: u32 = 123;
pub const RAND_R_GENERATE_ERROR: u32 = 112;
pub const RAND_R_INSUFFICIENT_DRBG_STRENGTH: u32 = 139;
pub const RAND_R_INTERNAL_ERROR: u32 = 113;
pub const RAND_R_IN_ERROR_STATE: u32 = 114;
pub const RAND_R_NOT_A_REGULAR_FILE: u32 = 122;
pub const RAND_R_NOT_INSTANTIATED: u32 = 115;
pub const RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED: u32 = 128;
pub const RAND_R_PARENT_LOCKING_NOT_ENABLED: u32 = 130;
pub const RAND_R_PARENT_STRENGTH_TOO_WEAK: u32 = 131;
pub const RAND_R_PERSONALISATION_STRING_TOO_LONG: u32 = 116;
pub const RAND_R_PREDICTION_RESISTANCE_NOT_SUPPORTED: u32 = 133;
pub const RAND_R_PRNG_NOT_SEEDED: u32 = 100;
pub const RAND_R_RANDOM_POOL_OVERFLOW: u32 = 125;
pub const RAND_R_RANDOM_POOL_UNDERFLOW: u32 = 134;
pub const RAND_R_REQUEST_TOO_LARGE_FOR_DRBG: u32 = 117;
pub const RAND_R_RESEED_ERROR: u32 = 118;
pub const RAND_R_SELFTEST_FAILURE: u32 = 119;
pub const RAND_R_TOO_LITTLE_NONCE_REQUESTED: u32 = 135;
pub const RAND_R_TOO_MUCH_NONCE_REQUESTED: u32 = 136;
pub const RAND_R_UNABLE_TO_CREATE_DRBG: u32 = 143;
pub const RAND_R_UNABLE_TO_FETCH_DRBG: u32 = 144;
pub const RAND_R_UNABLE_TO_GET_PARENT_RESEED_PROP_COUNTER: u32 = 141;
pub const RAND_R_UNABLE_TO_GET_PARENT_STRENGTH: u32 = 138;
pub const RAND_R_UNABLE_TO_LOCK_PARENT: u32 = 140;
pub const RAND_R_UNSUPPORTED_DRBG_FLAGS: u32 = 132;
pub const RAND_R_UNSUPPORTED_DRBG_TYPE: u32 = 120;
pub const RAND_DRBG_STRENGTH: u32 = 256;
pub const PEM_R_BAD_BASE64_DECODE: u32 = 100;
pub const PEM_R_BAD_DECRYPT: u32 = 101;
pub const PEM_R_BAD_END_LINE: u32 = 102;
pub const PEM_R_BAD_IV_CHARS: u32 = 103;
pub const PEM_R_BAD_MAGIC_NUMBER: u32 = 116;
pub const PEM_R_BAD_PASSWORD_READ: u32 = 104;
pub const PEM_R_BAD_VERSION_NUMBER: u32 = 117;
pub const PEM_R_BIO_WRITE_FAILURE: u32 = 118;
pub const PEM_R_CIPHER_IS_NULL: u32 = 127;
pub const PEM_R_ERROR_CONVERTING_PRIVATE_KEY: u32 = 115;
pub const PEM_R_EXPECTING_DSS_KEY_BLOB: u32 = 131;
pub const PEM_R_EXPECTING_PRIVATE_KEY_BLOB: u32 = 119;
pub const PEM_R_EXPECTING_PUBLIC_KEY_BLOB: u32 = 120;
pub const PEM_R_EXPECTING_RSA_KEY_BLOB: u32 = 132;
pub const PEM_R_HEADER_TOO_LONG: u32 = 128;
pub const PEM_R_INCONSISTENT_HEADER: u32 = 121;
pub const PEM_R_KEYBLOB_HEADER_PARSE_ERROR: u32 = 122;
pub const PEM_R_KEYBLOB_TOO_SHORT: u32 = 123;
pub const PEM_R_MISSING_DEK_IV: u32 = 129;
pub const PEM_R_NOT_DEK_INFO: u32 = 105;
pub const PEM_R_NOT_ENCRYPTED: u32 = 106;
pub const PEM_R_NOT_PROC_TYPE: u32 = 107;
pub const PEM_R_NO_START_LINE: u32 = 108;
pub const PEM_R_PROBLEMS_GETTING_PASSWORD: u32 = 109;
pub const PEM_R_PVK_DATA_TOO_SHORT: u32 = 124;
pub const PEM_R_PVK_TOO_SHORT: u32 = 125;
pub const PEM_R_READ_KEY: u32 = 111;
pub const PEM_R_SHORT_HEADER: u32 = 112;
pub const PEM_R_UNEXPECTED_DEK_IV: u32 = 130;
pub const PEM_R_UNSUPPORTED_CIPHER: u32 = 113;
pub const PEM_R_UNSUPPORTED_ENCRYPTION: u32 = 114;
pub const PEM_R_UNSUPPORTED_KEY_COMPONENTS: u32 = 126;
pub const PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE: u32 = 110;
pub const PEM_BUFSIZE: u32 = 1024;
pub const PEM_STRING_X509_OLD: &[u8; 17usize] = b"X509 CERTIFICATE\0";
pub const PEM_STRING_X509: &[u8; 12usize] = b"CERTIFICATE\0";
pub const PEM_STRING_X509_TRUSTED: &[u8; 20usize] = b"TRUSTED CERTIFICATE\0";
pub const PEM_STRING_X509_REQ_OLD: &[u8; 24usize] = b"NEW CERTIFICATE REQUEST\0";
pub const PEM_STRING_X509_REQ: &[u8; 20usize] = b"CERTIFICATE REQUEST\0";
pub const PEM_STRING_X509_CRL: &[u8; 9usize] = b"X509 CRL\0";
pub const PEM_STRING_EVP_PKEY: &[u8; 16usize] = b"ANY PRIVATE KEY\0";
pub const PEM_STRING_PUBLIC: &[u8; 11usize] = b"PUBLIC KEY\0";
pub const PEM_STRING_RSA: &[u8; 16usize] = b"RSA PRIVATE KEY\0";
pub const PEM_STRING_RSA_PUBLIC: &[u8; 15usize] = b"RSA PUBLIC KEY\0";
pub const PEM_STRING_DSA: &[u8; 16usize] = b"DSA PRIVATE KEY\0";
pub const PEM_STRING_DSA_PUBLIC: &[u8; 15usize] = b"DSA PUBLIC KEY\0";
pub const PEM_STRING_PKCS7: &[u8; 6usize] = b"PKCS7\0";
pub const PEM_STRING_PKCS7_SIGNED: &[u8; 20usize] = b"PKCS #7 SIGNED DATA\0";
pub const PEM_STRING_PKCS8: &[u8; 22usize] = b"ENCRYPTED PRIVATE KEY\0";
pub const PEM_STRING_PKCS8INF: &[u8; 12usize] = b"PRIVATE KEY\0";
pub const PEM_STRING_DHPARAMS: &[u8; 14usize] = b"DH PARAMETERS\0";
pub const PEM_STRING_DHXPARAMS: &[u8; 20usize] = b"X9.42 DH PARAMETERS\0";
pub const PEM_STRING_SSL_SESSION: &[u8; 23usize] = b"SSL SESSION PARAMETERS\0";
pub const PEM_STRING_DSAPARAMS: &[u8; 15usize] = b"DSA PARAMETERS\0";
pub const PEM_STRING_ECDSA_PUBLIC: &[u8; 17usize] = b"ECDSA PUBLIC KEY\0";
pub const PEM_STRING_ECPARAMETERS: &[u8; 14usize] = b"EC PARAMETERS\0";
pub const PEM_STRING_ECPRIVATEKEY: &[u8; 15usize] = b"EC PRIVATE KEY\0";
pub const PEM_STRING_PARAMETERS: &[u8; 11usize] = b"PARAMETERS\0";
pub const PEM_STRING_CMS: &[u8; 4usize] = b"CMS\0";
pub const PEM_TYPE_ENCRYPTED: u32 = 10;
pub const PEM_TYPE_MIC_ONLY: u32 = 20;
pub const PEM_TYPE_MIC_CLEAR: u32 = 30;
pub const PEM_TYPE_CLEAR: u32 = 40;
pub const PEM_FLAG_SECURE: u32 = 1;
pub const PEM_FLAG_EAY_COMPATIBLE: u32 = 2;
pub const PEM_FLAG_ONLY_B64: u32 = 4;
pub const UI_R_COMMON_OK_AND_CANCEL_CHARACTERS: u32 = 104;
pub const UI_R_INDEX_TOO_LARGE: u32 = 102;
pub const UI_R_INDEX_TOO_SMALL: u32 = 103;
pub const UI_R_NO_RESULT_BUFFER: u32 = 105;
pub const UI_R_PROCESSING_ERROR: u32 = 107;
pub const UI_R_RESULT_TOO_LARGE: u32 = 100;
pub const UI_R_RESULT_TOO_SMALL: u32 = 101;
pub const UI_R_SYSASSIGN_ERROR: u32 = 109;
pub const UI_R_SYSDASSGN_ERROR: u32 = 110;
pub const UI_R_SYSQIOW_ERROR: u32 = 111;
pub const UI_R_UNKNOWN_CONTROL_COMMAND: u32 = 106;
pub const UI_R_UNKNOWN_TTYGET_ERRNO_VALUE: u32 = 108;
pub const UI_R_USER_DATA_DUPLICATION_UNSUPPORTED: u32 = 112;
pub const UI_INPUT_FLAG_ECHO: u32 = 1;
pub const UI_INPUT_FLAG_DEFAULT_PWD: u32 = 2;
pub const UI_INPUT_FLAG_USER_BASE: u32 = 16;
pub const UI_CTRL_PRINT_ERRORS: u32 = 1;
pub const UI_CTRL_IS_REDOABLE: u32 = 2;
pub const ERR_TXT_MALLOCED: u32 = 1;
pub const ERR_TXT_STRING: u32 = 2;
pub const ERR_FLAG_MARK: u32 = 1;
pub const ERR_FLAG_CLEAR: u32 = 2;
pub const ERR_NUM_ERRORS: u32 = 16;
pub const ERR_LIB_NONE: u32 = 1;
pub const ERR_LIB_SYS: u32 = 2;
pub const ERR_LIB_BN: u32 = 3;
pub const ERR_LIB_RSA: u32 = 4;
pub const ERR_LIB_DH: u32 = 5;
pub const ERR_LIB_EVP: u32 = 6;
pub const ERR_LIB_BUF: u32 = 7;
pub const ERR_LIB_OBJ: u32 = 8;
pub const ERR_LIB_PEM: u32 = 9;
pub const ERR_LIB_DSA: u32 = 10;
pub const ERR_LIB_X509: u32 = 11;
pub const ERR_LIB_ASN1: u32 = 13;
pub const ERR_LIB_CONF: u32 = 14;
pub const ERR_LIB_CRYPTO: u32 = 15;
pub const ERR_LIB_EC: u32 = 16;
pub const ERR_LIB_SSL: u32 = 20;
pub const ERR_LIB_BIO: u32 = 32;
pub const ERR_LIB_PKCS7: u32 = 33;
pub const ERR_LIB_X509V3: u32 = 34;
pub const ERR_LIB_PKCS12: u32 = 35;
pub const ERR_LIB_RAND: u32 = 36;
pub const ERR_LIB_DSO: u32 = 37;
pub const ERR_LIB_ENGINE: u32 = 38;
pub const ERR_LIB_OCSP: u32 = 39;
pub const ERR_LIB_UI: u32 = 40;
pub const ERR_LIB_COMP: u32 = 41;
pub const ERR_LIB_ECDSA: u32 = 42;
pub const ERR_LIB_ECDH: u32 = 43;
pub const ERR_LIB_OSSL_STORE: u32 = 44;
pub const ERR_LIB_FIPS: u32 = 45;
pub const ERR_LIB_CMS: u32 = 46;
pub const ERR_LIB_TS: u32 = 47;
pub const ERR_LIB_HMAC: u32 = 48;
pub const ERR_LIB_CT: u32 = 50;
pub const ERR_LIB_ASYNC: u32 = 51;
pub const ERR_LIB_KDF: u32 = 52;
pub const ERR_LIB_SM2: u32 = 53;
pub const ERR_LIB_ESS: u32 = 54;
pub const ERR_LIB_PROP: u32 = 55;
pub const ERR_LIB_CRMF: u32 = 56;
pub const ERR_LIB_PROV: u32 = 57;
pub const ERR_LIB_CMP: u32 = 58;
pub const ERR_LIB_OSSL_ENCODER: u32 = 59;
pub const ERR_LIB_OSSL_DECODER: u32 = 60;
pub const ERR_LIB_HTTP: u32 = 61;
pub const ERR_LIB_USER: u32 = 128;
pub const ERR_LIB_OFFSET: u32 = 23;
pub const ERR_LIB_MASK: u32 = 255;
pub const ERR_RFLAGS_OFFSET: u32 = 18;
pub const ERR_RFLAGS_MASK: u32 = 31;
pub const ERR_REASON_MASK: u32 = 8388607;
pub const ERR_RFLAG_FATAL: u32 = 262144;
pub const ERR_RFLAG_COMMON: u32 = 524288;
pub const SYS_F_FOPEN: u32 = 0;
pub const SYS_F_CONNECT: u32 = 0;
pub const SYS_F_GETSERVBYNAME: u32 = 0;
pub const SYS_F_SOCKET: u32 = 0;
pub const SYS_F_IOCTLSOCKET: u32 = 0;
pub const SYS_F_BIND: u32 = 0;
pub const SYS_F_LISTEN: u32 = 0;
pub const SYS_F_ACCEPT: u32 = 0;
pub const SYS_F_WSASTARTUP: u32 = 0;
pub const SYS_F_OPENDIR: u32 = 0;
pub const SYS_F_FREAD: u32 = 0;
pub const SYS_F_GETADDRINFO: u32 = 0;
pub const SYS_F_GETNAMEINFO: u32 = 0;
pub const SYS_F_SETSOCKOPT: u32 = 0;
pub const SYS_F_GETSOCKOPT: u32 = 0;
pub const SYS_F_GETSOCKNAME: u32 = 0;
pub const SYS_F_GETHOSTBYNAME: u32 = 0;
pub const SYS_F_FFLUSH: u32 = 0;
pub const SYS_F_OPEN: u32 = 0;
pub const SYS_F_CLOSE: u32 = 0;
pub const SYS_F_IOCTL: u32 = 0;
pub const SYS_F_STAT: u32 = 0;
pub const SYS_F_FCNTL: u32 = 0;
pub const SYS_F_FSTAT: u32 = 0;
pub const SYS_F_SENDFILE: u32 = 0;
pub const ERR_R_SYS_LIB: u32 = 524290;
pub const ERR_R_BN_LIB: u32 = 524291;
pub const ERR_R_RSA_LIB: u32 = 524292;
pub const ERR_R_DH_LIB: u32 = 524293;
pub const ERR_R_EVP_LIB: u32 = 524294;
pub const ERR_R_BUF_LIB: u32 = 524295;
pub const ERR_R_OBJ_LIB: u32 = 524296;
pub const ERR_R_PEM_LIB: u32 = 524297;
pub const ERR_R_DSA_LIB: u32 = 524298;
pub const ERR_R_X509_LIB: u32 = 524299;
pub const ERR_R_ASN1_LIB: u32 = 524301;
pub const ERR_R_CRYPTO_LIB: u32 = 524303;
pub const ERR_R_EC_LIB: u32 = 524304;
pub const ERR_R_BIO_LIB: u32 = 524320;
pub const ERR_R_PKCS7_LIB: u32 = 524321;
pub const ERR_R_X509V3_LIB: u32 = 524322;
pub const ERR_R_ENGINE_LIB: u32 = 524326;
pub const ERR_R_UI_LIB: u32 = 524328;
pub const ERR_R_ECDSA_LIB: u32 = 524330;
pub const ERR_R_OSSL_STORE_LIB: u32 = 524332;
pub const ERR_R_OSSL_DECODER_LIB: u32 = 524348;
pub const ERR_R_FATAL: u32 = 786432;
pub const ERR_R_MALLOC_FAILURE: u32 = 786688;
pub const ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED: u32 = 786689;
pub const ERR_R_PASSED_NULL_PARAMETER: u32 = 786690;
pub const ERR_R_INTERNAL_ERROR: u32 = 786691;
pub const ERR_R_DISABLED: u32 = 786692;
pub const ERR_R_INIT_FAIL: u32 = 786693;
pub const ERR_R_PASSED_INVALID_ARGUMENT: u32 = 524550;
pub const ERR_R_OPERATION_FAIL: u32 = 786695;
pub const ERR_R_INVALID_PROVIDER_FUNCTIONS: u32 = 786696;
pub const ERR_R_INTERRUPTED_OR_CANCELLED: u32 = 524553;
pub const ERR_R_NESTED_ASN1_ERROR: u32 = 524554;
pub const ERR_R_MISSING_ASN1_EOS: u32 = 524555;
pub const ERR_R_UNSUPPORTED: u32 = 524556;
pub const ERR_R_FETCH_FAILED: u32 = 524557;
pub const ERR_R_INVALID_PROPERTY_DEFINITION: u32 = 524558;
pub const ERR_R_UNABLE_TO_GET_READ_LOCK: u32 = 786703;
pub const ERR_R_UNABLE_TO_GET_WRITE_LOCK: u32 = 786704;
pub const ERR_MAX_DATA_SIZE: u32 = 1024;
pub const ENGINE_R_ALREADY_LOADED: u32 = 100;
pub const ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER: u32 = 133;
pub const ENGINE_R_CMD_NOT_EXECUTABLE: u32 = 134;
pub const ENGINE_R_COMMAND_TAKES_INPUT: u32 = 135;
pub const ENGINE_R_COMMAND_TAKES_NO_INPUT: u32 = 136;
pub const ENGINE_R_CONFLICTING_ENGINE_ID: u32 = 103;
pub const ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED: u32 = 119;
pub const ENGINE_R_DSO_FAILURE: u32 = 104;
pub const ENGINE_R_DSO_NOT_FOUND: u32 = 132;
pub const ENGINE_R_ENGINES_SECTION_ERROR: u32 = 148;
pub const ENGINE_R_ENGINE_CONFIGURATION_ERROR: u32 = 102;
pub const ENGINE_R_ENGINE_IS_NOT_IN_LIST: u32 = 105;
pub const ENGINE_R_ENGINE_SECTION_ERROR: u32 = 149;
pub const ENGINE_R_FAILED_LOADING_PRIVATE_KEY: u32 = 128;
pub const ENGINE_R_FAILED_LOADING_PUBLIC_KEY: u32 = 129;
pub const ENGINE_R_FINISH_FAILED: u32 = 106;
pub const ENGINE_R_ID_OR_NAME_MISSING: u32 = 108;
pub const ENGINE_R_INIT_FAILED: u32 = 109;
pub const ENGINE_R_INTERNAL_LIST_ERROR: u32 = 110;
pub const ENGINE_R_INVALID_ARGUMENT: u32 = 143;
pub const ENGINE_R_INVALID_CMD_NAME: u32 = 137;
pub const ENGINE_R_INVALID_CMD_NUMBER: u32 = 138;
pub const ENGINE_R_INVALID_INIT_VALUE: u32 = 151;
pub const ENGINE_R_INVALID_STRING: u32 = 150;
pub const ENGINE_R_NOT_INITIALISED: u32 = 117;
pub const ENGINE_R_NOT_LOADED: u32 = 112;
pub const ENGINE_R_NO_CONTROL_FUNCTION: u32 = 120;
pub const ENGINE_R_NO_INDEX: u32 = 144;
pub const ENGINE_R_NO_LOAD_FUNCTION: u32 = 125;
pub const ENGINE_R_NO_REFERENCE: u32 = 130;
pub const ENGINE_R_NO_SUCH_ENGINE: u32 = 116;
pub const ENGINE_R_UNIMPLEMENTED_CIPHER: u32 = 146;
pub const ENGINE_R_UNIMPLEMENTED_DIGEST: u32 = 147;
pub const ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD: u32 = 101;
pub const ENGINE_R_VERSION_INCOMPATIBILITY: u32 = 145;
pub const ENGINE_CTRL_SET_LOGSTREAM: u32 = 1;
pub const ENGINE_CTRL_SET_PASSWORD_CALLBACK: u32 = 2;
pub const ENGINE_CTRL_HUP: u32 = 3;
pub const ENGINE_CTRL_SET_USER_INTERFACE: u32 = 4;
pub const ENGINE_CTRL_SET_CALLBACK_DATA: u32 = 5;
pub const ENGINE_CTRL_LOAD_CONFIGURATION: u32 = 6;
pub const ENGINE_CTRL_LOAD_SECTION: u32 = 7;
pub const ENGINE_CTRL_HAS_CTRL_FUNCTION: u32 = 10;
pub const ENGINE_CTRL_GET_FIRST_CMD_TYPE: u32 = 11;
pub const ENGINE_CTRL_GET_NEXT_CMD_TYPE: u32 = 12;
pub const ENGINE_CTRL_GET_CMD_FROM_NAME: u32 = 13;
pub const ENGINE_CTRL_GET_NAME_LEN_FROM_CMD: u32 = 14;
pub const ENGINE_CTRL_GET_NAME_FROM_CMD: u32 = 15;
pub const ENGINE_CTRL_GET_DESC_LEN_FROM_CMD: u32 = 16;
pub const ENGINE_CTRL_GET_DESC_FROM_CMD: u32 = 17;
pub const ENGINE_CTRL_GET_CMD_FLAGS: u32 = 18;
pub const ENGINE_CMD_BASE: u32 = 200;
pub const ENGINE_CTRL_CHIL_SET_FORKCHECK: u32 = 100;
pub const ENGINE_CTRL_CHIL_NO_LOCKING: u32 = 101;
pub const GOST_PARAM_CRYPT_PARAMS: u32 = 0;
pub const GOST_PARAM_PBE_PARAMS: u32 = 1;
pub const GOST_PARAM_PK_FORMAT: u32 = 2;
pub const GOST_PARAM_MAX: u32 = 3;
pub const GOST_CTRL_CRYPT_PARAMS: u32 = 200;
pub const GOST_CTRL_PBE_PARAMS: u32 = 201;
pub const GOST_CTRL_PK_FORMAT: u32 = 202;
pub const param_ctrl_string: &[u8; 9usize] = b"paramset\0";
pub const ukm_ctrl_string: &[u8; 7usize] = b"ukmhex\0";
pub const vko_ctrl_string: &[u8; 4usize] = b"vko\0";
pub const EVP_PKEY_CTRL_GOST_PARAMSET: u32 = 4097;
pub const key_ctrl_string: &[u8; 4usize] = b"key\0";
pub const hexkey_ctrl_string: &[u8; 7usize] = b"hexkey\0";
pub const maclen_ctrl_string: &[u8; 5usize] = b"size\0";
pub const EVP_PKEY_CTRL_GOST_MAC_HEXKEY: u32 = 4099;
pub const EVP_PKEY_CTRL_MAC_LEN: u32 = 4101;
pub const EVP_PKEY_CTRL_SET_VKO: u32 = 4107;
pub const EVP_MD_CTRL_KEY_LEN: u32 = 4099;
pub const EVP_MD_CTRL_SET_KEY: u32 = 4100;
pub type va_list = *mut ::libc::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::libc::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::libc::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::libc::c_schar;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_longlong;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulonglong;
pub type int_fast8_t = ::libc::c_schar;
pub type int_fast16_t = ::libc::c_int;
pub type int_fast32_t = ::libc::c_int;
pub type int_fast64_t = ::libc::c_longlong;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_uint;
pub type uint_fast32_t = ::libc::c_uint;
pub type uint_fast64_t = ::libc::c_ulonglong;
pub type intmax_t = ::libc::c_longlong;
pub type uintmax_t = ::libc::c_ulonglong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union grasshopper_w128_t {
    pub b: [u8; 16usize],
    pub q: [u64; 2usize],
    pub d: [u32; 4usize],
    pub w: [u16; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union grasshopper_w256_t {
    pub b: [u8; 32usize],
    pub q: [u64; 4usize],
    pub d: [u32; 8usize],
    pub w: [u16; 16usize],
    pub k: [grasshopper_w128_t; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct grasshopper_key_t {
    pub k: grasshopper_w256_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct grasshopper_round_keys_t {
    pub k: [grasshopper_w128_t; 10usize],
}
extern "C" {
    pub static grasshopper_pi: [u8; 256usize];
}
extern "C" {
    pub static grasshopper_pi_inv: [u8; 256usize];
}
extern "C" {
    pub static grasshopper_lvec: [u8; 16usize];
}
extern "C" {
    pub static mut grasshopper_galois_alpha_to: [u8; 256usize];
}
extern "C" {
    pub static mut grasshopper_galois_index_of: [u8; 256usize];
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::libc::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::libc::c_int;
pub type wint_t = ::libc::c_ushort;
pub type wctype_t = ::libc::c_ushort;
pub type __time32_t = ::libc::c_long;
pub type __time64_t = ::libc::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::libc::c_ushort,
    pub _locale_mb_cur_max: ::libc::c_int,
    pub _locale_lc_codepage: ::libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::libc::c_ulong,
    pub _Byte: ::libc::c_ushort,
    pub _State: ::libc::c_ushort,
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _errno() -> *mut ::libc::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::libc::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::libc::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::libc::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Lldiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
pub type imaxdiv_t = _Lldiv_t;
extern "C" {
    pub fn imaxabs(_Number: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(_Numerator: intmax_t, _Denominator: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _strtoimax_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _strtoumax_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _wcstoimax_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _wcstoumax_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> uintmax_t;
}
pub type ossl_intmax_t = intmax_t;
pub type ossl_uintmax_t = uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st {
    _unused: [u8; 0],
}
pub type OPENSSL_STACK = stack_st;
pub type OPENSSL_sk_compfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void) -> ::libc::c_int,
>;
pub type OPENSSL_sk_freefunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void)>;
pub type OPENSSL_sk_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::libc::c_void) -> *mut ::libc::c_void>;
extern "C" {
    pub fn OPENSSL_sk_num(arg1: *const OPENSSL_STACK) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_sk_value(arg1: *const OPENSSL_STACK, arg2: ::libc::c_int)
        -> *mut ::libc::c_void;
}
extern "C" {
    pub fn OPENSSL_sk_set(
        st: *mut OPENSSL_STACK,
        i: ::libc::c_int,
        data: *const ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn OPENSSL_sk_new(cmp: OPENSSL_sk_compfunc) -> *mut OPENSSL_STACK;
}
extern "C" {
    pub fn OPENSSL_sk_new_null() -> *mut OPENSSL_STACK;
}
extern "C" {
    pub fn OPENSSL_sk_new_reserve(c: OPENSSL_sk_compfunc, n: ::libc::c_int) -> *mut OPENSSL_STACK;
}
extern "C" {
    pub fn OPENSSL_sk_reserve(st: *mut OPENSSL_STACK, n: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_sk_free(arg1: *mut OPENSSL_STACK);
}
extern "C" {
    pub fn OPENSSL_sk_pop_free(
        st: *mut OPENSSL_STACK,
        func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void)>,
    );
}
extern "C" {
    pub fn OPENSSL_sk_deep_copy(
        arg1: *const OPENSSL_STACK,
        c: OPENSSL_sk_copyfunc,
        f: OPENSSL_sk_freefunc,
    ) -> *mut OPENSSL_STACK;
}
extern "C" {
    pub fn OPENSSL_sk_insert(
        sk: *mut OPENSSL_STACK,
        data: *const ::libc::c_void,
        where_: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_sk_delete(st: *mut OPENSSL_STACK, loc: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn OPENSSL_sk_delete_ptr(
        st: *mut OPENSSL_STACK,
        p: *const ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn OPENSSL_sk_find(st: *mut OPENSSL_STACK, data: *const ::libc::c_void) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_sk_find_ex(st: *mut OPENSSL_STACK, data: *const ::libc::c_void)
        -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_sk_find_all(
        st: *mut OPENSSL_STACK,
        data: *const ::libc::c_void,
        pnum: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_sk_push(st: *mut OPENSSL_STACK, data: *const ::libc::c_void) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_sk_unshift(st: *mut OPENSSL_STACK, data: *const ::libc::c_void)
        -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_sk_shift(st: *mut OPENSSL_STACK) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn OPENSSL_sk_pop(st: *mut OPENSSL_STACK) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn OPENSSL_sk_zero(st: *mut OPENSSL_STACK);
}
extern "C" {
    pub fn OPENSSL_sk_set_cmp_func(
        sk: *mut OPENSSL_STACK,
        cmp: OPENSSL_sk_compfunc,
    ) -> OPENSSL_sk_compfunc;
}
extern "C" {
    pub fn OPENSSL_sk_dup(st: *const OPENSSL_STACK) -> *mut OPENSSL_STACK;
}
extern "C" {
    pub fn OPENSSL_sk_sort(st: *mut OPENSSL_STACK);
}
extern "C" {
    pub fn OPENSSL_sk_is_sorted(st: *const OPENSSL_STACK) -> ::libc::c_int;
}
pub type OPENSSL_STRING = *mut ::libc::c_char;
pub type OPENSSL_CSTRING = *const ::libc::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_OPENSSL_STRING {
    _unused: [u8; 0],
}
pub type sk_OPENSSL_STRING_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const ::libc::c_char,
        b: *const *const ::libc::c_char,
    ) -> ::libc::c_int,
>;
pub type sk_OPENSSL_STRING_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut ::libc::c_char)>;
pub type sk_OPENSSL_STRING_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const ::libc::c_char) -> *mut ::libc::c_char>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_OPENSSL_CSTRING {
    _unused: [u8; 0],
}
pub type sk_OPENSSL_CSTRING_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const ::libc::c_char,
        b: *const *const ::libc::c_char,
    ) -> ::libc::c_int,
>;
pub type sk_OPENSSL_CSTRING_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut ::libc::c_char)>;
pub type sk_OPENSSL_CSTRING_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const ::libc::c_char) -> *mut ::libc::c_char>;
pub type OPENSSL_BLOCK = *mut ::libc::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_OPENSSL_BLOCK {
    _unused: [u8; 0],
}
pub type sk_OPENSSL_BLOCK_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const ::libc::c_void,
        b: *const *const ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type sk_OPENSSL_BLOCK_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut ::libc::c_void)>;
pub type sk_OPENSSL_BLOCK_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const ::libc::c_void) -> *mut ::libc::c_void>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_provider_st {
    _unused: [u8; 0],
}
pub type OSSL_PROVIDER = ossl_provider_st;
pub type ASN1_INTEGER = asn1_string_st;
pub type ASN1_ENUMERATED = asn1_string_st;
pub type ASN1_BIT_STRING = asn1_string_st;
pub type ASN1_OCTET_STRING = asn1_string_st;
pub type ASN1_PRINTABLESTRING = asn1_string_st;
pub type ASN1_T61STRING = asn1_string_st;
pub type ASN1_IA5STRING = asn1_string_st;
pub type ASN1_GENERALSTRING = asn1_string_st;
pub type ASN1_UNIVERSALSTRING = asn1_string_st;
pub type ASN1_BMPSTRING = asn1_string_st;
pub type ASN1_UTCTIME = asn1_string_st;
pub type ASN1_TIME = asn1_string_st;
pub type ASN1_GENERALIZEDTIME = asn1_string_st;
pub type ASN1_VISIBLESTRING = asn1_string_st;
pub type ASN1_UTF8STRING = asn1_string_st;
pub type ASN1_STRING = asn1_string_st;
pub type ASN1_BOOLEAN = ::libc::c_int;
pub type ASN1_NULL = ::libc::c_int;
pub type ASN1_TYPE = asn1_type_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_object_st {
    _unused: [u8; 0],
}
pub type ASN1_OBJECT = asn1_object_st;
pub type ASN1_STRING_TABLE = asn1_string_table_st;
pub type ASN1_ITEM = ASN1_ITEM_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_pctx_st {
    _unused: [u8; 0],
}
pub type ASN1_PCTX = asn1_pctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_sctx_st {
    _unused: [u8; 0],
}
pub type ASN1_SCTX = asn1_sctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bio_st {
    _unused: [u8; 0],
}
pub type BIO = bio_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bignum_st {
    _unused: [u8; 0],
}
pub type BIGNUM = bignum_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bignum_ctx {
    _unused: [u8; 0],
}
pub type BN_CTX = bignum_ctx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bn_blinding_st {
    _unused: [u8; 0],
}
pub type BN_BLINDING = bn_blinding_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bn_mont_ctx_st {
    _unused: [u8; 0],
}
pub type BN_MONT_CTX = bn_mont_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bn_recp_ctx_st {
    _unused: [u8; 0],
}
pub type BN_RECP_CTX = bn_recp_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bn_gencb_st {
    _unused: [u8; 0],
}
pub type BN_GENCB = bn_gencb_st;
pub type BUF_MEM = buf_mem_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_BIGNUM {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_BIGNUM_const {
    _unused: [u8; 0],
}
pub type ERR_STATE = err_state_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_cipher_st {
    _unused: [u8; 0],
}
pub type EVP_CIPHER = evp_cipher_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_cipher_ctx_st {
    _unused: [u8; 0],
}
pub type EVP_CIPHER_CTX = evp_cipher_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_md_st {
    _unused: [u8; 0],
}
pub type EVP_MD = evp_md_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_md_ctx_st {
    _unused: [u8; 0],
}
pub type EVP_MD_CTX = evp_md_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_mac_st {
    _unused: [u8; 0],
}
pub type EVP_MAC = evp_mac_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_mac_ctx_st {
    _unused: [u8; 0],
}
pub type EVP_MAC_CTX = evp_mac_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY = evp_pkey_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_asn1_method_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_method_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY_METHOD = evp_pkey_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_ctx_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY_CTX = evp_pkey_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_keymgmt_st {
    _unused: [u8; 0],
}
pub type EVP_KEYMGMT = evp_keymgmt_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_kdf_st {
    _unused: [u8; 0],
}
pub type EVP_KDF = evp_kdf_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_kdf_ctx_st {
    _unused: [u8; 0],
}
pub type EVP_KDF_CTX = evp_kdf_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_rand_st {
    _unused: [u8; 0],
}
pub type EVP_RAND = evp_rand_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_rand_ctx_st {
    _unused: [u8; 0],
}
pub type EVP_RAND_CTX = evp_rand_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_keyexch_st {
    _unused: [u8; 0],
}
pub type EVP_KEYEXCH = evp_keyexch_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_signature_st {
    _unused: [u8; 0],
}
pub type EVP_SIGNATURE = evp_signature_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_asym_cipher_st {
    _unused: [u8; 0],
}
pub type EVP_ASYM_CIPHER = evp_asym_cipher_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_kem_st {
    _unused: [u8; 0],
}
pub type EVP_KEM = evp_kem_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_Encode_Ctx_st {
    _unused: [u8; 0],
}
pub type EVP_ENCODE_CTX = evp_Encode_Ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hmac_ctx_st {
    _unused: [u8; 0],
}
pub type HMAC_CTX = hmac_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dh_st {
    _unused: [u8; 0],
}
pub type DH = dh_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dh_method {
    _unused: [u8; 0],
}
pub type DH_METHOD = dh_method;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsa_st {
    _unused: [u8; 0],
}
pub type DSA = dsa_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsa_method {
    _unused: [u8; 0],
}
pub type DSA_METHOD = dsa_method;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsa_st {
    _unused: [u8; 0],
}
pub type RSA = rsa_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsa_meth_st {
    _unused: [u8; 0],
}
pub type RSA_METHOD = rsa_meth_st;
pub type RSA_PSS_PARAMS = rsa_pss_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_key_st {
    _unused: [u8; 0],
}
pub type EC_KEY = ec_key_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_key_method_st {
    _unused: [u8; 0],
}
pub type EC_KEY_METHOD = ec_key_method_st;
pub type RAND_METHOD = rand_meth_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rand_drbg_st {
    _unused: [u8; 0],
}
pub type RAND_DRBG = rand_drbg_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_dane_st {
    _unused: [u8; 0],
}
pub type SSL_DANE = ssl_dane_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_st {
    _unused: [u8; 0],
}
pub type X509 = x509_st;
pub type X509_ALGOR = X509_algor_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_crl_st {
    _unused: [u8; 0],
}
pub type X509_CRL = X509_crl_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_crl_method_st {
    _unused: [u8; 0],
}
pub type X509_CRL_METHOD = x509_crl_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_revoked_st {
    _unused: [u8; 0],
}
pub type X509_REVOKED = x509_revoked_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_name_st {
    _unused: [u8; 0],
}
pub type X509_NAME = X509_name_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_pubkey_st {
    _unused: [u8; 0],
}
pub type X509_PUBKEY = X509_pubkey_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_store_st {
    _unused: [u8; 0],
}
pub type X509_STORE = x509_store_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_store_ctx_st {
    _unused: [u8; 0],
}
pub type X509_STORE_CTX = x509_store_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_object_st {
    _unused: [u8; 0],
}
pub type X509_OBJECT = x509_object_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_lookup_st {
    _unused: [u8; 0],
}
pub type X509_LOOKUP = x509_lookup_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_lookup_method_st {
    _unused: [u8; 0],
}
pub type X509_LOOKUP_METHOD = x509_lookup_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_VERIFY_PARAM_st {
    _unused: [u8; 0],
}
pub type X509_VERIFY_PARAM = X509_VERIFY_PARAM_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_sig_info_st {
    _unused: [u8; 0],
}
pub type X509_SIG_INFO = x509_sig_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs8_priv_key_info_st {
    _unused: [u8; 0],
}
pub type PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3_ext_ctx {
    _unused: [u8; 0],
}
pub type X509V3_CTX = v3_ext_ctx;
pub type CONF = conf_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_init_settings_st {
    _unused: [u8; 0],
}
pub type OPENSSL_INIT_SETTINGS = ossl_init_settings_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_st {
    _unused: [u8; 0],
}
pub type UI = ui_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_method_st {
    _unused: [u8; 0],
}
pub type UI_METHOD = ui_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct engine_st {
    _unused: [u8; 0],
}
pub type ENGINE = engine_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_st {
    _unused: [u8; 0],
}
pub type SSL = ssl_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_ctx_st {
    _unused: [u8; 0],
}
pub type SSL_CTX = ssl_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct comp_ctx_st {
    _unused: [u8; 0],
}
pub type COMP_CTX = comp_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct comp_method_st {
    _unused: [u8; 0],
}
pub type COMP_METHOD = comp_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_NODE_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_NODE = X509_POLICY_NODE_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_LEVEL_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_LEVEL = X509_POLICY_LEVEL_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_TREE_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_TREE = X509_POLICY_TREE_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_CACHE_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_CACHE = X509_POLICY_CACHE_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUTHORITY_KEYID_st {
    _unused: [u8; 0],
}
pub type AUTHORITY_KEYID = AUTHORITY_KEYID_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIST_POINT_st {
    _unused: [u8; 0],
}
pub type DIST_POINT = DIST_POINT_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ISSUING_DIST_POINT_st {
    _unused: [u8; 0],
}
pub type ISSUING_DIST_POINT = ISSUING_DIST_POINT_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NAME_CONSTRAINTS_st {
    _unused: [u8; 0],
}
pub type NAME_CONSTRAINTS = NAME_CONSTRAINTS_st;
pub type CRYPTO_EX_DATA = crypto_ex_data_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_http_req_ctx_st {
    _unused: [u8; 0],
}
pub type OSSL_HTTP_REQ_CTX = ossl_http_req_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ocsp_response_st {
    _unused: [u8; 0],
}
pub type OCSP_RESPONSE = ocsp_response_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ocsp_responder_id_st {
    _unused: [u8; 0],
}
pub type OCSP_RESPID = ocsp_responder_id_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sct_st {
    _unused: [u8; 0],
}
pub type SCT = sct_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sct_ctx_st {
    _unused: [u8; 0],
}
pub type SCT_CTX = sct_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctlog_st {
    _unused: [u8; 0],
}
pub type CTLOG = ctlog_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctlog_store_st {
    _unused: [u8; 0],
}
pub type CTLOG_STORE = ctlog_store_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ct_policy_eval_ctx_st {
    _unused: [u8; 0],
}
pub type CT_POLICY_EVAL_CTX = ct_policy_eval_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_store_info_st {
    _unused: [u8; 0],
}
pub type OSSL_STORE_INFO = ossl_store_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_store_search_st {
    _unused: [u8; 0],
}
pub type OSSL_STORE_SEARCH = ossl_store_search_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_lib_ctx_st {
    _unused: [u8; 0],
}
pub type OSSL_LIB_CTX = ossl_lib_ctx_st;
pub type OSSL_DISPATCH = ossl_dispatch_st;
pub type OSSL_ITEM = ossl_item_st;
pub type OSSL_ALGORITHM = ossl_algorithm_st;
pub type OSSL_PARAM = ossl_param_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_param_bld_st {
    _unused: [u8; 0],
}
pub type OSSL_PARAM_BLD = ossl_param_bld_st;
pub type pem_password_cb = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::libc::c_char,
        size: ::libc::c_int,
        rwflag: ::libc::c_int,
        userdata: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_encoder_st {
    _unused: [u8; 0],
}
pub type OSSL_ENCODER = ossl_encoder_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_encoder_ctx_st {
    _unused: [u8; 0],
}
pub type OSSL_ENCODER_CTX = ossl_encoder_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_decoder_st {
    _unused: [u8; 0],
}
pub type OSSL_DECODER = ossl_decoder_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_decoder_ctx_st {
    _unused: [u8; 0],
}
pub type OSSL_DECODER_CTX = ossl_decoder_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_self_test_st {
    _unused: [u8; 0],
}
pub type OSSL_SELF_TEST = ossl_self_test_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_core_handle_st {
    _unused: [u8; 0],
}
pub type OSSL_CORE_HANDLE = ossl_core_handle_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openssl_core_ctx_st {
    _unused: [u8; 0],
}
pub type OPENSSL_CORE_CTX = openssl_core_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_core_bio_st {
    _unused: [u8; 0],
}
pub type OSSL_CORE_BIO = ossl_core_bio_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_dispatch_st {
    pub function_id: ::libc::c_int,
    pub function: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_item_st {
    pub id: ::libc::c_uint,
    pub ptr: *mut ::libc::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_algorithm_st {
    pub algorithm_names: *const ::libc::c_char,
    pub property_definition: *const ::libc::c_char,
    pub implementation: *const OSSL_DISPATCH,
    pub algorithm_description: *const ::libc::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_param_st {
    pub key: *const ::libc::c_char,
    pub data_type: ::libc::c_uint,
    pub data: *mut ::libc::c_void,
    pub data_size: usize,
    pub return_size: usize,
}
pub type OSSL_thread_stop_handler_fn =
    ::std::option::Option<unsafe extern "C" fn(arg: *mut ::libc::c_void)>;
pub type OSSL_provider_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *const OSSL_CORE_HANDLE,
        in_: *const OSSL_DISPATCH,
        out: *mut *const OSSL_DISPATCH,
        provctx: *mut *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
extern "C" {
    pub fn OSSL_provider_init(
        handle: *const OSSL_CORE_HANDLE,
        in_: *const OSSL_DISPATCH,
        out: *mut *const OSSL_DISPATCH,
        provctx: *mut *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
pub type OSSL_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(params: *const OSSL_PARAM, arg: *mut ::libc::c_void) -> ::libc::c_int,
>;
pub type OSSL_INOUT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        in_params: *const OSSL_PARAM,
        out_params: *mut OSSL_PARAM,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type OSSL_PASSPHRASE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pass: *mut ::libc::c_char,
        pass_size: usize,
        pass_len: *mut usize,
        params: *const OSSL_PARAM,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::libc::c_void,
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::libc::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::libc::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::libc::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::libc::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::libc::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::libc::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::libc::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::libc::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::libc::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::libc::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::libc::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::libc::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::libc::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
pub type fpos_t = ::libc::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::libc::c_char,
        _Pointer: *mut *mut *mut ::libc::c_char,
        _Count: *mut *mut ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::libc::c_char,
        _Mode: *const ::libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::libc::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::libc::c_char,
        _Mode: *const ::libc::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(_Buffer: *mut ::libc::c_char, _Size: rsize_t) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::libc::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::libc::c_int;
}
extern "C" {
    pub fn _fdopen(_FileHandle: ::libc::c_int, _Mode: *const ::libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::libc::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::libc::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::libc::c_char,
        _MaxCount: ::libc::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _flushall() -> ::libc::c_int;
}
extern "C" {
    pub fn fopen(_FileName: *const ::libc::c_char, _Mode: *const ::libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::libc::c_int, _Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn fputs(_Buffer: *const ::libc::c_char, _Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::libc::c_void,
        _ElementSize: ::libc::c_ulonglong,
        _ElementCount: ::libc::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::libc::c_char,
        _Mode: *const ::libc::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::libc::c_char,
        _Mode: *const ::libc::c_char,
        _ShFlag: ::libc::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::libc::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::libc::c_long,
        _Origin: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::libc::c_longlong,
        _Origin: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::libc::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::libc::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::libc::c_void,
        _ElementSize: ::libc::c_ulonglong,
        _ElementCount: ::libc::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn getchar() -> ::libc::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::libc::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::libc::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _popen(_Command: *const ::libc::c_char, _Mode: *const ::libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::libc::c_int, _Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::libc::c_int, _Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::libc::c_char,
        _NewFileName: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::libc::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::libc::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::libc::c_char,
        _Mode: ::libc::c_int,
        _Size: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::libc::c_char,
        _FilePrefix: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::libc::c_int, _Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _fputc_nolock(_Character: ::libc::c_int, _Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::libc::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::libc::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::libc::c_long,
        _Origin: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::libc::c_longlong,
        _Origin: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::libc::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::libc::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _putc_nolock(_Character: ::libc::c_int, _Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(_Character: ::libc::c_int, _Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::libc::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::libc::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::libc::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::libc::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::libc::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::libc::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::libc::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::libc::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::libc::c_ulonglong,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Format: *const ::libc::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::libc::c_ulonglong,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Format: *const ::libc::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::libc::c_ulonglong,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::libc::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::libc::c_ulonglong,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Format: *const ::libc::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::libc::c_ulonglong,
        _Buffer: *const ::libc::c_char,
        _BufferCount: usize,
        _Format: *const ::libc::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::libc::c_char,
        _FilePrefix: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::libc::c_int;
}
extern "C" {
    pub fn fdopen(_FileHandle: ::libc::c_int, _Format: *const ::libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::libc::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn flushall() -> ::libc::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::libc::c_int, _Stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::libc::c_int;
}
extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn calloc(_Count: ::libc::c_ulonglong, _Size: ::libc::c_ulonglong) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn _expand(_Block: *mut ::libc::c_void, _Size: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::libc::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::libc::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::libc::c_ulonglong) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::libc::c_void) -> usize;
}
extern "C" {
    pub fn _msize(_Block: *mut ::libc::c_void) -> usize;
}
extern "C" {
    pub fn _realloc_base(_Block: *mut ::libc::c_void, _Size: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn realloc(_Block: *mut ::libc::c_void, _Size: ::libc::c_ulonglong) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::libc::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::libc::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::libc::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _aligned_msize(_Block: *mut ::libc::c_void, _Alignment: usize, _Offset: usize) -> usize;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::libc::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::libc::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::libc::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::libc::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::libc::c_void;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::libc::c_void,
        arg2: *const ::libc::c_void,
        arg3: *const ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void) -> ::libc::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::libc::c_void,
        _Base: *const ::libc::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::libc::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::libc::c_void,
        _Base: *const ::libc::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::libc::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::libc::c_void,
        _Base: *const ::libc::c_void,
        _NumOfElements: *mut ::libc::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::libc::c_void,
        _Base: *const ::libc::c_void,
        _NumOfElements: *mut ::libc::c_uint,
        _SizeOfElements: ::libc::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::libc::c_void,
        _Base: *mut ::libc::c_void,
        _NumOfElements: *mut ::libc::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::libc::c_void,
        _Base: *mut ::libc::c_void,
        _NumOfElements: *mut ::libc::c_uint,
        _SizeOfElements: ::libc::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::libc::c_void,
        _Base: *const ::libc::c_void,
        _NumOfElements: *mut ::libc::c_uint,
        _SizeOfElements: ::libc::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::libc::c_void,
        _Base: *mut ::libc::c_void,
        _NumOfElements: *mut ::libc::c_uint,
        _SizeOfElements: ::libc::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::libc::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::libc::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::libc::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::libc::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::libc::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::libc::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::libc::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::libc::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::libc::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::libc::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::libc::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::libc::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: usize,
        _Dir: *mut wchar_t,
        _DirCount: usize,
        _Filename: *mut wchar_t,
        _FilenameCount: usize,
        _Ext: *mut wchar_t,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::libc::c_char,
        _Buf2: *mut ::libc::c_char,
        _SizeInBytes: ::libc::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::libc::c_int) -> !;
}
extern "C" {
    pub fn _exit(_Code: ::libc::c_int) -> !;
}
extern "C" {
    pub fn _Exit(_Code: ::libc::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(_Code: ::libc::c_int) -> !;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn _set_abort_behavior(_Flags: ::libc::c_uint, _Mask: ::libc::c_uint) -> ::libc::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::libc::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::libc::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::libc::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::libc::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn __doserrno() -> *mut ::libc::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::libc::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::libc::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::libc::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::libc::c_int;
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::libc::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::libc::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::libc::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::libc::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::libc::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn labs(_Number: ::libc::c_long) -> ::libc::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::libc::c_longlong) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::libc::c_longlong) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::libc::c_ushort) -> ::libc::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::libc::c_ulong) -> ::libc::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::libc::c_ulonglong) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::libc::c_int, _Denominator: ::libc::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::libc::c_long, _Denominator: ::libc::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(_Numerator: ::libc::c_longlong, _Denominator: ::libc::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(_Value: ::libc::c_uint, _Shift: ::libc::c_int) -> ::libc::c_uint;
}
extern "C" {
    pub fn _lrotl(_Value: ::libc::c_ulong, _Shift: ::libc::c_int) -> ::libc::c_ulong;
}
extern "C" {
    pub fn _rotl64(_Value: ::libc::c_ulonglong, _Shift: ::libc::c_int) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _rotr(_Value: ::libc::c_uint, _Shift: ::libc::c_int) -> ::libc::c_uint;
}
extern "C" {
    pub fn _lrotr(_Value: ::libc::c_ulong, _Shift: ::libc::c_int) -> ::libc::c_ulong;
}
extern "C" {
    pub fn _rotr64(_Value: ::libc::c_ulonglong, _Shift: ::libc::c_int) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::libc::c_uint);
}
extern "C" {
    pub fn rand() -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::libc::c_uchar; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::libc::c_uchar; 12usize],
}
extern "C" {
    pub fn atof(_String: *const ::libc::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::libc::c_char) -> ::libc::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::libc::c_char) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::libc::c_char) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::libc::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(_String: *const ::libc::c_char, _Locale: _locale_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _atol_l(_String: *const ::libc::c_char, _Locale: _locale_t) -> ::libc::c_long;
}
extern "C" {
    pub fn _atoll_l(_String: *const ::libc::c_char, _Locale: _locale_t) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(_String: *const ::libc::c_char, _Locale: _locale_t) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _atoflt(_Result: *mut _CRT_FLOAT, _String: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _atodbl(_Result: *mut _CRT_DOUBLE, _String: *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _atoldbl(_Result: *mut _LDOUBLE, _String: *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::libc::c_char,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::libc::c_char,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::libc::c_char,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strtof(_String: *const ::libc::c_char, _EndPtr: *mut *mut ::libc::c_char) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(_String: *const ::libc::c_char, _EndPtr: *mut *mut ::libc::c_char) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(_String: *const ::libc::c_char, _EndPtr: *mut *mut ::libc::c_char) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::libc::c_char,
        _EndPtr: *mut *mut ::libc::c_char,
        _Radix: ::libc::c_int,
        _Locale: _locale_t,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::libc::c_int,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Radix: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::libc::c_int,
        _Buffer: *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::libc::c_long,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Radix: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::libc::c_long,
        _Buffer: *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::libc::c_ulong,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Radix: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::libc::c_ulong,
        _Buffer: *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::libc::c_longlong,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Radix: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::libc::c_longlong,
        _Buffer: *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::libc::c_ulonglong,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Radix: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::libc::c_ulonglong,
        _Buffer: *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::libc::c_int,
        _PtDec: *mut ::libc::c_int,
        _PtSign: *mut ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::libc::c_int,
        _PtDec: *mut ::libc::c_int,
        _PtSign: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::libc::c_int,
        _PtDec: *mut ::libc::c_int,
        _PtSign: *mut ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::libc::c_int,
        _PtDec: *mut ::libc::c_int,
        _PtSign: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::libc::c_int,
        _Buffer: *mut ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::libc::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::libc::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::libc::c_char, _MaxCount: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::libc::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::libc::c_char) -> usize;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::libc::c_char, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::libc::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::libc::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::libc::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::libc::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::libc::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(_Dest: *mut wchar_t, _Source: *const ::libc::c_char, _MaxCount: usize)
        -> usize;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::libc::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::libc::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::libc::c_char, _WCh: wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::libc::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::libc::c_int,
        _MbCh: *mut ::libc::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::libc::c_int,
        _MbCh: *mut ::libc::c_char,
        _SizeInBytes: usize,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::libc::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(_Dest: *mut ::libc::c_char, _Source: *const wchar_t, _MaxCount: usize)
        -> usize;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::libc::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::libc::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::libc::c_char,
        _Path: *const ::libc::c_char,
        _BufferCount: usize,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
        _Drive: *const ::libc::c_char,
        _Dir: *const ::libc::c_char,
        _Filename: *const ::libc::c_char,
        _Ext: *const ::libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::libc::c_char,
        _Drive: *const ::libc::c_char,
        _Dir: *const ::libc::c_char,
        _Filename: *const ::libc::c_char,
        _Ext: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::libc::c_char,
        _Drive: *mut ::libc::c_char,
        _Dir: *mut ::libc::c_char,
        _Filename: *mut ::libc::c_char,
        _Ext: *mut ::libc::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::libc::c_char,
        _Drive: *mut ::libc::c_char,
        _DriveCount: usize,
        _Dir: *mut ::libc::c_char,
        _DirCount: usize,
        _Filename: *mut ::libc::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::libc::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::libc::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::libc::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::libc::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::libc::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _putenv_s(_Name: *const ::libc::c_char, _Value: *const ::libc::c_char) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::libc::c_char,
        _VarName: *const ::libc::c_char,
        _Buffer: *mut ::libc::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::libc::c_char,
        _VarName: *const ::libc::c_char,
        _Buffer: *mut ::libc::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::libc::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::libc::c_uint, _Duration: ::libc::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::libc::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::libc::c_int,
        _PtDec: *mut ::libc::c_int,
        _PtSign: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::libc::c_int,
        _PtDec: *mut ::libc::c_int,
        _PtSign: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::libc::c_int,
        _DstBuf: *mut ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::libc::c_int,
        _Buffer: *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::libc::c_long,
        _Buffer: *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::libc::c_char,
        _Buf2: *mut ::libc::c_char,
        _SizeInBytes: ::libc::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::libc::c_ulong,
        _Buffer: *mut ::libc::c_char,
        _Radix: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
}
extern "C" {
    pub fn _wasctime(_Tm: *const tm) -> *mut wchar_t;
}
extern "C" {
    pub fn _wasctime_s(_Buffer: *mut wchar_t, _SizeInWords: usize, _Tm: *const tm) -> errno_t;
}
extern "C" {
    pub fn wcsftime(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Format: *const wchar_t,
        _Tm: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn _wcsftime_l(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Format: *const wchar_t,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _wctime32(_Time: *const __time32_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime32_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctime64(_Time: *const __time64_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime64_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wstrdate_s(_Buffer: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wstrdate(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wstrtime_s(_Buffer: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wstrtime(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
pub type clock_t = ::libc::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec32 {
    pub tv_sec: __time32_t,
    pub tv_nsec: ::libc::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec64 {
    pub tv_sec: __time64_t,
    pub tv_nsec: ::libc::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::libc::c_long,
}
extern "C" {
    pub fn __daylight() -> *mut ::libc::c_int;
}
extern "C" {
    pub fn __dstbias() -> *mut ::libc::c_long;
}
extern "C" {
    pub fn __timezone() -> *mut ::libc::c_long;
}
extern "C" {
    pub fn __tzname() -> *mut *mut ::libc::c_char;
}
extern "C" {
    pub fn _get_daylight(_Daylight: *mut ::libc::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_dstbias(_DaylightSavingsBias: *mut ::libc::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_timezone(_TimeZone: *mut ::libc::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_tzname(
        _ReturnValue: *mut usize,
        _Buffer: *mut ::libc::c_char,
        _SizeInBytes: usize,
        _Index: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn asctime(_Tm: *const tm) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn asctime_s(_Buffer: *mut ::libc::c_char, _SizeInBytes: usize, _Tm: *const tm) -> errno_t;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn _ctime32(_Time: *const __time32_t) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _ctime32_s(
        _Buffer: *mut ::libc::c_char,
        _SizeInBytes: usize,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _ctime64(_Time: *const __time64_t) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _ctime64_s(
        _Buffer: *mut ::libc::c_char,
        _SizeInBytes: usize,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _difftime32(_Time1: __time32_t, _Time2: __time32_t) -> f64;
}
extern "C" {
    pub fn _difftime64(_Time1: __time64_t, _Time2: __time64_t) -> f64;
}
extern "C" {
    pub fn _gmtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _gmtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _localtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _localtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _mkgmtime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mkgmtime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn _mktime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mktime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn strftime(
        _Buffer: *mut ::libc::c_char,
        _SizeInBytes: usize,
        _Format: *const ::libc::c_char,
        _Tm: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn _strftime_l(
        _Buffer: *mut ::libc::c_char,
        _MaxSize: usize,
        _Format: *const ::libc::c_char,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _strdate_s(_Buffer: *mut ::libc::c_char, _SizeInBytes: usize) -> errno_t;
}
extern "C" {
    pub fn _strdate(_Buffer: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _strtime_s(_Buffer: *mut ::libc::c_char, _SizeInBytes: usize) -> errno_t;
}
extern "C" {
    pub fn _strtime(_Buffer: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _time32(_Time: *mut __time32_t) -> __time32_t;
}
extern "C" {
    pub fn _time64(_Time: *mut __time64_t) -> __time64_t;
}
extern "C" {
    pub fn _timespec32_get(_Ts: *mut _timespec32, _Base: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn _timespec64_get(_Ts: *mut _timespec64, _Base: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn _tzset();
}
extern "C" {
    pub fn _getsystime(_Tm: *mut tm) -> ::libc::c_uint;
}
extern "C" {
    pub fn _setsystime(_Tm: *mut tm, _Milliseconds: ::libc::c_uint) -> ::libc::c_uint;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn ERR_load_ASN1_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_ASYNC_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_BIO_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_BN_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_BUF_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_CMS_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_COMP_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_CONF_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_CRYPTO_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_CT_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_DH_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_DSA_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_EC_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_ENGINE_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_ERR_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_EVP_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_KDF_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_OBJ_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_OCSP_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_PEM_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_PKCS12_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_PKCS7_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_RAND_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_RSA_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_OSSL_STORE_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_TS_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_UI_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_X509_strings() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_X509V3_strings() -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRYPTO_dynlock {
    pub dummy: ::libc::c_int,
}
pub type CRYPTO_RWLOCK = ::libc::c_void;
extern "C" {
    pub fn CRYPTO_THREAD_lock_new() -> *mut CRYPTO_RWLOCK;
}
extern "C" {
    pub fn CRYPTO_THREAD_read_lock(lock: *mut CRYPTO_RWLOCK) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_THREAD_write_lock(lock: *mut CRYPTO_RWLOCK) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_THREAD_unlock(lock: *mut CRYPTO_RWLOCK) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_THREAD_lock_free(lock: *mut CRYPTO_RWLOCK);
}
extern "C" {
    pub fn CRYPTO_atomic_add(
        val: *mut ::libc::c_int,
        amount: ::libc::c_int,
        ret: *mut ::libc::c_int,
        lock: *mut CRYPTO_RWLOCK,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_atomic_or(
        val: *mut u64,
        op: u64,
        ret: *mut u64,
        lock: *mut CRYPTO_RWLOCK,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_atomic_load(
        val: *mut u64,
        ret: *mut u64,
        lock: *mut CRYPTO_RWLOCK,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_strlcpy(
        dst: *mut ::libc::c_char,
        src: *const ::libc::c_char,
        siz: usize,
    ) -> usize;
}
extern "C" {
    pub fn OPENSSL_strlcat(
        dst: *mut ::libc::c_char,
        src: *const ::libc::c_char,
        siz: usize,
    ) -> usize;
}
extern "C" {
    pub fn OPENSSL_strnlen(str_: *const ::libc::c_char, maxlen: usize) -> usize;
}
extern "C" {
    pub fn OPENSSL_buf2hexstr_ex(
        str_: *mut ::libc::c_char,
        str_n: usize,
        strlength: *mut usize,
        buf: *const ::libc::c_uchar,
        buflen: usize,
        sep: ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_buf2hexstr(
        buf: *const ::libc::c_uchar,
        buflen: ::libc::c_long,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn OPENSSL_hexstr2buf_ex(
        buf: *mut ::libc::c_uchar,
        buf_n: usize,
        buflen: *mut usize,
        str_: *const ::libc::c_char,
        sep: ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_hexstr2buf(
        str_: *const ::libc::c_char,
        buflen: *mut ::libc::c_long,
    ) -> *mut ::libc::c_uchar;
}
extern "C" {
    pub fn OPENSSL_hexchar2int(c: ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_strcasecmp(
        s1: *const ::libc::c_char,
        s2: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_strncasecmp(
        s1: *const ::libc::c_char,
        s2: *const ::libc::c_char,
        n: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_version_major() -> ::libc::c_uint;
}
extern "C" {
    pub fn OPENSSL_version_minor() -> ::libc::c_uint;
}
extern "C" {
    pub fn OPENSSL_version_patch() -> ::libc::c_uint;
}
extern "C" {
    pub fn OPENSSL_version_pre_release() -> *const ::libc::c_char;
}
extern "C" {
    pub fn OPENSSL_version_build_metadata() -> *const ::libc::c_char;
}
extern "C" {
    pub fn OpenSSL_version_num() -> ::libc::c_ulong;
}
extern "C" {
    pub fn OpenSSL_version(type_: ::libc::c_int) -> *const ::libc::c_char;
}
extern "C" {
    pub fn OPENSSL_info(type_: ::libc::c_int) -> *const ::libc::c_char;
}
extern "C" {
    pub fn OPENSSL_issetugid() -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypto_ex_data_st {
    pub ctx: *mut OSSL_LIB_CTX,
    pub sk: *mut stack_st_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_void {
    _unused: [u8; 0],
}
pub type sk_void_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const ::libc::c_void,
        b: *const *const ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type sk_void_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut ::libc::c_void)>;
pub type sk_void_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const ::libc::c_void) -> *mut ::libc::c_void>;
pub type CRYPTO_EX_new = ::std::option::Option<
    unsafe extern "C" fn(
        parent: *mut ::libc::c_void,
        ptr: *mut ::libc::c_void,
        ad: *mut CRYPTO_EX_DATA,
        idx: ::libc::c_int,
        argl: ::libc::c_long,
        argp: *mut ::libc::c_void,
    ),
>;
pub type CRYPTO_EX_free = ::std::option::Option<
    unsafe extern "C" fn(
        parent: *mut ::libc::c_void,
        ptr: *mut ::libc::c_void,
        ad: *mut CRYPTO_EX_DATA,
        idx: ::libc::c_int,
        argl: ::libc::c_long,
        argp: *mut ::libc::c_void,
    ),
>;
pub type CRYPTO_EX_dup = ::std::option::Option<
    unsafe extern "C" fn(
        to: *mut CRYPTO_EX_DATA,
        from: *const CRYPTO_EX_DATA,
        from_d: *mut *mut ::libc::c_void,
        idx: ::libc::c_int,
        argl: ::libc::c_long,
        argp: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
extern "C" {
    pub fn CRYPTO_get_ex_new_index(
        class_index: ::libc::c_int,
        argl: ::libc::c_long,
        argp: *mut ::libc::c_void,
        new_func: CRYPTO_EX_new,
        dup_func: CRYPTO_EX_dup,
        free_func: CRYPTO_EX_free,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_free_ex_index(class_index: ::libc::c_int, idx: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_new_ex_data(
        class_index: ::libc::c_int,
        obj: *mut ::libc::c_void,
        ad: *mut CRYPTO_EX_DATA,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_dup_ex_data(
        class_index: ::libc::c_int,
        to: *mut CRYPTO_EX_DATA,
        from: *const CRYPTO_EX_DATA,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_free_ex_data(
        class_index: ::libc::c_int,
        obj: *mut ::libc::c_void,
        ad: *mut CRYPTO_EX_DATA,
    );
}
extern "C" {
    pub fn CRYPTO_alloc_ex_data(
        class_index: ::libc::c_int,
        obj: *mut ::libc::c_void,
        ad: *mut CRYPTO_EX_DATA,
        idx: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_set_ex_data(
        ad: *mut CRYPTO_EX_DATA,
        idx: ::libc::c_int,
        val: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_get_ex_data(ad: *const CRYPTO_EX_DATA, idx: ::libc::c_int)
        -> *mut ::libc::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypto_threadid_st {
    pub dummy: ::libc::c_int,
}
pub type CRYPTO_THREADID = crypto_threadid_st;
pub type CRYPTO_malloc_fn = ::std::option::Option<
    unsafe extern "C" fn(
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type CRYPTO_realloc_fn = ::std::option::Option<
    unsafe extern "C" fn(
        addr: *mut ::libc::c_void,
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type CRYPTO_free_fn = ::std::option::Option<
    unsafe extern "C" fn(
        addr: *mut ::libc::c_void,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ),
>;
extern "C" {
    pub fn CRYPTO_set_mem_functions(
        malloc_fn: CRYPTO_malloc_fn,
        realloc_fn: CRYPTO_realloc_fn,
        free_fn: CRYPTO_free_fn,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_get_mem_functions(
        malloc_fn: *mut CRYPTO_malloc_fn,
        realloc_fn: *mut CRYPTO_realloc_fn,
        free_fn: *mut CRYPTO_free_fn,
    );
}
extern "C" {
    pub fn CRYPTO_malloc(
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn CRYPTO_zalloc(
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn CRYPTO_memdup(
        str_: *const ::libc::c_void,
        siz: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn CRYPTO_strdup(
        str_: *const ::libc::c_char,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn CRYPTO_strndup(
        str_: *const ::libc::c_char,
        s: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn CRYPTO_free(ptr: *mut ::libc::c_void, file: *const ::libc::c_char, line: ::libc::c_int);
}
extern "C" {
    pub fn CRYPTO_clear_free(
        ptr: *mut ::libc::c_void,
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    );
}
extern "C" {
    pub fn CRYPTO_realloc(
        addr: *mut ::libc::c_void,
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn CRYPTO_clear_realloc(
        addr: *mut ::libc::c_void,
        old_num: usize,
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn CRYPTO_secure_malloc_init(sz: usize, minsize: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_secure_malloc_done() -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_secure_malloc(
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn CRYPTO_secure_zalloc(
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn CRYPTO_secure_free(
        ptr: *mut ::libc::c_void,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    );
}
extern "C" {
    pub fn CRYPTO_secure_clear_free(
        ptr: *mut ::libc::c_void,
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    );
}
extern "C" {
    pub fn CRYPTO_secure_allocated(ptr: *const ::libc::c_void) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_secure_malloc_initialized() -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_secure_actual_size(ptr: *mut ::libc::c_void) -> usize;
}
extern "C" {
    pub fn CRYPTO_secure_used() -> usize;
}
extern "C" {
    pub fn OPENSSL_cleanse(ptr: *mut ::libc::c_void, len: usize);
}
extern "C" {
    pub fn OPENSSL_die(
        assertion: *const ::libc::c_char,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    );
}
extern "C" {
    pub fn OPENSSL_isservice() -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_init();
}
extern "C" {
    pub fn OPENSSL_gmtime(timer: *const time_t, result: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn OPENSSL_gmtime_adj(
        tm: *mut tm,
        offset_day: ::libc::c_int,
        offset_sec: ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_gmtime_diff(
        pday: *mut ::libc::c_int,
        psec: *mut ::libc::c_int,
        from: *const tm,
        to: *const tm,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_memcmp(
        in_a: *const ::libc::c_void,
        in_b: *const ::libc::c_void,
        len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_cleanup();
}
extern "C" {
    pub fn OPENSSL_init_crypto(opts: u64, settings: *const OPENSSL_INIT_SETTINGS) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_atexit(handler: ::std::option::Option<unsafe extern "C" fn()>) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_thread_stop();
}
extern "C" {
    pub fn OPENSSL_thread_stop_ex(ctx: *mut OSSL_LIB_CTX);
}
extern "C" {
    pub fn OPENSSL_INIT_new() -> *mut OPENSSL_INIT_SETTINGS;
}
extern "C" {
    pub fn OPENSSL_INIT_set_config_filename(
        settings: *mut OPENSSL_INIT_SETTINGS,
        config_filename: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_INIT_set_config_file_flags(
        settings: *mut OPENSSL_INIT_SETTINGS,
        flags: ::libc::c_ulong,
    );
}
extern "C" {
    pub fn OPENSSL_INIT_set_config_appname(
        settings: *mut OPENSSL_INIT_SETTINGS,
        config_appname: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_INIT_free(settings: *mut OPENSSL_INIT_SETTINGS);
}
pub type CRYPTO_ONCE = ::libc::c_uint;
pub type CRYPTO_THREAD_LOCAL = ::libc::c_uint;
pub type CRYPTO_THREAD_ID = ::libc::c_uint;
extern "C" {
    pub fn CRYPTO_THREAD_run_once(
        once: *mut CRYPTO_ONCE,
        init: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_THREAD_init_local(
        key: *mut CRYPTO_THREAD_LOCAL,
        cleanup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void)>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_THREAD_get_local(key: *mut CRYPTO_THREAD_LOCAL) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn CRYPTO_THREAD_set_local(
        key: *mut CRYPTO_THREAD_LOCAL,
        val: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_THREAD_cleanup_local(key: *mut CRYPTO_THREAD_LOCAL) -> ::libc::c_int;
}
extern "C" {
    pub fn CRYPTO_THREAD_get_current_id() -> CRYPTO_THREAD_ID;
}
extern "C" {
    pub fn CRYPTO_THREAD_compare_id(a: CRYPTO_THREAD_ID, b: CRYPTO_THREAD_ID) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_LIB_CTX_new() -> *mut OSSL_LIB_CTX;
}
extern "C" {
    pub fn OSSL_LIB_CTX_new_from_dispatch(
        handle: *const OSSL_CORE_HANDLE,
        in_: *const OSSL_DISPATCH,
    ) -> *mut OSSL_LIB_CTX;
}
extern "C" {
    pub fn OSSL_LIB_CTX_new_child(
        handle: *const OSSL_CORE_HANDLE,
        in_: *const OSSL_DISPATCH,
    ) -> *mut OSSL_LIB_CTX;
}
extern "C" {
    pub fn OSSL_LIB_CTX_load_config(
        ctx: *mut OSSL_LIB_CTX,
        config_file: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_LIB_CTX_free(arg1: *mut OSSL_LIB_CTX);
}
extern "C" {
    pub fn OSSL_LIB_CTX_get0_global_default() -> *mut OSSL_LIB_CTX;
}
extern "C" {
    pub fn OSSL_LIB_CTX_set0_default(libctx: *mut OSSL_LIB_CTX) -> *mut OSSL_LIB_CTX;
}
extern "C" {
    pub fn BN_set_flags(b: *mut BIGNUM, n: ::libc::c_int);
}
extern "C" {
    pub fn BN_get_flags(b: *const BIGNUM, n: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_with_flags(dest: *mut BIGNUM, b: *const BIGNUM, flags: ::libc::c_int);
}
extern "C" {
    pub fn BN_GENCB_call(cb: *mut BN_GENCB, a: ::libc::c_int, b: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GENCB_new() -> *mut BN_GENCB;
}
extern "C" {
    pub fn BN_GENCB_free(cb: *mut BN_GENCB);
}
extern "C" {
    pub fn BN_GENCB_set_old(
        gencb: *mut BN_GENCB,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::libc::c_int,
                arg2: ::libc::c_int,
                arg3: *mut ::libc::c_void,
            ),
        >,
        cb_arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn BN_GENCB_set(
        gencb: *mut BN_GENCB,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::libc::c_int,
                arg2: ::libc::c_int,
                arg3: *mut BN_GENCB,
            ) -> ::libc::c_int,
        >,
        cb_arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn BN_GENCB_get_arg(cb: *mut BN_GENCB) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn BN_abs_is_word(a: *const BIGNUM, w: ::libc::c_ulonglong) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_is_zero(a: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_is_one(a: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_is_word(a: *const BIGNUM, w: ::libc::c_ulonglong) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_is_odd(a: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_zero_ex(a: *mut BIGNUM);
}
extern "C" {
    pub fn BN_value_one() -> *const BIGNUM;
}
extern "C" {
    pub fn BN_options() -> *mut ::libc::c_char;
}
extern "C" {
    pub fn BN_CTX_new_ex(ctx: *mut OSSL_LIB_CTX) -> *mut BN_CTX;
}
extern "C" {
    pub fn BN_CTX_new() -> *mut BN_CTX;
}
extern "C" {
    pub fn BN_CTX_secure_new_ex(ctx: *mut OSSL_LIB_CTX) -> *mut BN_CTX;
}
extern "C" {
    pub fn BN_CTX_secure_new() -> *mut BN_CTX;
}
extern "C" {
    pub fn BN_CTX_free(c: *mut BN_CTX);
}
extern "C" {
    pub fn BN_CTX_start(ctx: *mut BN_CTX);
}
extern "C" {
    pub fn BN_CTX_get(ctx: *mut BN_CTX) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_CTX_end(ctx: *mut BN_CTX);
}
extern "C" {
    pub fn BN_rand_ex(
        rnd: *mut BIGNUM,
        bits: ::libc::c_int,
        top: ::libc::c_int,
        bottom: ::libc::c_int,
        strength: ::libc::c_uint,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_rand(
        rnd: *mut BIGNUM,
        bits: ::libc::c_int,
        top: ::libc::c_int,
        bottom: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_priv_rand_ex(
        rnd: *mut BIGNUM,
        bits: ::libc::c_int,
        top: ::libc::c_int,
        bottom: ::libc::c_int,
        strength: ::libc::c_uint,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_priv_rand(
        rnd: *mut BIGNUM,
        bits: ::libc::c_int,
        top: ::libc::c_int,
        bottom: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_rand_range_ex(
        r: *mut BIGNUM,
        range: *const BIGNUM,
        strength: ::libc::c_uint,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_rand_range(rnd: *mut BIGNUM, range: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_priv_rand_range_ex(
        r: *mut BIGNUM,
        range: *const BIGNUM,
        strength: ::libc::c_uint,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_priv_rand_range(rnd: *mut BIGNUM, range: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_pseudo_rand(
        rnd: *mut BIGNUM,
        bits: ::libc::c_int,
        top: ::libc::c_int,
        bottom: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_pseudo_rand_range(rnd: *mut BIGNUM, range: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_num_bits(a: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_num_bits_word(l: ::libc::c_ulonglong) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_security_bits(L: ::libc::c_int, N: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_new() -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_secure_new() -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_clear_free(a: *mut BIGNUM);
}
extern "C" {
    pub fn BN_copy(a: *mut BIGNUM, b: *const BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_swap(a: *mut BIGNUM, b: *mut BIGNUM);
}
extern "C" {
    pub fn BN_bin2bn(
        s: *const ::libc::c_uchar,
        len: ::libc::c_int,
        ret: *mut BIGNUM,
    ) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_bn2bin(a: *const BIGNUM, to: *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_bn2binpad(
        a: *const BIGNUM,
        to: *mut ::libc::c_uchar,
        tolen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_lebin2bn(
        s: *const ::libc::c_uchar,
        len: ::libc::c_int,
        ret: *mut BIGNUM,
    ) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_bn2lebinpad(
        a: *const BIGNUM,
        to: *mut ::libc::c_uchar,
        tolen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_native2bn(
        s: *const ::libc::c_uchar,
        len: ::libc::c_int,
        ret: *mut BIGNUM,
    ) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_bn2nativepad(
        a: *const BIGNUM,
        to: *mut ::libc::c_uchar,
        tolen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mpi2bn(
        s: *const ::libc::c_uchar,
        len: ::libc::c_int,
        ret: *mut BIGNUM,
    ) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_bn2mpi(a: *const BIGNUM, to: *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_sub(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_usub(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_uadd(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_add(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mul(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_sqr(r: *mut BIGNUM, a: *const BIGNUM, ctx: *mut BN_CTX) -> ::libc::c_int;
}
extern "C" {
    #[doc = " BN_set_negative sets sign of a BIGNUM\n \\param  b  pointer to the BIGNUM object\n \\param  n  0 if the BIGNUM b should be positive and a value != 0 otherwise"]
    pub fn BN_set_negative(b: *mut BIGNUM, n: ::libc::c_int);
}
extern "C" {
    #[doc = " BN_is_negative returns 1 if the BIGNUM is negative\n \\param  b  pointer to the BIGNUM object\n \\return 1 if a < 0 and 0 otherwise"]
    pub fn BN_is_negative(b: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_div(
        dv: *mut BIGNUM,
        rem: *mut BIGNUM,
        m: *const BIGNUM,
        d: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_nnmod(
        r: *mut BIGNUM,
        m: *const BIGNUM,
        d: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_add(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_add_quick(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        m: *const BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_sub(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_sub_quick(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        m: *const BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_mul(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_sqr(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_lshift1(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_lshift1_quick(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        m: *const BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_lshift(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        n: ::libc::c_int,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_lshift_quick(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        n: ::libc::c_int,
        m: *const BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_word(a: *const BIGNUM, w: ::libc::c_ulonglong) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn BN_div_word(a: *mut BIGNUM, w: ::libc::c_ulonglong) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn BN_mul_word(a: *mut BIGNUM, w: ::libc::c_ulonglong) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_add_word(a: *mut BIGNUM, w: ::libc::c_ulonglong) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_sub_word(a: *mut BIGNUM, w: ::libc::c_ulonglong) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_set_word(a: *mut BIGNUM, w: ::libc::c_ulonglong) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_get_word(a: *const BIGNUM) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn BN_cmp(a: *const BIGNUM, b: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_free(a: *mut BIGNUM);
}
extern "C" {
    pub fn BN_is_bit_set(a: *const BIGNUM, n: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_lshift(r: *mut BIGNUM, a: *const BIGNUM, n: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_lshift1(r: *mut BIGNUM, a: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_exp(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_exp(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_exp_mont(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
        m_ctx: *mut BN_MONT_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_exp_mont_consttime(
        rr: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
        in_mont: *mut BN_MONT_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_exp_mont_word(
        r: *mut BIGNUM,
        a: ::libc::c_ulonglong,
        p: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
        m_ctx: *mut BN_MONT_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_exp2_mont(
        r: *mut BIGNUM,
        a1: *const BIGNUM,
        p1: *const BIGNUM,
        a2: *const BIGNUM,
        p2: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
        m_ctx: *mut BN_MONT_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_exp_simple(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_exp_mont_consttime_x2(
        rr1: *mut BIGNUM,
        a1: *const BIGNUM,
        p1: *const BIGNUM,
        m1: *const BIGNUM,
        in_mont1: *mut BN_MONT_CTX,
        rr2: *mut BIGNUM,
        a2: *const BIGNUM,
        p2: *const BIGNUM,
        m2: *const BIGNUM,
        in_mont2: *mut BN_MONT_CTX,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mask_bits(a: *mut BIGNUM, n: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_print_fp(fp: *mut FILE, a: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_print(bio: *mut BIO, a: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_reciprocal(
        r: *mut BIGNUM,
        m: *const BIGNUM,
        len: ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_rshift(r: *mut BIGNUM, a: *const BIGNUM, n: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_rshift1(r: *mut BIGNUM, a: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_clear(a: *mut BIGNUM);
}
extern "C" {
    pub fn BN_dup(a: *const BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_ucmp(a: *const BIGNUM, b: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_set_bit(a: *mut BIGNUM, n: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_clear_bit(a: *mut BIGNUM, n: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_bn2hex(a: *const BIGNUM) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn BN_bn2dec(a: *const BIGNUM) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn BN_hex2bn(a: *mut *mut BIGNUM, str_: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_dec2bn(a: *mut *mut BIGNUM, str_: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_asc2bn(a: *mut *mut BIGNUM, str_: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_gcd(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_kronecker(a: *const BIGNUM, b: *const BIGNUM, ctx: *mut BN_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_inverse(
        ret: *mut BIGNUM,
        a: *const BIGNUM,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_mod_sqrt(
        ret: *mut BIGNUM,
        a: *const BIGNUM,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_consttime_swap(
        swap: ::libc::c_ulonglong,
        a: *mut BIGNUM,
        b: *mut BIGNUM,
        nwords: ::libc::c_int,
    );
}
extern "C" {
    pub fn BN_generate_prime(
        ret: *mut BIGNUM,
        bits: ::libc::c_int,
        safe: ::libc::c_int,
        add: *const BIGNUM,
        rem: *const BIGNUM,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::libc::c_int,
                arg2: ::libc::c_int,
                arg3: *mut ::libc::c_void,
            ),
        >,
        cb_arg: *mut ::libc::c_void,
    ) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_is_prime(
        p: *const BIGNUM,
        nchecks: ::libc::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::libc::c_int,
                arg2: ::libc::c_int,
                arg3: *mut ::libc::c_void,
            ),
        >,
        ctx: *mut BN_CTX,
        cb_arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_is_prime_fasttest(
        p: *const BIGNUM,
        nchecks: ::libc::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::libc::c_int,
                arg2: ::libc::c_int,
                arg3: *mut ::libc::c_void,
            ),
        >,
        ctx: *mut BN_CTX,
        cb_arg: *mut ::libc::c_void,
        do_trial_division: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_is_prime_ex(
        p: *const BIGNUM,
        nchecks: ::libc::c_int,
        ctx: *mut BN_CTX,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_is_prime_fasttest_ex(
        p: *const BIGNUM,
        nchecks: ::libc::c_int,
        ctx: *mut BN_CTX,
        do_trial_division: ::libc::c_int,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_generate_prime_ex2(
        ret: *mut BIGNUM,
        bits: ::libc::c_int,
        safe: ::libc::c_int,
        add: *const BIGNUM,
        rem: *const BIGNUM,
        cb: *mut BN_GENCB,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_generate_prime_ex(
        ret: *mut BIGNUM,
        bits: ::libc::c_int,
        safe: ::libc::c_int,
        add: *const BIGNUM,
        rem: *const BIGNUM,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_check_prime(p: *const BIGNUM, ctx: *mut BN_CTX, cb: *mut BN_GENCB) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_X931_generate_Xpq(
        Xp: *mut BIGNUM,
        Xq: *mut BIGNUM,
        nbits: ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_X931_derive_prime_ex(
        p: *mut BIGNUM,
        p1: *mut BIGNUM,
        p2: *mut BIGNUM,
        Xp: *const BIGNUM,
        Xp1: *const BIGNUM,
        Xp2: *const BIGNUM,
        e: *const BIGNUM,
        ctx: *mut BN_CTX,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_X931_generate_prime_ex(
        p: *mut BIGNUM,
        p1: *mut BIGNUM,
        p2: *mut BIGNUM,
        Xp1: *mut BIGNUM,
        Xp2: *mut BIGNUM,
        Xp: *const BIGNUM,
        e: *const BIGNUM,
        ctx: *mut BN_CTX,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_MONT_CTX_new() -> *mut BN_MONT_CTX;
}
extern "C" {
    pub fn BN_mod_mul_montgomery(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        mont: *mut BN_MONT_CTX,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_to_montgomery(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        mont: *mut BN_MONT_CTX,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_from_montgomery(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        mont: *mut BN_MONT_CTX,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_MONT_CTX_free(mont: *mut BN_MONT_CTX);
}
extern "C" {
    pub fn BN_MONT_CTX_set(
        mont: *mut BN_MONT_CTX,
        mod_: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_MONT_CTX_copy(to: *mut BN_MONT_CTX, from: *mut BN_MONT_CTX) -> *mut BN_MONT_CTX;
}
extern "C" {
    pub fn BN_MONT_CTX_set_locked(
        pmont: *mut *mut BN_MONT_CTX,
        lock: *mut CRYPTO_RWLOCK,
        mod_: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> *mut BN_MONT_CTX;
}
extern "C" {
    pub fn BN_BLINDING_new(
        A: *const BIGNUM,
        Ai: *const BIGNUM,
        mod_: *mut BIGNUM,
    ) -> *mut BN_BLINDING;
}
extern "C" {
    pub fn BN_BLINDING_free(b: *mut BN_BLINDING);
}
extern "C" {
    pub fn BN_BLINDING_update(b: *mut BN_BLINDING, ctx: *mut BN_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_BLINDING_convert(
        n: *mut BIGNUM,
        b: *mut BN_BLINDING,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_BLINDING_invert(
        n: *mut BIGNUM,
        b: *mut BN_BLINDING,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_BLINDING_convert_ex(
        n: *mut BIGNUM,
        r: *mut BIGNUM,
        b: *mut BN_BLINDING,
        arg1: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_BLINDING_invert_ex(
        n: *mut BIGNUM,
        r: *const BIGNUM,
        b: *mut BN_BLINDING,
        arg1: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_BLINDING_is_current_thread(b: *mut BN_BLINDING) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_BLINDING_set_current_thread(b: *mut BN_BLINDING);
}
extern "C" {
    pub fn BN_BLINDING_lock(b: *mut BN_BLINDING) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_BLINDING_unlock(b: *mut BN_BLINDING) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_BLINDING_get_flags(arg1: *const BN_BLINDING) -> ::libc::c_ulong;
}
extern "C" {
    pub fn BN_BLINDING_set_flags(arg1: *mut BN_BLINDING, arg2: ::libc::c_ulong);
}
extern "C" {
    pub fn BN_BLINDING_create_param(
        b: *mut BN_BLINDING,
        e: *const BIGNUM,
        m: *mut BIGNUM,
        ctx: *mut BN_CTX,
        bn_mod_exp: ::std::option::Option<
            unsafe extern "C" fn(
                r: *mut BIGNUM,
                a: *const BIGNUM,
                p: *const BIGNUM,
                m: *const BIGNUM,
                ctx: *mut BN_CTX,
                m_ctx: *mut BN_MONT_CTX,
            ) -> ::libc::c_int,
        >,
        m_ctx: *mut BN_MONT_CTX,
    ) -> *mut BN_BLINDING;
}
extern "C" {
    pub fn BN_set_params(
        mul: ::libc::c_int,
        high: ::libc::c_int,
        low: ::libc::c_int,
        mont: ::libc::c_int,
    );
}
extern "C" {
    pub fn BN_get_params(which: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_RECP_CTX_new() -> *mut BN_RECP_CTX;
}
extern "C" {
    pub fn BN_RECP_CTX_free(recp: *mut BN_RECP_CTX);
}
extern "C" {
    pub fn BN_RECP_CTX_set(
        recp: *mut BN_RECP_CTX,
        rdiv: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_mul_reciprocal(
        r: *mut BIGNUM,
        x: *const BIGNUM,
        y: *const BIGNUM,
        recp: *mut BN_RECP_CTX,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_mod_exp_recp(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_div_recp(
        dv: *mut BIGNUM,
        rem: *mut BIGNUM,
        m: *const BIGNUM,
        recp: *mut BN_RECP_CTX,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_add(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_mul(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_sqr(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_inv(
        r: *mut BIGNUM,
        b: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_div(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_exp(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_sqrt(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_solve_quad(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_arr(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_mul_arr(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        p: *const ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_sqr_arr(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_inv_arr(
        r: *mut BIGNUM,
        b: *const BIGNUM,
        p: *const ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_div_arr(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        p: *const ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_exp_arr(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        p: *const ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_sqrt_arr(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_mod_solve_quad_arr(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_poly2arr(
        a: *const BIGNUM,
        p: *mut ::libc::c_int,
        max: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_GF2m_arr2poly(p: *const ::libc::c_int, a: *mut BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_nist_mod_192(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_nist_mod_224(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_nist_mod_256(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_nist_mod_384(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_nist_mod_521(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_get0_nist_prime_192() -> *const BIGNUM;
}
extern "C" {
    pub fn BN_get0_nist_prime_224() -> *const BIGNUM;
}
extern "C" {
    pub fn BN_get0_nist_prime_256() -> *const BIGNUM;
}
extern "C" {
    pub fn BN_get0_nist_prime_384() -> *const BIGNUM;
}
extern "C" {
    pub fn BN_get0_nist_prime_521() -> *const BIGNUM;
}
extern "C" {
    pub fn BN_nist_mod_func(
        p: *const BIGNUM,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut BIGNUM,
            arg1: *const BIGNUM,
            arg2: *const BIGNUM,
            arg3: *mut BN_CTX,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn BN_generate_dsa_nonce(
        out: *mut BIGNUM,
        range: *const BIGNUM,
        priv_: *const BIGNUM,
        message: *const ::libc::c_uchar,
        message_len: usize,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BN_get_rfc2409_prime_768(bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_get_rfc2409_prime_1024(bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_get_rfc3526_prime_1536(bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_get_rfc3526_prime_2048(bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_get_rfc3526_prime_3072(bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_get_rfc3526_prime_4096(bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_get_rfc3526_prime_6144(bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_get_rfc3526_prime_8192(bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_bntest_rand(
        rnd: *mut BIGNUM,
        bits: ::libc::c_int,
        top: ::libc::c_int,
        bottom: ::libc::c_int,
    ) -> ::libc::c_int;
}
pub type OSSL_FUNC_core_gettable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_core_get_params_fn = ::std::option::Option<
    unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_core_thread_start_fn = ::std::option::Option<
    unsafe extern "C" fn(
        prov: *const OSSL_CORE_HANDLE,
        handfn: OSSL_thread_stop_handler_fn,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_core_get_libctx_fn = ::std::option::Option<
    unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE) -> *mut OPENSSL_CORE_CTX,
>;
pub type OSSL_FUNC_core_new_error_fn =
    ::std::option::Option<unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE)>;
pub type OSSL_FUNC_core_set_error_debug_fn = ::std::option::Option<
    unsafe extern "C" fn(
        prov: *const OSSL_CORE_HANDLE,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
        func: *const ::libc::c_char,
    ),
>;
pub type OSSL_FUNC_core_vset_error_fn = ::std::option::Option<
    unsafe extern "C" fn(
        prov: *const OSSL_CORE_HANDLE,
        reason: u32,
        fmt: *const ::libc::c_char,
        args: va_list,
    ),
>;
pub type OSSL_FUNC_core_set_error_mark_fn =
    ::std::option::Option<unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE) -> ::libc::c_int>;
pub type OSSL_FUNC_core_clear_last_error_mark_fn =
    ::std::option::Option<unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE) -> ::libc::c_int>;
pub type OSSL_FUNC_core_pop_error_to_mark_fn =
    ::std::option::Option<unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE) -> ::libc::c_int>;
pub type OSSL_FUNC_core_obj_add_sigid_fn = ::std::option::Option<
    unsafe extern "C" fn(
        prov: *const OSSL_CORE_HANDLE,
        sign_name: *const ::libc::c_char,
        digest_name: *const ::libc::c_char,
        pkey_name: *const ::libc::c_char,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_core_obj_create_fn = ::std::option::Option<
    unsafe extern "C" fn(
        prov: *const OSSL_CORE_HANDLE,
        oid: *const ::libc::c_char,
        sn: *const ::libc::c_char,
        ln: *const ::libc::c_char,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_CRYPTO_malloc_fn = ::std::option::Option<
    unsafe extern "C" fn(
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_CRYPTO_zalloc_fn = ::std::option::Option<
    unsafe extern "C" fn(
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_CRYPTO_free_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::libc::c_void,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ),
>;
pub type OSSL_FUNC_CRYPTO_clear_free_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::libc::c_void,
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ),
>;
pub type OSSL_FUNC_CRYPTO_realloc_fn = ::std::option::Option<
    unsafe extern "C" fn(
        addr: *mut ::libc::c_void,
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_CRYPTO_clear_realloc_fn = ::std::option::Option<
    unsafe extern "C" fn(
        addr: *mut ::libc::c_void,
        old_num: usize,
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_CRYPTO_secure_malloc_fn = ::std::option::Option<
    unsafe extern "C" fn(
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_CRYPTO_secure_zalloc_fn = ::std::option::Option<
    unsafe extern "C" fn(
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_CRYPTO_secure_free_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::libc::c_void,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ),
>;
pub type OSSL_FUNC_CRYPTO_secure_clear_free_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::libc::c_void,
        num: usize,
        file: *const ::libc::c_char,
        line: ::libc::c_int,
    ),
>;
pub type OSSL_FUNC_CRYPTO_secure_allocated_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const ::libc::c_void) -> ::libc::c_int>;
pub type OSSL_FUNC_OPENSSL_cleanse_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::libc::c_void, len: usize)>;
pub type OSSL_FUNC_BIO_new_file_fn = ::std::option::Option<
    unsafe extern "C" fn(
        filename: *const ::libc::c_char,
        mode: *const ::libc::c_char,
    ) -> *mut OSSL_CORE_BIO,
>;
pub type OSSL_FUNC_BIO_new_membuf_fn = ::std::option::Option<
    unsafe extern "C" fn(buf: *const ::libc::c_void, len: ::libc::c_int) -> *mut OSSL_CORE_BIO,
>;
pub type OSSL_FUNC_BIO_read_ex_fn = ::std::option::Option<
    unsafe extern "C" fn(
        bio: *mut OSSL_CORE_BIO,
        data: *mut ::libc::c_void,
        data_len: usize,
        bytes_read: *mut usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_BIO_write_ex_fn = ::std::option::Option<
    unsafe extern "C" fn(
        bio: *mut OSSL_CORE_BIO,
        data: *const ::libc::c_void,
        data_len: usize,
        written: *mut usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_BIO_gets_fn = ::std::option::Option<
    unsafe extern "C" fn(
        bio: *mut OSSL_CORE_BIO,
        buf: *mut ::libc::c_char,
        size: ::libc::c_int,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_BIO_puts_fn = ::std::option::Option<
    unsafe extern "C" fn(bio: *mut OSSL_CORE_BIO, str_: *const ::libc::c_char) -> ::libc::c_int,
>;
pub type OSSL_FUNC_BIO_up_ref_fn =
    ::std::option::Option<unsafe extern "C" fn(bio: *mut OSSL_CORE_BIO) -> ::libc::c_int>;
pub type OSSL_FUNC_BIO_free_fn =
    ::std::option::Option<unsafe extern "C" fn(bio: *mut OSSL_CORE_BIO) -> ::libc::c_int>;
pub type OSSL_FUNC_BIO_vprintf_fn = ::std::option::Option<
    unsafe extern "C" fn(
        bio: *mut OSSL_CORE_BIO,
        format: *const ::libc::c_char,
        args: va_list,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_BIO_vsnprintf_fn = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::libc::c_char,
        n: usize,
        fmt: *const ::libc::c_char,
        args: va_list,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_BIO_ctrl_fn = ::std::option::Option<
    unsafe extern "C" fn(
        bio: *mut OSSL_CORE_BIO,
        cmd: ::libc::c_int,
        num: ::libc::c_long,
        ptr: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_self_test_cb_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut OPENSSL_CORE_CTX,
        cb: *mut OSSL_CALLBACK,
        cbarg: *mut *mut ::libc::c_void,
    ),
>;
pub type OSSL_FUNC_get_entropy_fn = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *const OSSL_CORE_HANDLE,
        pout: *mut *mut ::libc::c_uchar,
        entropy: ::libc::c_int,
        min_len: usize,
        max_len: usize,
    ) -> usize,
>;
pub type OSSL_FUNC_cleanup_entropy_fn = ::std::option::Option<
    unsafe extern "C" fn(handle: *const OSSL_CORE_HANDLE, buf: *mut ::libc::c_uchar, len: usize),
>;
pub type OSSL_FUNC_get_nonce_fn = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *const OSSL_CORE_HANDLE,
        pout: *mut *mut ::libc::c_uchar,
        min_len: usize,
        max_len: usize,
        salt: *const ::libc::c_void,
        salt_len: usize,
    ) -> usize,
>;
pub type OSSL_FUNC_cleanup_nonce_fn = ::std::option::Option<
    unsafe extern "C" fn(handle: *const OSSL_CORE_HANDLE, buf: *mut ::libc::c_uchar, len: usize),
>;
pub type OSSL_FUNC_provider_register_child_cb_fn = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *const OSSL_CORE_HANDLE,
        create_cb: ::std::option::Option<
            unsafe extern "C" fn(
                provider: *const OSSL_CORE_HANDLE,
                cbdata: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
        remove_cb: ::std::option::Option<
            unsafe extern "C" fn(
                provider: *const OSSL_CORE_HANDLE,
                cbdata: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
        global_props_cb: ::std::option::Option<
            unsafe extern "C" fn(
                props: *const ::libc::c_char,
                cbdata: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
        cbdata: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_provider_deregister_child_cb_fn =
    ::std::option::Option<unsafe extern "C" fn(handle: *const OSSL_CORE_HANDLE)>;
pub type OSSL_FUNC_provider_name_fn = ::std::option::Option<
    unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE) -> *const ::libc::c_char,
>;
pub type OSSL_FUNC_provider_get0_provider_ctx_fn = ::std::option::Option<
    unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_provider_get0_dispatch_fn = ::std::option::Option<
    unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE) -> *const OSSL_DISPATCH,
>;
pub type OSSL_FUNC_provider_up_ref_fn = ::std::option::Option<
    unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE, activate: ::libc::c_int) -> ::libc::c_int,
>;
pub type OSSL_FUNC_provider_free_fn = ::std::option::Option<
    unsafe extern "C" fn(prov: *const OSSL_CORE_HANDLE, deactivate: ::libc::c_int) -> ::libc::c_int,
>;
pub type OSSL_FUNC_provider_teardown_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_provider_gettable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_provider_get_params_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_provider_query_operation_fn = ::std::option::Option<
    unsafe extern "C" fn(
        provctx: *mut ::libc::c_void,
        operation_id: ::libc::c_int,
        no_store: *mut ::libc::c_int,
    ) -> *const OSSL_ALGORITHM,
>;
pub type OSSL_FUNC_provider_unquery_operation_fn = ::std::option::Option<
    unsafe extern "C" fn(
        provctx: *mut ::libc::c_void,
        operation_id: ::libc::c_int,
        arg1: *const OSSL_ALGORITHM,
    ),
>;
pub type OSSL_FUNC_provider_get_reason_strings_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_ITEM>;
pub type OSSL_FUNC_provider_get_capabilities_fn = ::std::option::Option<
    unsafe extern "C" fn(
        provctx: *mut ::libc::c_void,
        capability: *const ::libc::c_char,
        cb: OSSL_CALLBACK,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_provider_self_test_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> ::libc::c_int>;
pub type OSSL_FUNC_digest_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_digest_init_fn = ::std::option::Option<
    unsafe extern "C" fn(dctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_digest_update_fn = ::std::option::Option<
    unsafe extern "C" fn(
        dctx: *mut ::libc::c_void,
        in_: *const ::libc::c_uchar,
        inl: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_digest_final_fn = ::std::option::Option<
    unsafe extern "C" fn(
        dctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        outl: *mut usize,
        outsz: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_digest_digest_fn = ::std::option::Option<
    unsafe extern "C" fn(
        provctx: *mut ::libc::c_void,
        in_: *const ::libc::c_uchar,
        inl: usize,
        out: *mut ::libc::c_uchar,
        outl: *mut usize,
        outsz: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_digest_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(dctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_digest_dupctx_fn =
    ::std::option::Option<unsafe extern "C" fn(dctx: *mut ::libc::c_void) -> *mut ::libc::c_void>;
pub type OSSL_FUNC_digest_get_params_fn =
    ::std::option::Option<unsafe extern "C" fn(params: *mut OSSL_PARAM) -> ::libc::c_int>;
pub type OSSL_FUNC_digest_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(vctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_digest_get_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(vctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_digest_gettable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_digest_settable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        dctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_digest_gettable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        dctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_cipher_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_cipher_encrypt_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cctx: *mut ::libc::c_void,
        key: *const ::libc::c_uchar,
        keylen: usize,
        iv: *const ::libc::c_uchar,
        ivlen: usize,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_cipher_decrypt_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cctx: *mut ::libc::c_void,
        key: *const ::libc::c_uchar,
        keylen: usize,
        iv: *const ::libc::c_uchar,
        ivlen: usize,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_cipher_update_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        outl: *mut usize,
        outsize: usize,
        in_: *const ::libc::c_uchar,
        inl: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_cipher_final_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        outl: *mut usize,
        outsize: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_cipher_cipher_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        outl: *mut usize,
        outsize: usize,
        in_: *const ::libc::c_uchar,
        inl: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_cipher_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(cctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_cipher_dupctx_fn =
    ::std::option::Option<unsafe extern "C" fn(cctx: *mut ::libc::c_void) -> *mut ::libc::c_void>;
pub type OSSL_FUNC_cipher_get_params_fn =
    ::std::option::Option<unsafe extern "C" fn(params: *mut OSSL_PARAM) -> ::libc::c_int>;
pub type OSSL_FUNC_cipher_get_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(cctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_cipher_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(cctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_cipher_gettable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_cipher_settable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_cipher_gettable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_mac_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_mac_dupctx_fn =
    ::std::option::Option<unsafe extern "C" fn(src: *mut ::libc::c_void) -> *mut ::libc::c_void>;
pub type OSSL_FUNC_mac_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(mctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_mac_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        mctx: *mut ::libc::c_void,
        key: *const ::libc::c_uchar,
        keylen: usize,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_mac_update_fn = ::std::option::Option<
    unsafe extern "C" fn(
        mctx: *mut ::libc::c_void,
        in_: *const ::libc::c_uchar,
        inl: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_mac_final_fn = ::std::option::Option<
    unsafe extern "C" fn(
        mctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        outl: *mut usize,
        outsize: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_mac_gettable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_mac_gettable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        mctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_mac_settable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        mctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_mac_get_params_fn =
    ::std::option::Option<unsafe extern "C" fn(params: *mut OSSL_PARAM) -> ::libc::c_int>;
pub type OSSL_FUNC_mac_get_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(mctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_mac_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(mctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_kdf_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_kdf_dupctx_fn =
    ::std::option::Option<unsafe extern "C" fn(src: *mut ::libc::c_void) -> *mut ::libc::c_void>;
pub type OSSL_FUNC_kdf_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(kctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_kdf_reset_fn =
    ::std::option::Option<unsafe extern "C" fn(kctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_kdf_derive_fn = ::std::option::Option<
    unsafe extern "C" fn(
        kctx: *mut ::libc::c_void,
        key: *mut ::libc::c_uchar,
        keylen: usize,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_kdf_gettable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_kdf_gettable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        kctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_kdf_settable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        kctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_kdf_get_params_fn =
    ::std::option::Option<unsafe extern "C" fn(params: *mut OSSL_PARAM) -> ::libc::c_int>;
pub type OSSL_FUNC_kdf_get_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(kctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_kdf_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(kctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_rand_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(
        provctx: *mut ::libc::c_void,
        parent: *mut ::libc::c_void,
        parent_calls: *const OSSL_DISPATCH,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_rand_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(vctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_rand_instantiate_fn = ::std::option::Option<
    unsafe extern "C" fn(
        vdrbg: *mut ::libc::c_void,
        strength: ::libc::c_uint,
        prediction_resistance: ::libc::c_int,
        pstr: *const ::libc::c_uchar,
        pstr_len: usize,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_rand_uninstantiate_fn =
    ::std::option::Option<unsafe extern "C" fn(vdrbg: *mut ::libc::c_void) -> ::libc::c_int>;
pub type OSSL_FUNC_rand_generate_fn = ::std::option::Option<
    unsafe extern "C" fn(
        vctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        outlen: usize,
        strength: ::libc::c_uint,
        prediction_resistance: ::libc::c_int,
        addin: *const ::libc::c_uchar,
        addin_len: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_rand_reseed_fn = ::std::option::Option<
    unsafe extern "C" fn(
        vctx: *mut ::libc::c_void,
        prediction_resistance: ::libc::c_int,
        ent: *const ::libc::c_uchar,
        ent_len: usize,
        addin: *const ::libc::c_uchar,
        addin_len: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_rand_nonce_fn = ::std::option::Option<
    unsafe extern "C" fn(
        vctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        strength: ::libc::c_uint,
        min_noncelen: usize,
        max_noncelen: usize,
    ) -> usize,
>;
pub type OSSL_FUNC_rand_enable_locking_fn =
    ::std::option::Option<unsafe extern "C" fn(vctx: *mut ::libc::c_void) -> ::libc::c_int>;
pub type OSSL_FUNC_rand_lock_fn =
    ::std::option::Option<unsafe extern "C" fn(vctx: *mut ::libc::c_void) -> ::libc::c_int>;
pub type OSSL_FUNC_rand_unlock_fn =
    ::std::option::Option<unsafe extern "C" fn(vctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_rand_gettable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_rand_gettable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        vctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_rand_settable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        vctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_rand_get_params_fn =
    ::std::option::Option<unsafe extern "C" fn(params: *mut OSSL_PARAM) -> ::libc::c_int>;
pub type OSSL_FUNC_rand_get_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(vctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_rand_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(vctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_rand_set_callbacks_fn = ::std::option::Option<
    unsafe extern "C" fn(
        vctx: *mut ::libc::c_void,
        get_entropy: OSSL_INOUT_CALLBACK,
        cleanup_entropy: OSSL_CALLBACK,
        get_nonce: OSSL_INOUT_CALLBACK,
        cleanup_nonce: OSSL_CALLBACK,
        arg: *mut ::libc::c_void,
    ),
>;
pub type OSSL_FUNC_rand_verify_zeroization_fn =
    ::std::option::Option<unsafe extern "C" fn(vctx: *mut ::libc::c_void) -> ::libc::c_int>;
pub type OSSL_FUNC_rand_get_seed_fn = ::std::option::Option<
    unsafe extern "C" fn(
        vctx: *mut ::libc::c_void,
        buffer: *mut *mut ::libc::c_uchar,
        entropy: ::libc::c_int,
        min_len: usize,
        max_len: usize,
        prediction_resistance: ::libc::c_int,
        adin: *const ::libc::c_uchar,
        adin_len: usize,
    ) -> usize,
>;
pub type OSSL_FUNC_rand_clear_seed_fn = ::std::option::Option<
    unsafe extern "C" fn(vctx: *mut ::libc::c_void, buffer: *mut ::libc::c_uchar, b_len: usize),
>;
pub type OSSL_FUNC_keymgmt_new_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_keymgmt_gen_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        provctx: *mut ::libc::c_void,
        selection: ::libc::c_int,
        params: *const OSSL_PARAM,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_keymgmt_gen_set_template_fn = ::std::option::Option<
    unsafe extern "C" fn(genctx: *mut ::libc::c_void, templ: *mut ::libc::c_void) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keymgmt_gen_set_params_fn = ::std::option::Option<
    unsafe extern "C" fn(genctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keymgmt_gen_settable_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        genctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_keymgmt_gen_fn = ::std::option::Option<
    unsafe extern "C" fn(
        genctx: *mut ::libc::c_void,
        cb: OSSL_CALLBACK,
        cbarg: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_keymgmt_gen_cleanup_fn =
    ::std::option::Option<unsafe extern "C" fn(genctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_keymgmt_load_fn = ::std::option::Option<
    unsafe extern "C" fn(
        reference: *const ::libc::c_void,
        reference_sz: usize,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_keymgmt_free_fn =
    ::std::option::Option<unsafe extern "C" fn(keydata: *mut ::libc::c_void)>;
pub type OSSL_FUNC_keymgmt_get_params_fn = ::std::option::Option<
    unsafe extern "C" fn(keydata: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keymgmt_gettable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_keymgmt_set_params_fn = ::std::option::Option<
    unsafe extern "C" fn(keydata: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keymgmt_settable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_keymgmt_query_operation_name_fn = ::std::option::Option<
    unsafe extern "C" fn(operation_id: ::libc::c_int) -> *const ::libc::c_char,
>;
pub type OSSL_FUNC_keymgmt_has_fn = ::std::option::Option<
    unsafe extern "C" fn(keydata: *const ::libc::c_void, selection: ::libc::c_int) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keymgmt_validate_fn = ::std::option::Option<
    unsafe extern "C" fn(
        keydata: *const ::libc::c_void,
        selection: ::libc::c_int,
        checktype: ::libc::c_int,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keymgmt_match_fn = ::std::option::Option<
    unsafe extern "C" fn(
        keydata1: *const ::libc::c_void,
        keydata2: *const ::libc::c_void,
        selection: ::libc::c_int,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keymgmt_import_fn = ::std::option::Option<
    unsafe extern "C" fn(
        keydata: *mut ::libc::c_void,
        selection: ::libc::c_int,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keymgmt_import_types_fn =
    ::std::option::Option<unsafe extern "C" fn(selection: ::libc::c_int) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_keymgmt_export_fn = ::std::option::Option<
    unsafe extern "C" fn(
        keydata: *mut ::libc::c_void,
        selection: ::libc::c_int,
        param_cb: OSSL_CALLBACK,
        cbarg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keymgmt_export_types_fn =
    ::std::option::Option<unsafe extern "C" fn(selection: ::libc::c_int) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_keymgmt_dup_fn = ::std::option::Option<
    unsafe extern "C" fn(
        keydata_from: *const ::libc::c_void,
        selection: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_keyexch_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_keyexch_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provkey: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keyexch_derive_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        secret: *mut ::libc::c_uchar,
        secretlen: *mut usize,
        outlen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keyexch_set_peer_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, provkey: *mut ::libc::c_void) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keyexch_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_keyexch_dupctx_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void) -> *mut ::libc::c_void>;
pub type OSSL_FUNC_keyexch_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keyexch_settable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_keyexch_get_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_keyexch_gettable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_signature_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(
        provctx: *mut ::libc::c_void,
        propq: *const ::libc::c_char,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_signature_sign_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provkey: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_sign_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        sig: *mut ::libc::c_uchar,
        siglen: *mut usize,
        sigsize: usize,
        tbs: *const ::libc::c_uchar,
        tbslen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_verify_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provkey: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_verify_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        sig: *const ::libc::c_uchar,
        siglen: usize,
        tbs: *const ::libc::c_uchar,
        tbslen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_verify_recover_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provkey: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_verify_recover_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        rout: *mut ::libc::c_uchar,
        routlen: *mut usize,
        routsize: usize,
        sig: *const ::libc::c_uchar,
        siglen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_digest_sign_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        mdname: *const ::libc::c_char,
        provkey: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_digest_sign_update_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        data: *const ::libc::c_uchar,
        datalen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_digest_sign_final_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        sig: *mut ::libc::c_uchar,
        siglen: *mut usize,
        sigsize: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_digest_sign_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        sigret: *mut ::libc::c_uchar,
        siglen: *mut usize,
        sigsize: usize,
        tbs: *const ::libc::c_uchar,
        tbslen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_digest_verify_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        mdname: *const ::libc::c_char,
        provkey: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_digest_verify_update_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        data: *const ::libc::c_uchar,
        datalen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_digest_verify_final_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        sig: *const ::libc::c_uchar,
        siglen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_digest_verify_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        sig: *const ::libc::c_uchar,
        siglen: usize,
        tbs: *const ::libc::c_uchar,
        tbslen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_signature_dupctx_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void) -> *mut ::libc::c_void>;
pub type OSSL_FUNC_signature_get_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_gettable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_signature_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_settable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_signature_get_ctx_md_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_gettable_ctx_md_params_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_signature_set_ctx_md_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_signature_settable_ctx_md_params_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_asym_cipher_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_asym_cipher_encrypt_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provkey: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_asym_cipher_encrypt_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        outlen: *mut usize,
        outsize: usize,
        in_: *const ::libc::c_uchar,
        inlen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_asym_cipher_decrypt_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provkey: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_asym_cipher_decrypt_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        outlen: *mut usize,
        outsize: usize,
        in_: *const ::libc::c_uchar,
        inlen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_asym_cipher_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_asym_cipher_dupctx_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void) -> *mut ::libc::c_void>;
pub type OSSL_FUNC_asym_cipher_get_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_asym_cipher_gettable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_asym_cipher_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_asym_cipher_settable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_kem_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_kem_encapsulate_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provkey: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_kem_encapsulate_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        outlen: *mut usize,
        secret: *mut ::libc::c_uchar,
        secretlen: *mut usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_kem_decapsulate_init_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provkey: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_kem_decapsulate_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        out: *mut ::libc::c_uchar,
        outlen: *mut usize,
        in_: *const ::libc::c_uchar,
        inlen: usize,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_kem_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_kem_dupctx_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void) -> *mut ::libc::c_void>;
pub type OSSL_FUNC_kem_get_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *mut OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_kem_gettable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_kem_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_kem_settable_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        provctx: *mut ::libc::c_void,
    ) -> *const OSSL_PARAM,
>;
pub type OSSL_FUNC_encoder_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_encoder_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_encoder_get_params_fn =
    ::std::option::Option<unsafe extern "C" fn(params: *mut OSSL_PARAM) -> ::libc::c_int>;
pub type OSSL_FUNC_encoder_gettable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_encoder_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_encoder_settable_ctx_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_encoder_does_selection_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void, selection: ::libc::c_int) -> ::libc::c_int,
>;
pub type OSSL_FUNC_encoder_encode_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        out: *mut OSSL_CORE_BIO,
        obj_raw: *const ::libc::c_void,
        obj_abstract: *const OSSL_PARAM,
        selection: ::libc::c_int,
        cb: OSSL_PASSPHRASE_CALLBACK,
        cbarg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_encoder_import_object_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        selection: ::libc::c_int,
        params: *const OSSL_PARAM,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_encoder_free_object_fn =
    ::std::option::Option<unsafe extern "C" fn(obj: *mut ::libc::c_void)>;
pub type OSSL_FUNC_decoder_newctx_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_decoder_freectx_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::libc::c_void)>;
pub type OSSL_FUNC_decoder_get_params_fn =
    ::std::option::Option<unsafe extern "C" fn(params: *mut OSSL_PARAM) -> ::libc::c_int>;
pub type OSSL_FUNC_decoder_gettable_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_decoder_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::libc::c_void, params: *const OSSL_PARAM) -> ::libc::c_int,
>;
pub type OSSL_FUNC_decoder_settable_ctx_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_decoder_does_selection_fn = ::std::option::Option<
    unsafe extern "C" fn(provctx: *mut ::libc::c_void, selection: ::libc::c_int) -> ::libc::c_int,
>;
pub type OSSL_FUNC_decoder_decode_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        in_: *mut OSSL_CORE_BIO,
        selection: ::libc::c_int,
        data_cb: OSSL_CALLBACK,
        data_cbarg: *mut ::libc::c_void,
        pw_cb: OSSL_PASSPHRASE_CALLBACK,
        pw_cbarg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_decoder_export_object_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::libc::c_void,
        objref: *const ::libc::c_void,
        objref_sz: usize,
        export_cb: OSSL_CALLBACK,
        export_cbarg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_store_open_fn = ::std::option::Option<
    unsafe extern "C" fn(
        provctx: *mut ::libc::c_void,
        uri: *const ::libc::c_char,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_store_attach_fn = ::std::option::Option<
    unsafe extern "C" fn(
        provctx: *mut ::libc::c_void,
        in_: *mut OSSL_CORE_BIO,
    ) -> *mut ::libc::c_void,
>;
pub type OSSL_FUNC_store_settable_ctx_params_fn =
    ::std::option::Option<unsafe extern "C" fn(provctx: *mut ::libc::c_void) -> *const OSSL_PARAM>;
pub type OSSL_FUNC_store_set_ctx_params_fn = ::std::option::Option<
    unsafe extern "C" fn(
        loaderctx: *mut ::libc::c_void,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_store_load_fn = ::std::option::Option<
    unsafe extern "C" fn(
        loaderctx: *mut ::libc::c_void,
        object_cb: OSSL_CALLBACK,
        object_cbarg: *mut ::libc::c_void,
        pw_cb: OSSL_PASSPHRASE_CALLBACK,
        pw_cbarg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type OSSL_FUNC_store_eof_fn =
    ::std::option::Option<unsafe extern "C" fn(loaderctx: *mut ::libc::c_void) -> ::libc::c_int>;
pub type OSSL_FUNC_store_close_fn =
    ::std::option::Option<unsafe extern "C" fn(loaderctx: *mut ::libc::c_void) -> ::libc::c_int>;
pub type OSSL_FUNC_store_export_object_fn = ::std::option::Option<
    unsafe extern "C" fn(
        loaderctx: *mut ::libc::c_void,
        objref: *const ::libc::c_void,
        objref_sz: usize,
        export_cb: OSSL_CALLBACK,
        export_cbarg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bio_addr_st {
    _unused: [u8; 0],
}
pub type BIO_ADDR = bio_addr_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bio_addrinfo_st {
    _unused: [u8; 0],
}
pub type BIO_ADDRINFO = bio_addrinfo_st;
extern "C" {
    pub fn BIO_get_new_index() -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_set_flags(b: *mut BIO, flags: ::libc::c_int);
}
extern "C" {
    pub fn BIO_test_flags(b: *const BIO, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_clear_flags(b: *mut BIO, flags: ::libc::c_int);
}
pub type BIO_callback_fn = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut BIO,
        oper: ::libc::c_int,
        argp: *const ::libc::c_char,
        argi: ::libc::c_int,
        argl: ::libc::c_long,
        ret: ::libc::c_long,
    ) -> ::libc::c_long,
>;
extern "C" {
    pub fn BIO_get_callback(b: *const BIO) -> BIO_callback_fn;
}
extern "C" {
    pub fn BIO_set_callback(b: *mut BIO, callback: BIO_callback_fn);
}
extern "C" {
    pub fn BIO_debug_callback(
        bio: *mut BIO,
        cmd: ::libc::c_int,
        argp: *const ::libc::c_char,
        argi: ::libc::c_int,
        argl: ::libc::c_long,
        ret: ::libc::c_long,
    ) -> ::libc::c_long;
}
pub type BIO_callback_fn_ex = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut BIO,
        oper: ::libc::c_int,
        argp: *const ::libc::c_char,
        len: usize,
        argi: ::libc::c_int,
        argl: ::libc::c_long,
        ret: ::libc::c_int,
        processed: *mut usize,
    ) -> ::libc::c_long,
>;
extern "C" {
    pub fn BIO_get_callback_ex(b: *const BIO) -> BIO_callback_fn_ex;
}
extern "C" {
    pub fn BIO_set_callback_ex(b: *mut BIO, callback: BIO_callback_fn_ex);
}
extern "C" {
    pub fn BIO_debug_callback_ex(
        bio: *mut BIO,
        oper: ::libc::c_int,
        argp: *const ::libc::c_char,
        len: usize,
        argi: ::libc::c_int,
        argl: ::libc::c_long,
        ret: ::libc::c_int,
        processed: *mut usize,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn BIO_get_callback_arg(b: *const BIO) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn BIO_set_callback_arg(b: *mut BIO, arg: *mut ::libc::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bio_method_st {
    _unused: [u8; 0],
}
pub type BIO_METHOD = bio_method_st;
extern "C" {
    pub fn BIO_method_name(b: *const BIO) -> *const ::libc::c_char;
}
extern "C" {
    pub fn BIO_method_type(b: *const BIO) -> ::libc::c_int;
}
pub type BIO_info_cb = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut BIO, arg2: ::libc::c_int, arg3: ::libc::c_int) -> ::libc::c_int,
>;
pub type bio_info_cb = BIO_info_cb;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_BIO {
    _unused: [u8; 0],
}
pub type sk_BIO_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const BIO, b: *const *const BIO) -> ::libc::c_int,
>;
pub type sk_BIO_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut BIO)>;
pub type sk_BIO_copyfunc = ::std::option::Option<unsafe extern "C" fn(a: *const BIO) -> *mut BIO>;
pub type asn1_ps_func = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut BIO,
        pbuf: *mut *mut ::libc::c_uchar,
        plen: *mut ::libc::c_int,
        parg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type BIO_dgram_sctp_notification_handler_fn = ::std::option::Option<
    unsafe extern "C" fn(b: *mut BIO, context: *mut ::libc::c_void, buf: *mut ::libc::c_void),
>;
extern "C" {
    pub fn BIO_ctrl_pending(b: *mut BIO) -> usize;
}
extern "C" {
    pub fn BIO_ctrl_wpending(b: *mut BIO) -> usize;
}
extern "C" {
    pub fn BIO_ctrl_get_write_guarantee(b: *mut BIO) -> usize;
}
extern "C" {
    pub fn BIO_ctrl_get_read_request(b: *mut BIO) -> usize;
}
extern "C" {
    pub fn BIO_ctrl_reset_read_request(b: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_set_ex_data(
        bio: *mut BIO,
        idx: ::libc::c_int,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_get_ex_data(bio: *const BIO, idx: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn BIO_number_read(bio: *mut BIO) -> u64;
}
extern "C" {
    pub fn BIO_number_written(bio: *mut BIO) -> u64;
}
extern "C" {
    pub fn BIO_asn1_set_prefix(
        b: *mut BIO,
        prefix: asn1_ps_func,
        prefix_free: asn1_ps_func,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_asn1_get_prefix(
        b: *mut BIO,
        pprefix: *mut asn1_ps_func,
        pprefix_free: *mut asn1_ps_func,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_asn1_set_suffix(
        b: *mut BIO,
        suffix: asn1_ps_func,
        suffix_free: asn1_ps_func,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_asn1_get_suffix(
        b: *mut BIO,
        psuffix: *mut asn1_ps_func,
        psuffix_free: *mut asn1_ps_func,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_s_file() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_new_file(filename: *const ::libc::c_char, mode: *const ::libc::c_char) -> *mut BIO;
}
extern "C" {
    pub fn BIO_new_from_core_bio(
        libctx: *mut OSSL_LIB_CTX,
        corebio: *mut OSSL_CORE_BIO,
    ) -> *mut BIO;
}
extern "C" {
    pub fn BIO_new_fp(stream: *mut FILE, close_flag: ::libc::c_int) -> *mut BIO;
}
extern "C" {
    pub fn BIO_new_ex(libctx: *mut OSSL_LIB_CTX, method: *const BIO_METHOD) -> *mut BIO;
}
extern "C" {
    pub fn BIO_new(type_: *const BIO_METHOD) -> *mut BIO;
}
extern "C" {
    pub fn BIO_free(a: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_set_data(a: *mut BIO, ptr: *mut ::libc::c_void);
}
extern "C" {
    pub fn BIO_get_data(a: *mut BIO) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn BIO_set_init(a: *mut BIO, init: ::libc::c_int);
}
extern "C" {
    pub fn BIO_get_init(a: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_set_shutdown(a: *mut BIO, shut: ::libc::c_int);
}
extern "C" {
    pub fn BIO_get_shutdown(a: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_vfree(a: *mut BIO);
}
extern "C" {
    pub fn BIO_up_ref(a: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_read(b: *mut BIO, data: *mut ::libc::c_void, dlen: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_read_ex(
        b: *mut BIO,
        data: *mut ::libc::c_void,
        dlen: usize,
        readbytes: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_gets(bp: *mut BIO, buf: *mut ::libc::c_char, size: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_get_line(
        bio: *mut BIO,
        buf: *mut ::libc::c_char,
        size: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_write(
        b: *mut BIO,
        data: *const ::libc::c_void,
        dlen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_write_ex(
        b: *mut BIO,
        data: *const ::libc::c_void,
        dlen: usize,
        written: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_puts(bp: *mut BIO, buf: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_indent(b: *mut BIO, indent: ::libc::c_int, max: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_ctrl(
        bp: *mut BIO,
        cmd: ::libc::c_int,
        larg: ::libc::c_long,
        parg: *mut ::libc::c_void,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn BIO_callback_ctrl(b: *mut BIO, cmd: ::libc::c_int, fp: BIO_info_cb) -> ::libc::c_long;
}
extern "C" {
    pub fn BIO_ptr_ctrl(
        bp: *mut BIO,
        cmd: ::libc::c_int,
        larg: ::libc::c_long,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn BIO_int_ctrl(
        bp: *mut BIO,
        cmd: ::libc::c_int,
        larg: ::libc::c_long,
        iarg: ::libc::c_int,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn BIO_push(b: *mut BIO, append: *mut BIO) -> *mut BIO;
}
extern "C" {
    pub fn BIO_pop(b: *mut BIO) -> *mut BIO;
}
extern "C" {
    pub fn BIO_free_all(a: *mut BIO);
}
extern "C" {
    pub fn BIO_find_type(b: *mut BIO, bio_type: ::libc::c_int) -> *mut BIO;
}
extern "C" {
    pub fn BIO_next(b: *mut BIO) -> *mut BIO;
}
extern "C" {
    pub fn BIO_set_next(b: *mut BIO, next: *mut BIO);
}
extern "C" {
    pub fn BIO_get_retry_BIO(bio: *mut BIO, reason: *mut ::libc::c_int) -> *mut BIO;
}
extern "C" {
    pub fn BIO_get_retry_reason(bio: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_set_retry_reason(bio: *mut BIO, reason: ::libc::c_int);
}
extern "C" {
    pub fn BIO_dup_chain(in_: *mut BIO) -> *mut BIO;
}
extern "C" {
    pub fn BIO_nread0(bio: *mut BIO, buf: *mut *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_nread(
        bio: *mut BIO,
        buf: *mut *mut ::libc::c_char,
        num: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_nwrite0(bio: *mut BIO, buf: *mut *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_nwrite(
        bio: *mut BIO,
        buf: *mut *mut ::libc::c_char,
        num: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_s_mem() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_s_secmem() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_new_mem_buf(buf: *const ::libc::c_void, len: ::libc::c_int) -> *mut BIO;
}
extern "C" {
    pub fn BIO_s_socket() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_s_connect() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_s_accept() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_s_fd() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_s_log() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_s_bio() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_s_null() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_f_null() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_f_buffer() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_f_readbuffer() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_f_linebuffer() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_f_nbio_test() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_f_prefix() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_s_core() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_s_datagram() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_dgram_non_fatal_error(error: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_new_dgram(fd: ::libc::c_int, close_flag: ::libc::c_int) -> *mut BIO;
}
extern "C" {
    pub fn BIO_sock_should_retry(i: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_sock_non_fatal_error(error: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_socket_wait(
        fd: ::libc::c_int,
        for_read: ::libc::c_int,
        max_time: time_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_wait(
        bio: *mut BIO,
        max_time: time_t,
        nap_milliseconds: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_do_connect_retry(
        bio: *mut BIO,
        timeout: ::libc::c_int,
        nap_milliseconds: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_fd_should_retry(i: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_fd_non_fatal_error(error: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_dump_cb(
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                data: *const ::libc::c_void,
                len: usize,
                u: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
        u: *mut ::libc::c_void,
        s: *const ::libc::c_void,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_dump_indent_cb(
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                data: *const ::libc::c_void,
                len: usize,
                u: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
        u: *mut ::libc::c_void,
        s: *const ::libc::c_void,
        len: ::libc::c_int,
        indent: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_dump(b: *mut BIO, bytes: *const ::libc::c_void, len: ::libc::c_int)
        -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_dump_indent(
        b: *mut BIO,
        bytes: *const ::libc::c_void,
        len: ::libc::c_int,
        indent: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_dump_fp(
        fp: *mut FILE,
        s: *const ::libc::c_void,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_dump_indent_fp(
        fp: *mut FILE,
        s: *const ::libc::c_void,
        len: ::libc::c_int,
        indent: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_hex_string(
        out: *mut BIO,
        indent: ::libc::c_int,
        width: ::libc::c_int,
        data: *const ::libc::c_void,
        datalen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_ADDR_new() -> *mut BIO_ADDR;
}
extern "C" {
    pub fn BIO_ADDR_rawmake(
        ap: *mut BIO_ADDR,
        family: ::libc::c_int,
        where_: *const ::libc::c_void,
        wherelen: usize,
        port: ::libc::c_ushort,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_ADDR_free(arg1: *mut BIO_ADDR);
}
extern "C" {
    pub fn BIO_ADDR_clear(ap: *mut BIO_ADDR);
}
extern "C" {
    pub fn BIO_ADDR_family(ap: *const BIO_ADDR) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_ADDR_rawaddress(
        ap: *const BIO_ADDR,
        p: *mut ::libc::c_void,
        l: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_ADDR_rawport(ap: *const BIO_ADDR) -> ::libc::c_ushort;
}
extern "C" {
    pub fn BIO_ADDR_hostname_string(
        ap: *const BIO_ADDR,
        numeric: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn BIO_ADDR_service_string(
        ap: *const BIO_ADDR,
        numeric: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn BIO_ADDR_path_string(ap: *const BIO_ADDR) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn BIO_ADDRINFO_next(bai: *const BIO_ADDRINFO) -> *const BIO_ADDRINFO;
}
extern "C" {
    pub fn BIO_ADDRINFO_family(bai: *const BIO_ADDRINFO) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_ADDRINFO_socktype(bai: *const BIO_ADDRINFO) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_ADDRINFO_protocol(bai: *const BIO_ADDRINFO) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_ADDRINFO_address(bai: *const BIO_ADDRINFO) -> *const BIO_ADDR;
}
extern "C" {
    pub fn BIO_ADDRINFO_free(bai: *mut BIO_ADDRINFO);
}
pub const BIO_hostserv_priorities_BIO_PARSE_PRIO_HOST: BIO_hostserv_priorities = 0;
pub const BIO_hostserv_priorities_BIO_PARSE_PRIO_SERV: BIO_hostserv_priorities = 1;
pub type BIO_hostserv_priorities = ::libc::c_int;
extern "C" {
    pub fn BIO_parse_hostserv(
        hostserv: *const ::libc::c_char,
        host: *mut *mut ::libc::c_char,
        service: *mut *mut ::libc::c_char,
        hostserv_prio: BIO_hostserv_priorities,
    ) -> ::libc::c_int;
}
pub const BIO_lookup_type_BIO_LOOKUP_CLIENT: BIO_lookup_type = 0;
pub const BIO_lookup_type_BIO_LOOKUP_SERVER: BIO_lookup_type = 1;
pub type BIO_lookup_type = ::libc::c_int;
extern "C" {
    pub fn BIO_lookup(
        host: *const ::libc::c_char,
        service: *const ::libc::c_char,
        lookup_type: BIO_lookup_type,
        family: ::libc::c_int,
        socktype: ::libc::c_int,
        res: *mut *mut BIO_ADDRINFO,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_lookup_ex(
        host: *const ::libc::c_char,
        service: *const ::libc::c_char,
        lookup_type: ::libc::c_int,
        family: ::libc::c_int,
        socktype: ::libc::c_int,
        protocol: ::libc::c_int,
        res: *mut *mut BIO_ADDRINFO,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_sock_error(sock: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_socket_ioctl(
        fd: ::libc::c_int,
        type_: ::libc::c_long,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_socket_nbio(fd: ::libc::c_int, mode: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_sock_init() -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_set_tcp_ndelay(sock: ::libc::c_int, turn_on: ::libc::c_int) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn BIO_gethostbyname(name: *const ::libc::c_char) -> *mut hostent;
}
extern "C" {
    pub fn BIO_get_port(
        str_: *const ::libc::c_char,
        port_ptr: *mut ::libc::c_ushort,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_get_host_ip(str_: *const ::libc::c_char, ip: *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_get_accept_socket(
        host_port: *mut ::libc::c_char,
        mode: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_accept(sock: ::libc::c_int, ip_port: *mut *mut ::libc::c_char) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union BIO_sock_info_u {
    pub addr: *mut BIO_ADDR,
}
pub const BIO_sock_info_type_BIO_SOCK_INFO_ADDRESS: BIO_sock_info_type = 0;
pub type BIO_sock_info_type = ::libc::c_int;
extern "C" {
    pub fn BIO_sock_info(
        sock: ::libc::c_int,
        type_: BIO_sock_info_type,
        info: *mut BIO_sock_info_u,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_socket(
        domain: ::libc::c_int,
        socktype: ::libc::c_int,
        protocol: ::libc::c_int,
        options: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_connect(
        sock: ::libc::c_int,
        addr: *const BIO_ADDR,
        options: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_bind(
        sock: ::libc::c_int,
        addr: *const BIO_ADDR,
        options: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_listen(
        sock: ::libc::c_int,
        addr: *const BIO_ADDR,
        options: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_accept_ex(
        accept_sock: ::libc::c_int,
        addr: *mut BIO_ADDR,
        options: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_closesocket(sock: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_new_socket(sock: ::libc::c_int, close_flag: ::libc::c_int) -> *mut BIO;
}
extern "C" {
    pub fn BIO_new_connect(host_port: *const ::libc::c_char) -> *mut BIO;
}
extern "C" {
    pub fn BIO_new_accept(host_port: *const ::libc::c_char) -> *mut BIO;
}
extern "C" {
    pub fn BIO_new_fd(fd: ::libc::c_int, close_flag: ::libc::c_int) -> *mut BIO;
}
extern "C" {
    pub fn BIO_new_bio_pair(
        bio1: *mut *mut BIO,
        writebuf1: usize,
        bio2: *mut *mut BIO,
        writebuf2: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_copy_next_retry(b: *mut BIO);
}
extern "C" {
    pub fn BIO_printf(bio: *mut BIO, format: *const ::libc::c_char, ...) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_vprintf(
        bio: *mut BIO,
        format: *const ::libc::c_char,
        args: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_snprintf(
        buf: *mut ::libc::c_char,
        n: usize,
        format: *const ::libc::c_char,
        ...
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_vsnprintf(
        buf: *mut ::libc::c_char,
        n: usize,
        format: *const ::libc::c_char,
        args: va_list,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_meth_new(type_: ::libc::c_int, name: *const ::libc::c_char) -> *mut BIO_METHOD;
}
extern "C" {
    pub fn BIO_meth_free(biom: *mut BIO_METHOD);
}
extern "C" {
    pub fn BIO_meth_get_write(
        biom: *const BIO_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            biom: *mut BIO,
            arg1: *const ::libc::c_char,
            arg2: ::libc::c_int,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn BIO_meth_get_write_ex(
        biom: *const BIO_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            biom: *mut BIO,
            arg1: *const ::libc::c_char,
            arg2: usize,
            arg3: *mut usize,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn BIO_meth_set_write(
        biom: *mut BIO_METHOD,
        write: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: *const ::libc::c_char,
                arg3: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_meth_set_write_ex(
        biom: *mut BIO_METHOD,
        bwrite: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: *const ::libc::c_char,
                arg3: usize,
                arg4: *mut usize,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_meth_get_read(
        biom: *const BIO_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            biom: *mut BIO,
            arg1: *mut ::libc::c_char,
            arg2: ::libc::c_int,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn BIO_meth_get_read_ex(
        biom: *const BIO_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            biom: *mut BIO,
            arg1: *mut ::libc::c_char,
            arg2: usize,
            arg3: *mut usize,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn BIO_meth_set_read(
        biom: *mut BIO_METHOD,
        read: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: *mut ::libc::c_char,
                arg3: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_meth_set_read_ex(
        biom: *mut BIO_METHOD,
        bread: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: *mut ::libc::c_char,
                arg3: usize,
                arg4: *mut usize,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_meth_get_puts(
        biom: *const BIO_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(biom: *mut BIO, arg1: *const ::libc::c_char) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn BIO_meth_set_puts(
        biom: *mut BIO_METHOD,
        puts: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut BIO, arg2: *const ::libc::c_char) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_meth_get_gets(
        biom: *const BIO_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            biom: *mut BIO,
            arg1: *mut ::libc::c_char,
            arg2: ::libc::c_int,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn BIO_meth_set_gets(
        biom: *mut BIO_METHOD,
        gets: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: *mut ::libc::c_char,
                arg3: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_meth_get_ctrl(
        biom: *const BIO_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            biom: *mut BIO,
            arg1: ::libc::c_int,
            arg2: ::libc::c_long,
            arg3: *mut ::libc::c_void,
        ) -> ::libc::c_long,
    >;
}
extern "C" {
    pub fn BIO_meth_set_ctrl(
        biom: *mut BIO_METHOD,
        ctrl: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: ::libc::c_int,
                arg3: ::libc::c_long,
                arg4: *mut ::libc::c_void,
            ) -> ::libc::c_long,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_meth_get_create(
        bion: *const BIO_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(bion: *mut BIO) -> ::libc::c_int>;
}
extern "C" {
    pub fn BIO_meth_set_create(
        biom: *mut BIO_METHOD,
        create: ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_meth_get_destroy(
        biom: *const BIO_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(biom: *mut BIO) -> ::libc::c_int>;
}
extern "C" {
    pub fn BIO_meth_set_destroy(
        biom: *mut BIO_METHOD,
        destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn BIO_meth_get_callback_ctrl(
        biom: *const BIO_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            biom: *mut BIO,
            arg1: ::libc::c_int,
            arg2: BIO_info_cb,
        ) -> ::libc::c_long,
    >;
}
extern "C" {
    pub fn BIO_meth_set_callback_ctrl(
        biom: *mut BIO_METHOD,
        callback_ctrl: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: ::libc::c_int,
                arg3: BIO_info_cb,
            ) -> ::libc::c_long,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_locate(p: *mut OSSL_PARAM, key: *const ::libc::c_char) -> *mut OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_locate_const(
        p: *const OSSL_PARAM,
        key: *const ::libc::c_char,
    ) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_int(
        key: *const ::libc::c_char,
        buf: *mut ::libc::c_int,
    ) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_uint(
        key: *const ::libc::c_char,
        buf: *mut ::libc::c_uint,
    ) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_long(
        key: *const ::libc::c_char,
        buf: *mut ::libc::c_long,
    ) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_ulong(
        key: *const ::libc::c_char,
        buf: *mut ::libc::c_ulong,
    ) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_int32(key: *const ::libc::c_char, buf: *mut i32) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_uint32(key: *const ::libc::c_char, buf: *mut u32) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_int64(key: *const ::libc::c_char, buf: *mut i64) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_uint64(key: *const ::libc::c_char, buf: *mut u64) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_size_t(key: *const ::libc::c_char, buf: *mut usize) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_time_t(key: *const ::libc::c_char, buf: *mut time_t) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_BN(
        key: *const ::libc::c_char,
        buf: *mut ::libc::c_uchar,
        bsize: usize,
    ) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_double(key: *const ::libc::c_char, buf: *mut f64) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_utf8_string(
        key: *const ::libc::c_char,
        buf: *mut ::libc::c_char,
        bsize: usize,
    ) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_utf8_ptr(
        key: *const ::libc::c_char,
        buf: *mut *mut ::libc::c_char,
        bsize: usize,
    ) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_octet_string(
        key: *const ::libc::c_char,
        buf: *mut ::libc::c_void,
        bsize: usize,
    ) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_octet_ptr(
        key: *const ::libc::c_char,
        buf: *mut *mut ::libc::c_void,
        bsize: usize,
    ) -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_construct_end() -> OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_allocate_from_text(
        to: *mut OSSL_PARAM,
        paramdefs: *const OSSL_PARAM,
        key: *const ::libc::c_char,
        value: *const ::libc::c_char,
        value_n: usize,
        found: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_int(p: *const OSSL_PARAM, val: *mut ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_uint(p: *const OSSL_PARAM, val: *mut ::libc::c_uint) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_long(p: *const OSSL_PARAM, val: *mut ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_ulong(p: *const OSSL_PARAM, val: *mut ::libc::c_ulong) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_int32(p: *const OSSL_PARAM, val: *mut i32) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_uint32(p: *const OSSL_PARAM, val: *mut u32) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_int64(p: *const OSSL_PARAM, val: *mut i64) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_uint64(p: *const OSSL_PARAM, val: *mut u64) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_size_t(p: *const OSSL_PARAM, val: *mut usize) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_time_t(p: *const OSSL_PARAM, val: *mut time_t) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_int(p: *mut OSSL_PARAM, val: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_uint(p: *mut OSSL_PARAM, val: ::libc::c_uint) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_long(p: *mut OSSL_PARAM, val: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_ulong(p: *mut OSSL_PARAM, val: ::libc::c_ulong) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_int32(p: *mut OSSL_PARAM, val: i32) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_uint32(p: *mut OSSL_PARAM, val: u32) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_int64(p: *mut OSSL_PARAM, val: i64) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_uint64(p: *mut OSSL_PARAM, val: u64) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_size_t(p: *mut OSSL_PARAM, val: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_time_t(p: *mut OSSL_PARAM, val: time_t) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_double(p: *const OSSL_PARAM, val: *mut f64) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_double(p: *mut OSSL_PARAM, val: f64) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_BN(p: *const OSSL_PARAM, val: *mut *mut BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_BN(p: *mut OSSL_PARAM, val: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_utf8_string(
        p: *const OSSL_PARAM,
        val: *mut *mut ::libc::c_char,
        max_len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_utf8_string(
        p: *mut OSSL_PARAM,
        val: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_octet_string(
        p: *const OSSL_PARAM,
        val: *mut *mut ::libc::c_void,
        max_len: usize,
        used_len: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_octet_string(
        p: *mut OSSL_PARAM,
        val: *const ::libc::c_void,
        len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_utf8_ptr(
        p: *const OSSL_PARAM,
        val: *mut *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_utf8_ptr(p: *mut OSSL_PARAM, val: *const ::libc::c_char)
        -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_octet_ptr(
        p: *const OSSL_PARAM,
        val: *mut *const ::libc::c_void,
        used_len: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_octet_ptr(
        p: *mut OSSL_PARAM,
        val: *const ::libc::c_void,
        used_len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_utf8_string_ptr(
        p: *const OSSL_PARAM,
        val: *mut *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_get_octet_string_ptr(
        p: *const OSSL_PARAM,
        val: *mut *const ::libc::c_void,
        used_len: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_modified(p: *const OSSL_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_PARAM_set_all_unmodified(p: *mut OSSL_PARAM);
}
extern "C" {
    pub fn OSSL_PARAM_dup(p: *const OSSL_PARAM) -> *mut OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_merge(p1: *const OSSL_PARAM, p2: *const OSSL_PARAM) -> *mut OSSL_PARAM;
}
extern "C" {
    pub fn OSSL_PARAM_free(p: *mut OSSL_PARAM);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_ALGOR {
    _unused: [u8; 0],
}
pub type sk_X509_ALGOR_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const X509_ALGOR, b: *const *const X509_ALGOR) -> ::libc::c_int,
>;
pub type sk_X509_ALGOR_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut X509_ALGOR)>;
pub type sk_X509_ALGOR_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_ALGOR) -> *mut X509_ALGOR>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_string_st {
    pub length: ::libc::c_int,
    pub type_: ::libc::c_int,
    pub data: *mut ::libc::c_uchar,
    pub flags: ::libc::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_ENCODING_st {
    pub enc: *mut ::libc::c_uchar,
    pub len: ::libc::c_long,
    pub modified: ::libc::c_int,
}
pub type ASN1_ENCODING = ASN1_ENCODING_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_string_table_st {
    pub nid: ::libc::c_int,
    pub minsize: ::libc::c_long,
    pub maxsize: ::libc::c_long,
    pub mask: ::libc::c_ulong,
    pub flags: ::libc::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_STRING_TABLE {
    _unused: [u8; 0],
}
pub type sk_ASN1_STRING_TABLE_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const ASN1_STRING_TABLE,
        b: *const *const ASN1_STRING_TABLE,
    ) -> ::libc::c_int,
>;
pub type sk_ASN1_STRING_TABLE_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut ASN1_STRING_TABLE)>;
pub type sk_ASN1_STRING_TABLE_copyfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const ASN1_STRING_TABLE) -> *mut ASN1_STRING_TABLE,
>;
pub type ASN1_TEMPLATE = ASN1_TEMPLATE_st;
pub type ASN1_TLC = ASN1_TLC_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_VALUE_st {
    _unused: [u8; 0],
}
pub type ASN1_VALUE = ASN1_VALUE_st;
pub type d2i_of_void = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut *mut ::libc::c_void,
        arg2: *mut *const ::libc::c_uchar,
        arg3: ::libc::c_long,
    ) -> *mut ::libc::c_void,
>;
pub type i2d_of_void = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::libc::c_void,
        arg2: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int,
>;
pub type ASN1_ITEM_EXP = ::std::option::Option<unsafe extern "C" fn() -> *const ASN1_ITEM>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct asn1_type_st {
    pub type_: ::libc::c_int,
    pub value: asn1_type_st__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union asn1_type_st__bindgen_ty_1 {
    pub ptr: *mut ::libc::c_char,
    pub boolean: ASN1_BOOLEAN,
    pub asn1_string: *mut ASN1_STRING,
    pub object: *mut ASN1_OBJECT,
    pub integer: *mut ASN1_INTEGER,
    pub enumerated: *mut ASN1_ENUMERATED,
    pub bit_string: *mut ASN1_BIT_STRING,
    pub octet_string: *mut ASN1_OCTET_STRING,
    pub printablestring: *mut ASN1_PRINTABLESTRING,
    pub t61string: *mut ASN1_T61STRING,
    pub ia5string: *mut ASN1_IA5STRING,
    pub generalstring: *mut ASN1_GENERALSTRING,
    pub bmpstring: *mut ASN1_BMPSTRING,
    pub universalstring: *mut ASN1_UNIVERSALSTRING,
    pub utctime: *mut ASN1_UTCTIME,
    pub generalizedtime: *mut ASN1_GENERALIZEDTIME,
    pub visiblestring: *mut ASN1_VISIBLESTRING,
    pub utf8string: *mut ASN1_UTF8STRING,
    pub set: *mut ASN1_STRING,
    pub sequence: *mut ASN1_STRING,
    pub asn1_value: *mut ASN1_VALUE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_TYPE {
    _unused: [u8; 0],
}
pub type sk_ASN1_TYPE_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const ASN1_TYPE, b: *const *const ASN1_TYPE) -> ::libc::c_int,
>;
pub type sk_ASN1_TYPE_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut ASN1_TYPE)>;
pub type sk_ASN1_TYPE_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const ASN1_TYPE) -> *mut ASN1_TYPE>;
pub type ASN1_SEQUENCE_ANY = stack_st_ASN1_TYPE;
extern "C" {
    pub fn d2i_ASN1_SEQUENCE_ANY(
        a: *mut *mut ASN1_SEQUENCE_ANY,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_SEQUENCE_ANY;
}
extern "C" {
    pub fn i2d_ASN1_SEQUENCE_ANY(
        a: *const ASN1_SEQUENCE_ANY,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_SEQUENCE_ANY_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn d2i_ASN1_SET_ANY(
        a: *mut *mut ASN1_SEQUENCE_ANY,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_SEQUENCE_ANY;
}
extern "C" {
    pub fn i2d_ASN1_SET_ANY(
        a: *const ASN1_SEQUENCE_ANY,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_SET_ANY_it() -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BIT_STRING_BITNAME_st {
    pub bitnum: ::libc::c_int,
    pub lname: *const ::libc::c_char,
    pub sname: *const ::libc::c_char,
}
pub type BIT_STRING_BITNAME = BIT_STRING_BITNAME_st;
extern "C" {
    pub fn ASN1_TYPE_new() -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn ASN1_TYPE_free(a: *mut ASN1_TYPE);
}
extern "C" {
    pub fn d2i_ASN1_TYPE(
        a: *mut *mut ASN1_TYPE,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn i2d_ASN1_TYPE(a: *const ASN1_TYPE, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_ANY_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_TYPE_get(a: *const ASN1_TYPE) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TYPE_set(a: *mut ASN1_TYPE, type_: ::libc::c_int, value: *mut ::libc::c_void);
}
extern "C" {
    pub fn ASN1_TYPE_set1(
        a: *mut ASN1_TYPE,
        type_: ::libc::c_int,
        value: *const ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TYPE_cmp(a: *const ASN1_TYPE, b: *const ASN1_TYPE) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TYPE_pack_sequence(
        it: *const ASN1_ITEM,
        s: *mut ::libc::c_void,
        t: *mut *mut ASN1_TYPE,
    ) -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn ASN1_TYPE_unpack_sequence(
        it: *const ASN1_ITEM,
        t: *const ASN1_TYPE,
    ) -> *mut ::libc::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_OBJECT {
    _unused: [u8; 0],
}
pub type sk_ASN1_OBJECT_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const ASN1_OBJECT,
        b: *const *const ASN1_OBJECT,
    ) -> ::libc::c_int,
>;
pub type sk_ASN1_OBJECT_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut ASN1_OBJECT)>;
pub type sk_ASN1_OBJECT_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const ASN1_OBJECT) -> *mut ASN1_OBJECT>;
extern "C" {
    pub fn ASN1_OBJECT_new() -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn ASN1_OBJECT_free(a: *mut ASN1_OBJECT);
}
extern "C" {
    pub fn d2i_ASN1_OBJECT(
        a: *mut *mut ASN1_OBJECT,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn i2d_ASN1_OBJECT(a: *const ASN1_OBJECT, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_OBJECT_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_STRING_new() -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_STRING_free(a: *mut ASN1_STRING);
}
extern "C" {
    pub fn ASN1_STRING_clear_free(a: *mut ASN1_STRING);
}
extern "C" {
    pub fn ASN1_STRING_copy(dst: *mut ASN1_STRING, str_: *const ASN1_STRING) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_dup(a: *const ASN1_STRING) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_STRING_type_new(type_: ::libc::c_int) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_STRING_cmp(a: *const ASN1_STRING, b: *const ASN1_STRING) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_set(
        str_: *mut ASN1_STRING,
        data: *const ::libc::c_void,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_set0(str_: *mut ASN1_STRING, data: *mut ::libc::c_void, len: ::libc::c_int);
}
extern "C" {
    pub fn ASN1_STRING_length(x: *const ASN1_STRING) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_length_set(x: *mut ASN1_STRING, n: ::libc::c_int);
}
extern "C" {
    pub fn ASN1_STRING_type(x: *const ASN1_STRING) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_data(x: *mut ASN1_STRING) -> *mut ::libc::c_uchar;
}
extern "C" {
    pub fn ASN1_STRING_get0_data(x: *const ASN1_STRING) -> *const ::libc::c_uchar;
}
extern "C" {
    pub fn ASN1_BIT_STRING_new() -> *mut ASN1_BIT_STRING;
}
extern "C" {
    pub fn ASN1_BIT_STRING_free(a: *mut ASN1_BIT_STRING);
}
extern "C" {
    pub fn d2i_ASN1_BIT_STRING(
        a: *mut *mut ASN1_BIT_STRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_BIT_STRING;
}
extern "C" {
    pub fn i2d_ASN1_BIT_STRING(
        a: *const ASN1_BIT_STRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_BIT_STRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_BIT_STRING_set(
        a: *mut ASN1_BIT_STRING,
        d: *mut ::libc::c_uchar,
        length: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_BIT_STRING_set_bit(
        a: *mut ASN1_BIT_STRING,
        n: ::libc::c_int,
        value: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_BIT_STRING_get_bit(a: *const ASN1_BIT_STRING, n: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_BIT_STRING_check(
        a: *const ASN1_BIT_STRING,
        flags: *const ::libc::c_uchar,
        flags_len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_BIT_STRING_name_print(
        out: *mut BIO,
        bs: *mut ASN1_BIT_STRING,
        tbl: *mut BIT_STRING_BITNAME,
        indent: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_BIT_STRING_num_asc(
        name: *const ::libc::c_char,
        tbl: *mut BIT_STRING_BITNAME,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_BIT_STRING_set_asc(
        bs: *mut ASN1_BIT_STRING,
        name: *const ::libc::c_char,
        value: ::libc::c_int,
        tbl: *mut BIT_STRING_BITNAME,
    ) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_INTEGER {
    _unused: [u8; 0],
}
pub type sk_ASN1_INTEGER_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const ASN1_INTEGER,
        b: *const *const ASN1_INTEGER,
    ) -> ::libc::c_int,
>;
pub type sk_ASN1_INTEGER_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut ASN1_INTEGER)>;
pub type sk_ASN1_INTEGER_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const ASN1_INTEGER) -> *mut ASN1_INTEGER>;
extern "C" {
    pub fn ASN1_INTEGER_new() -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn ASN1_INTEGER_free(a: *mut ASN1_INTEGER);
}
extern "C" {
    pub fn d2i_ASN1_INTEGER(
        a: *mut *mut ASN1_INTEGER,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn i2d_ASN1_INTEGER(
        a: *const ASN1_INTEGER,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_INTEGER_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn d2i_ASN1_UINTEGER(
        a: *mut *mut ASN1_INTEGER,
        pp: *mut *const ::libc::c_uchar,
        length: ::libc::c_long,
    ) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn ASN1_INTEGER_dup(a: *const ASN1_INTEGER) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn ASN1_INTEGER_cmp(x: *const ASN1_INTEGER, y: *const ASN1_INTEGER) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_ENUMERATED_new() -> *mut ASN1_ENUMERATED;
}
extern "C" {
    pub fn ASN1_ENUMERATED_free(a: *mut ASN1_ENUMERATED);
}
extern "C" {
    pub fn d2i_ASN1_ENUMERATED(
        a: *mut *mut ASN1_ENUMERATED,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_ENUMERATED;
}
extern "C" {
    pub fn i2d_ASN1_ENUMERATED(
        a: *const ASN1_ENUMERATED,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_ENUMERATED_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_UTCTIME_check(a: *const ASN1_UTCTIME) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_UTCTIME_set(s: *mut ASN1_UTCTIME, t: time_t) -> *mut ASN1_UTCTIME;
}
extern "C" {
    pub fn ASN1_UTCTIME_adj(
        s: *mut ASN1_UTCTIME,
        t: time_t,
        offset_day: ::libc::c_int,
        offset_sec: ::libc::c_long,
    ) -> *mut ASN1_UTCTIME;
}
extern "C" {
    pub fn ASN1_UTCTIME_set_string(
        s: *mut ASN1_UTCTIME,
        str_: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_UTCTIME_cmp_time_t(s: *const ASN1_UTCTIME, t: time_t) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_check(a: *const ASN1_GENERALIZEDTIME) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_set(
        s: *mut ASN1_GENERALIZEDTIME,
        t: time_t,
    ) -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_adj(
        s: *mut ASN1_GENERALIZEDTIME,
        t: time_t,
        offset_day: ::libc::c_int,
        offset_sec: ::libc::c_long,
    ) -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_set_string(
        s: *mut ASN1_GENERALIZEDTIME,
        str_: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TIME_diff(
        pday: *mut ::libc::c_int,
        psec: *mut ::libc::c_int,
        from: *const ASN1_TIME,
        to: *const ASN1_TIME,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_new() -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_free(a: *mut ASN1_OCTET_STRING);
}
extern "C" {
    pub fn d2i_ASN1_OCTET_STRING(
        a: *mut *mut ASN1_OCTET_STRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn i2d_ASN1_OCTET_STRING(
        a: *const ASN1_OCTET_STRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_dup(a: *const ASN1_OCTET_STRING) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_cmp(
        a: *const ASN1_OCTET_STRING,
        b: *const ASN1_OCTET_STRING,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_set(
        str_: *mut ASN1_OCTET_STRING,
        data: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_UTF8STRING {
    _unused: [u8; 0],
}
pub type sk_ASN1_UTF8STRING_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const ASN1_UTF8STRING,
        b: *const *const ASN1_UTF8STRING,
    ) -> ::libc::c_int,
>;
pub type sk_ASN1_UTF8STRING_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut ASN1_UTF8STRING)>;
pub type sk_ASN1_UTF8STRING_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const ASN1_UTF8STRING) -> *mut ASN1_UTF8STRING>;
extern "C" {
    pub fn ASN1_VISIBLESTRING_new() -> *mut ASN1_VISIBLESTRING;
}
extern "C" {
    pub fn ASN1_VISIBLESTRING_free(a: *mut ASN1_VISIBLESTRING);
}
extern "C" {
    pub fn d2i_ASN1_VISIBLESTRING(
        a: *mut *mut ASN1_VISIBLESTRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_VISIBLESTRING;
}
extern "C" {
    pub fn i2d_ASN1_VISIBLESTRING(
        a: *const ASN1_VISIBLESTRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_VISIBLESTRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_UNIVERSALSTRING_new() -> *mut ASN1_UNIVERSALSTRING;
}
extern "C" {
    pub fn ASN1_UNIVERSALSTRING_free(a: *mut ASN1_UNIVERSALSTRING);
}
extern "C" {
    pub fn d2i_ASN1_UNIVERSALSTRING(
        a: *mut *mut ASN1_UNIVERSALSTRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_UNIVERSALSTRING;
}
extern "C" {
    pub fn i2d_ASN1_UNIVERSALSTRING(
        a: *const ASN1_UNIVERSALSTRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_UNIVERSALSTRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_UTF8STRING_new() -> *mut ASN1_UTF8STRING;
}
extern "C" {
    pub fn ASN1_UTF8STRING_free(a: *mut ASN1_UTF8STRING);
}
extern "C" {
    pub fn d2i_ASN1_UTF8STRING(
        a: *mut *mut ASN1_UTF8STRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_UTF8STRING;
}
extern "C" {
    pub fn i2d_ASN1_UTF8STRING(
        a: *const ASN1_UTF8STRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_UTF8STRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_NULL_new() -> *mut ASN1_NULL;
}
extern "C" {
    pub fn ASN1_NULL_free(a: *mut ASN1_NULL);
}
extern "C" {
    pub fn d2i_ASN1_NULL(
        a: *mut *mut ASN1_NULL,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_NULL;
}
extern "C" {
    pub fn i2d_ASN1_NULL(a: *const ASN1_NULL, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_NULL_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_BMPSTRING_new() -> *mut ASN1_BMPSTRING;
}
extern "C" {
    pub fn ASN1_BMPSTRING_free(a: *mut ASN1_BMPSTRING);
}
extern "C" {
    pub fn d2i_ASN1_BMPSTRING(
        a: *mut *mut ASN1_BMPSTRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_BMPSTRING;
}
extern "C" {
    pub fn i2d_ASN1_BMPSTRING(
        a: *const ASN1_BMPSTRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_BMPSTRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn UTF8_getc(
        str_: *const ::libc::c_uchar,
        len: ::libc::c_int,
        val: *mut ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UTF8_putc(
        str_: *mut ::libc::c_uchar,
        len: ::libc::c_int,
        value: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_GENERALSTRING {
    _unused: [u8; 0],
}
pub type sk_ASN1_GENERALSTRING_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const ASN1_GENERALSTRING,
        b: *const *const ASN1_GENERALSTRING,
    ) -> ::libc::c_int,
>;
pub type sk_ASN1_GENERALSTRING_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut ASN1_GENERALSTRING)>;
pub type sk_ASN1_GENERALSTRING_copyfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const ASN1_GENERALSTRING) -> *mut ASN1_GENERALSTRING,
>;
extern "C" {
    pub fn ASN1_PRINTABLE_new() -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_PRINTABLE_free(a: *mut ASN1_STRING);
}
extern "C" {
    pub fn d2i_ASN1_PRINTABLE(
        a: *mut *mut ASN1_STRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn i2d_ASN1_PRINTABLE(
        a: *const ASN1_STRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_PRINTABLE_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn DIRECTORYSTRING_new() -> *mut ASN1_STRING;
}
extern "C" {
    pub fn DIRECTORYSTRING_free(a: *mut ASN1_STRING);
}
extern "C" {
    pub fn d2i_DIRECTORYSTRING(
        a: *mut *mut ASN1_STRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn i2d_DIRECTORYSTRING(
        a: *const ASN1_STRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DIRECTORYSTRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn DISPLAYTEXT_new() -> *mut ASN1_STRING;
}
extern "C" {
    pub fn DISPLAYTEXT_free(a: *mut ASN1_STRING);
}
extern "C" {
    pub fn d2i_DISPLAYTEXT(
        a: *mut *mut ASN1_STRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn i2d_DISPLAYTEXT(a: *const ASN1_STRING, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn DISPLAYTEXT_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_PRINTABLESTRING_new() -> *mut ASN1_PRINTABLESTRING;
}
extern "C" {
    pub fn ASN1_PRINTABLESTRING_free(a: *mut ASN1_PRINTABLESTRING);
}
extern "C" {
    pub fn d2i_ASN1_PRINTABLESTRING(
        a: *mut *mut ASN1_PRINTABLESTRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_PRINTABLESTRING;
}
extern "C" {
    pub fn i2d_ASN1_PRINTABLESTRING(
        a: *const ASN1_PRINTABLESTRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_PRINTABLESTRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_T61STRING_new() -> *mut ASN1_T61STRING;
}
extern "C" {
    pub fn ASN1_T61STRING_free(a: *mut ASN1_T61STRING);
}
extern "C" {
    pub fn d2i_ASN1_T61STRING(
        a: *mut *mut ASN1_T61STRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_T61STRING;
}
extern "C" {
    pub fn i2d_ASN1_T61STRING(
        a: *const ASN1_T61STRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_T61STRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_IA5STRING_new() -> *mut ASN1_IA5STRING;
}
extern "C" {
    pub fn ASN1_IA5STRING_free(a: *mut ASN1_IA5STRING);
}
extern "C" {
    pub fn d2i_ASN1_IA5STRING(
        a: *mut *mut ASN1_IA5STRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_IA5STRING;
}
extern "C" {
    pub fn i2d_ASN1_IA5STRING(
        a: *const ASN1_IA5STRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_IA5STRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_GENERALSTRING_new() -> *mut ASN1_GENERALSTRING;
}
extern "C" {
    pub fn ASN1_GENERALSTRING_free(a: *mut ASN1_GENERALSTRING);
}
extern "C" {
    pub fn d2i_ASN1_GENERALSTRING(
        a: *mut *mut ASN1_GENERALSTRING,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_GENERALSTRING;
}
extern "C" {
    pub fn i2d_ASN1_GENERALSTRING(
        a: *const ASN1_GENERALSTRING,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_GENERALSTRING_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_UTCTIME_new() -> *mut ASN1_UTCTIME;
}
extern "C" {
    pub fn ASN1_UTCTIME_free(a: *mut ASN1_UTCTIME);
}
extern "C" {
    pub fn d2i_ASN1_UTCTIME(
        a: *mut *mut ASN1_UTCTIME,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_UTCTIME;
}
extern "C" {
    pub fn i2d_ASN1_UTCTIME(
        a: *const ASN1_UTCTIME,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_UTCTIME_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_new() -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_free(a: *mut ASN1_GENERALIZEDTIME);
}
extern "C" {
    pub fn d2i_ASN1_GENERALIZEDTIME(
        a: *mut *mut ASN1_GENERALIZEDTIME,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn i2d_ASN1_GENERALIZEDTIME(
        a: *const ASN1_GENERALIZEDTIME,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_TIME_new() -> *mut ASN1_TIME;
}
extern "C" {
    pub fn ASN1_TIME_free(a: *mut ASN1_TIME);
}
extern "C" {
    pub fn d2i_ASN1_TIME(
        a: *mut *mut ASN1_TIME,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn i2d_ASN1_TIME(a: *const ASN1_TIME, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TIME_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_TIME_dup(a: *const ASN1_TIME) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn ASN1_UTCTIME_dup(a: *const ASN1_UTCTIME) -> *mut ASN1_UTCTIME;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_dup(a: *const ASN1_GENERALIZEDTIME) -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_NDEF_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_TIME_set(s: *mut ASN1_TIME, t: time_t) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn ASN1_TIME_adj(
        s: *mut ASN1_TIME,
        t: time_t,
        offset_day: ::libc::c_int,
        offset_sec: ::libc::c_long,
    ) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn ASN1_TIME_check(t: *const ASN1_TIME) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TIME_to_generalizedtime(
        t: *const ASN1_TIME,
        out: *mut *mut ASN1_GENERALIZEDTIME,
    ) -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn ASN1_TIME_set_string(s: *mut ASN1_TIME, str_: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TIME_set_string_X509(
        s: *mut ASN1_TIME,
        str_: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TIME_to_tm(s: *const ASN1_TIME, tm: *mut tm) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TIME_normalize(s: *mut ASN1_TIME) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TIME_cmp_time_t(s: *const ASN1_TIME, t: time_t) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TIME_compare(a: *const ASN1_TIME, b: *const ASN1_TIME) -> ::libc::c_int;
}
extern "C" {
    pub fn i2a_ASN1_INTEGER(bp: *mut BIO, a: *const ASN1_INTEGER) -> ::libc::c_int;
}
extern "C" {
    pub fn a2i_ASN1_INTEGER(
        bp: *mut BIO,
        bs: *mut ASN1_INTEGER,
        buf: *mut ::libc::c_char,
        size: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2a_ASN1_ENUMERATED(bp: *mut BIO, a: *const ASN1_ENUMERATED) -> ::libc::c_int;
}
extern "C" {
    pub fn a2i_ASN1_ENUMERATED(
        bp: *mut BIO,
        bs: *mut ASN1_ENUMERATED,
        buf: *mut ::libc::c_char,
        size: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2a_ASN1_OBJECT(bp: *mut BIO, a: *const ASN1_OBJECT) -> ::libc::c_int;
}
extern "C" {
    pub fn a2i_ASN1_STRING(
        bp: *mut BIO,
        bs: *mut ASN1_STRING,
        buf: *mut ::libc::c_char,
        size: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2a_ASN1_STRING(
        bp: *mut BIO,
        a: *const ASN1_STRING,
        type_: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2t_ASN1_OBJECT(
        buf: *mut ::libc::c_char,
        buf_len: ::libc::c_int,
        a: *const ASN1_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn a2d_ASN1_OBJECT(
        out: *mut ::libc::c_uchar,
        olen: ::libc::c_int,
        buf: *const ::libc::c_char,
        num: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_OBJECT_create(
        nid: ::libc::c_int,
        data: *mut ::libc::c_uchar,
        len: ::libc::c_int,
        sn: *const ::libc::c_char,
        ln: *const ::libc::c_char,
    ) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn ASN1_INTEGER_get_int64(pr: *mut i64, a: *const ASN1_INTEGER) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_INTEGER_set_int64(a: *mut ASN1_INTEGER, r: i64) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_INTEGER_get_uint64(pr: *mut u64, a: *const ASN1_INTEGER) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_INTEGER_set_uint64(a: *mut ASN1_INTEGER, r: u64) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_INTEGER_set(a: *mut ASN1_INTEGER, v: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_INTEGER_get(a: *const ASN1_INTEGER) -> ::libc::c_long;
}
extern "C" {
    pub fn BN_to_ASN1_INTEGER(bn: *const BIGNUM, ai: *mut ASN1_INTEGER) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn ASN1_INTEGER_to_BN(ai: *const ASN1_INTEGER, bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn ASN1_ENUMERATED_get_int64(pr: *mut i64, a: *const ASN1_ENUMERATED) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_ENUMERATED_set_int64(a: *mut ASN1_ENUMERATED, r: i64) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_ENUMERATED_set(a: *mut ASN1_ENUMERATED, v: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_ENUMERATED_get(a: *const ASN1_ENUMERATED) -> ::libc::c_long;
}
extern "C" {
    pub fn BN_to_ASN1_ENUMERATED(
        bn: *const BIGNUM,
        ai: *mut ASN1_ENUMERATED,
    ) -> *mut ASN1_ENUMERATED;
}
extern "C" {
    pub fn ASN1_ENUMERATED_to_BN(ai: *const ASN1_ENUMERATED, bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn ASN1_PRINTABLE_type(s: *const ::libc::c_uchar, max: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_tag2bit(tag: ::libc::c_int) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ASN1_get_object(
        pp: *mut *const ::libc::c_uchar,
        plength: *mut ::libc::c_long,
        ptag: *mut ::libc::c_int,
        pclass: *mut ::libc::c_int,
        omax: ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_check_infinite_end(
        p: *mut *mut ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_const_check_infinite_end(
        p: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_put_object(
        pp: *mut *mut ::libc::c_uchar,
        constructed: ::libc::c_int,
        length: ::libc::c_int,
        tag: ::libc::c_int,
        xclass: ::libc::c_int,
    );
}
extern "C" {
    pub fn ASN1_put_eoc(pp: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_object_size(
        constructed: ::libc::c_int,
        length: ::libc::c_int,
        tag: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_dup(
        i2d: i2d_of_void,
        d2i: d2i_of_void,
        x: *const ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn ASN1_item_dup(it: *const ASN1_ITEM, x: *const ::libc::c_void) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn ASN1_item_sign_ex(
        it: *const ASN1_ITEM,
        algor1: *mut X509_ALGOR,
        algor2: *mut X509_ALGOR,
        signature: *mut ASN1_BIT_STRING,
        data: *const ::libc::c_void,
        id: *const ASN1_OCTET_STRING,
        pkey: *mut EVP_PKEY,
        md: *const EVP_MD,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_verify_ex(
        it: *const ASN1_ITEM,
        alg: *const X509_ALGOR,
        signature: *const ASN1_BIT_STRING,
        data: *const ::libc::c_void,
        id: *const ASN1_OCTET_STRING,
        pkey: *mut EVP_PKEY,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_d2i_fp(
        xnew: ::std::option::Option<unsafe extern "C" fn() -> *mut ::libc::c_void>,
        d2i: d2i_of_void,
        in_: *mut FILE,
        x: *mut *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn ASN1_item_d2i_fp_ex(
        it: *const ASN1_ITEM,
        in_: *mut FILE,
        x: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn ASN1_item_d2i_fp(
        it: *const ASN1_ITEM,
        in_: *mut FILE,
        x: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn ASN1_i2d_fp(i2d: i2d_of_void, out: *mut FILE, x: *const ::libc::c_void)
        -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_i2d_fp(
        it: *const ASN1_ITEM,
        out: *mut FILE,
        x: *const ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_print_ex_fp(
        fp: *mut FILE,
        str_: *const ASN1_STRING,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_to_UTF8(
        out: *mut *mut ::libc::c_uchar,
        in_: *const ASN1_STRING,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_d2i_bio(
        xnew: ::std::option::Option<unsafe extern "C" fn() -> *mut ::libc::c_void>,
        d2i: d2i_of_void,
        in_: *mut BIO,
        x: *mut *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn ASN1_item_d2i_bio_ex(
        it: *const ASN1_ITEM,
        in_: *mut BIO,
        pval: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn ASN1_item_d2i_bio(
        it: *const ASN1_ITEM,
        in_: *mut BIO,
        pval: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn ASN1_i2d_bio(i2d: i2d_of_void, out: *mut BIO, x: *const ::libc::c_void)
        -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_i2d_bio(
        it: *const ASN1_ITEM,
        out: *mut BIO,
        x: *const ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_i2d_mem_bio(it: *const ASN1_ITEM, val: *const ASN1_VALUE) -> *mut BIO;
}
extern "C" {
    pub fn ASN1_UTCTIME_print(fp: *mut BIO, a: *const ASN1_UTCTIME) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_print(
        fp: *mut BIO,
        a: *const ASN1_GENERALIZEDTIME,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TIME_print(bp: *mut BIO, tm: *const ASN1_TIME) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TIME_print_ex(
        bp: *mut BIO,
        tm: *const ASN1_TIME,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_print(bp: *mut BIO, v: *const ASN1_STRING) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_print_ex(
        out: *mut BIO,
        str_: *const ASN1_STRING,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_buf_print(
        bp: *mut BIO,
        buf: *const ::libc::c_uchar,
        buflen: usize,
        off: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_bn_print(
        bp: *mut BIO,
        number: *const ::libc::c_char,
        num: *const BIGNUM,
        buf: *mut ::libc::c_uchar,
        off: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_parse(
        bp: *mut BIO,
        pp: *const ::libc::c_uchar,
        len: ::libc::c_long,
        indent: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_parse_dump(
        bp: *mut BIO,
        pp: *const ::libc::c_uchar,
        len: ::libc::c_long,
        indent: ::libc::c_int,
        dump: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_tag2str(tag: ::libc::c_int) -> *const ::libc::c_char;
}
extern "C" {
    pub fn ASN1_UNIVERSALSTRING_to_string(s: *mut ASN1_UNIVERSALSTRING) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TYPE_set_octetstring(
        a: *mut ASN1_TYPE,
        data: *mut ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TYPE_get_octetstring(
        a: *const ASN1_TYPE,
        data: *mut ::libc::c_uchar,
        max_len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TYPE_set_int_octetstring(
        a: *mut ASN1_TYPE,
        num: ::libc::c_long,
        data: *mut ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_TYPE_get_int_octetstring(
        a: *const ASN1_TYPE,
        num: *mut ::libc::c_long,
        data: *mut ::libc::c_uchar,
        max_len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_unpack(oct: *const ASN1_STRING, it: *const ASN1_ITEM) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn ASN1_item_pack(
        obj: *mut ::libc::c_void,
        it: *const ASN1_ITEM,
        oct: *mut *mut ASN1_OCTET_STRING,
    ) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_STRING_set_default_mask(mask: ::libc::c_ulong);
}
extern "C" {
    pub fn ASN1_STRING_set_default_mask_asc(p: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_get_default_mask() -> ::libc::c_ulong;
}
extern "C" {
    pub fn ASN1_mbstring_copy(
        out: *mut *mut ASN1_STRING,
        in_: *const ::libc::c_uchar,
        len: ::libc::c_int,
        inform: ::libc::c_int,
        mask: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_mbstring_ncopy(
        out: *mut *mut ASN1_STRING,
        in_: *const ::libc::c_uchar,
        len: ::libc::c_int,
        inform: ::libc::c_int,
        mask: ::libc::c_ulong,
        minsize: ::libc::c_long,
        maxsize: ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_set_by_NID(
        out: *mut *mut ASN1_STRING,
        in_: *const ::libc::c_uchar,
        inlen: ::libc::c_int,
        inform: ::libc::c_int,
        nid: ::libc::c_int,
    ) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_STRING_TABLE_get(nid: ::libc::c_int) -> *mut ASN1_STRING_TABLE;
}
extern "C" {
    pub fn ASN1_STRING_TABLE_add(
        arg1: ::libc::c_int,
        arg2: ::libc::c_long,
        arg3: ::libc::c_long,
        arg4: ::libc::c_ulong,
        arg5: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_STRING_TABLE_cleanup();
}
extern "C" {
    pub fn ASN1_item_new(it: *const ASN1_ITEM) -> *mut ASN1_VALUE;
}
extern "C" {
    pub fn ASN1_item_new_ex(
        it: *const ASN1_ITEM,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut ASN1_VALUE;
}
extern "C" {
    pub fn ASN1_item_free(val: *mut ASN1_VALUE, it: *const ASN1_ITEM);
}
extern "C" {
    pub fn ASN1_item_d2i_ex(
        val: *mut *mut ASN1_VALUE,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
        it: *const ASN1_ITEM,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut ASN1_VALUE;
}
extern "C" {
    pub fn ASN1_item_d2i(
        val: *mut *mut ASN1_VALUE,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
        it: *const ASN1_ITEM,
    ) -> *mut ASN1_VALUE;
}
extern "C" {
    pub fn ASN1_item_i2d(
        val: *const ASN1_VALUE,
        out: *mut *mut ::libc::c_uchar,
        it: *const ASN1_ITEM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_ndef_i2d(
        val: *const ASN1_VALUE,
        out: *mut *mut ::libc::c_uchar,
        it: *const ASN1_ITEM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_add_oid_module();
}
extern "C" {
    pub fn ASN1_add_stable_module();
}
extern "C" {
    pub fn ASN1_generate_nconf(str_: *const ::libc::c_char, nconf: *mut CONF) -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn ASN1_generate_v3(str_: *const ::libc::c_char, cnf: *mut X509V3_CTX) -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn ASN1_str2mask(str_: *const ::libc::c_char, pmask: *mut ::libc::c_ulong)
        -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_print(
        out: *mut BIO,
        ifld: *const ASN1_VALUE,
        indent: ::libc::c_int,
        it: *const ASN1_ITEM,
        pctx: *const ASN1_PCTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_PCTX_new() -> *mut ASN1_PCTX;
}
extern "C" {
    pub fn ASN1_PCTX_free(p: *mut ASN1_PCTX);
}
extern "C" {
    pub fn ASN1_PCTX_get_flags(p: *const ASN1_PCTX) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ASN1_PCTX_set_flags(p: *mut ASN1_PCTX, flags: ::libc::c_ulong);
}
extern "C" {
    pub fn ASN1_PCTX_get_nm_flags(p: *const ASN1_PCTX) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ASN1_PCTX_set_nm_flags(p: *mut ASN1_PCTX, flags: ::libc::c_ulong);
}
extern "C" {
    pub fn ASN1_PCTX_get_cert_flags(p: *const ASN1_PCTX) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ASN1_PCTX_set_cert_flags(p: *mut ASN1_PCTX, flags: ::libc::c_ulong);
}
extern "C" {
    pub fn ASN1_PCTX_get_oid_flags(p: *const ASN1_PCTX) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ASN1_PCTX_set_oid_flags(p: *mut ASN1_PCTX, flags: ::libc::c_ulong);
}
extern "C" {
    pub fn ASN1_PCTX_get_str_flags(p: *const ASN1_PCTX) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ASN1_PCTX_set_str_flags(p: *mut ASN1_PCTX, flags: ::libc::c_ulong);
}
extern "C" {
    pub fn ASN1_SCTX_new(
        scan_cb: ::std::option::Option<unsafe extern "C" fn(ctx: *mut ASN1_SCTX) -> ::libc::c_int>,
    ) -> *mut ASN1_SCTX;
}
extern "C" {
    pub fn ASN1_SCTX_free(p: *mut ASN1_SCTX);
}
extern "C" {
    pub fn ASN1_SCTX_get_item(p: *mut ASN1_SCTX) -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_SCTX_get_template(p: *mut ASN1_SCTX) -> *const ASN1_TEMPLATE;
}
extern "C" {
    pub fn ASN1_SCTX_get_flags(p: *mut ASN1_SCTX) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ASN1_SCTX_set_app_data(p: *mut ASN1_SCTX, data: *mut ::libc::c_void);
}
extern "C" {
    pub fn ASN1_SCTX_get_app_data(p: *mut ASN1_SCTX) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn BIO_f_asn1() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_new_NDEF(out: *mut BIO, val: *mut ASN1_VALUE, it: *const ASN1_ITEM) -> *mut BIO;
}
extern "C" {
    pub fn i2d_ASN1_bio_stream(
        out: *mut BIO,
        val: *mut ASN1_VALUE,
        in_: *mut BIO,
        flags: ::libc::c_int,
        it: *const ASN1_ITEM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_bio_ASN1_stream(
        out: *mut BIO,
        val: *mut ASN1_VALUE,
        in_: *mut BIO,
        flags: ::libc::c_int,
        hdr: *const ::libc::c_char,
        it: *const ASN1_ITEM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn SMIME_write_ASN1(
        bio: *mut BIO,
        val: *mut ASN1_VALUE,
        data: *mut BIO,
        flags: ::libc::c_int,
        ctype_nid: ::libc::c_int,
        econt_nid: ::libc::c_int,
        mdalgs: *mut stack_st_X509_ALGOR,
        it: *const ASN1_ITEM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn SMIME_write_ASN1_ex(
        bio: *mut BIO,
        val: *mut ASN1_VALUE,
        data: *mut BIO,
        flags: ::libc::c_int,
        ctype_nid: ::libc::c_int,
        econt_nid: ::libc::c_int,
        mdalgs: *mut stack_st_X509_ALGOR,
        it: *const ASN1_ITEM,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn SMIME_read_ASN1(
        bio: *mut BIO,
        bcont: *mut *mut BIO,
        it: *const ASN1_ITEM,
    ) -> *mut ASN1_VALUE;
}
extern "C" {
    pub fn SMIME_read_ASN1_ex(
        bio: *mut BIO,
        flags: ::libc::c_int,
        bcont: *mut *mut BIO,
        it: *const ASN1_ITEM,
        x: *mut *mut ASN1_VALUE,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut ASN1_VALUE;
}
extern "C" {
    pub fn SMIME_crlf_copy(in_: *mut BIO, out: *mut BIO, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn SMIME_text(in_: *mut BIO, out: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_ITEM_lookup(name: *const ::libc::c_char) -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_ITEM_get(i: usize) -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obj_name_st {
    pub type_: ::libc::c_int,
    pub alias: ::libc::c_int,
    pub name: *const ::libc::c_char,
    pub data: *const ::libc::c_char,
}
pub type OBJ_NAME = obj_name_st;
extern "C" {
    pub fn OBJ_NAME_init() -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_NAME_new_index(
        hash_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const ::libc::c_char) -> ::libc::c_ulong,
        >,
        cmp_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::libc::c_char,
                arg2: *const ::libc::c_char,
            ) -> ::libc::c_int,
        >,
        free_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::libc::c_char,
                arg2: ::libc::c_int,
                arg3: *const ::libc::c_char,
            ),
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_NAME_get(name: *const ::libc::c_char, type_: ::libc::c_int)
        -> *const ::libc::c_char;
}
extern "C" {
    pub fn OBJ_NAME_add(
        name: *const ::libc::c_char,
        type_: ::libc::c_int,
        data: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_NAME_remove(name: *const ::libc::c_char, type_: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_NAME_cleanup(type_: ::libc::c_int);
}
extern "C" {
    pub fn OBJ_NAME_do_all(
        type_: ::libc::c_int,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const OBJ_NAME, arg: *mut ::libc::c_void),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn OBJ_NAME_do_all_sorted(
        type_: ::libc::c_int,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const OBJ_NAME, arg: *mut ::libc::c_void),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn OBJ_dup(a: *const ASN1_OBJECT) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn OBJ_nid2obj(n: ::libc::c_int) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn OBJ_nid2ln(n: ::libc::c_int) -> *const ::libc::c_char;
}
extern "C" {
    pub fn OBJ_nid2sn(n: ::libc::c_int) -> *const ::libc::c_char;
}
extern "C" {
    pub fn OBJ_obj2nid(o: *const ASN1_OBJECT) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_txt2obj(s: *const ::libc::c_char, no_name: ::libc::c_int) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn OBJ_obj2txt(
        buf: *mut ::libc::c_char,
        buf_len: ::libc::c_int,
        a: *const ASN1_OBJECT,
        no_name: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_txt2nid(s: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_ln2nid(s: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_sn2nid(s: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_cmp(a: *const ASN1_OBJECT, b: *const ASN1_OBJECT) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_bsearch_(
        key: *const ::libc::c_void,
        base: *const ::libc::c_void,
        num: ::libc::c_int,
        size: ::libc::c_int,
        cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::libc::c_void,
                arg2: *const ::libc::c_void,
            ) -> ::libc::c_int,
        >,
    ) -> *const ::libc::c_void;
}
extern "C" {
    pub fn OBJ_bsearch_ex_(
        key: *const ::libc::c_void,
        base: *const ::libc::c_void,
        num: ::libc::c_int,
        size: ::libc::c_int,
        cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::libc::c_void,
                arg2: *const ::libc::c_void,
            ) -> ::libc::c_int,
        >,
        flags: ::libc::c_int,
    ) -> *const ::libc::c_void;
}
extern "C" {
    pub fn OBJ_new_nid(num: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_add_object(obj: *const ASN1_OBJECT) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_create(
        oid: *const ::libc::c_char,
        sn: *const ::libc::c_char,
        ln: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_create_objects(in_: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_length(obj: *const ASN1_OBJECT) -> usize;
}
extern "C" {
    pub fn OBJ_get0_data(obj: *const ASN1_OBJECT) -> *const ::libc::c_uchar;
}
extern "C" {
    pub fn OBJ_find_sigid_algs(
        signid: ::libc::c_int,
        pdig_nid: *mut ::libc::c_int,
        ppkey_nid: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_find_sigid_by_algs(
        psignid: *mut ::libc::c_int,
        dig_nid: ::libc::c_int,
        pkey_nid: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_add_sigid(
        signid: ::libc::c_int,
        dig_id: ::libc::c_int,
        pkey_id: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OBJ_sigid_free();
}
extern "C" {
    pub fn EVP_set_default_properties(
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_default_properties_is_fips_enabled(libctx: *mut OSSL_LIB_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_default_properties_enable_fips(
        libctx: *mut OSSL_LIB_CTX,
        enable: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_new(md_type: ::libc::c_int, pkey_type: ::libc::c_int) -> *mut EVP_MD;
}
extern "C" {
    pub fn EVP_MD_meth_dup(md: *const EVP_MD) -> *mut EVP_MD;
}
extern "C" {
    pub fn EVP_MD_meth_free(md: *mut EVP_MD);
}
extern "C" {
    pub fn EVP_MD_meth_set_input_blocksize(
        md: *mut EVP_MD,
        blocksize: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_set_result_size(md: *mut EVP_MD, resultsize: ::libc::c_int)
        -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_set_app_datasize(md: *mut EVP_MD, datasize: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_set_flags(md: *mut EVP_MD, flags: ::libc::c_ulong) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_set_init(
        md: *mut EVP_MD,
        init: ::std::option::Option<unsafe extern "C" fn(ctx: *mut EVP_MD_CTX) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_set_update(
        md: *mut EVP_MD,
        update: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_MD_CTX,
                data: *const ::libc::c_void,
                count: usize,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_set_final(
        md: *mut EVP_MD,
        final_: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_MD_CTX, md: *mut ::libc::c_uchar) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_set_copy(
        md: *mut EVP_MD,
        copy: ::std::option::Option<
            unsafe extern "C" fn(to: *mut EVP_MD_CTX, from: *const EVP_MD_CTX) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_set_cleanup(
        md: *mut EVP_MD,
        cleanup: ::std::option::Option<unsafe extern "C" fn(ctx: *mut EVP_MD_CTX) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_set_ctrl(
        md: *mut EVP_MD,
        ctrl: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_MD_CTX,
                cmd: ::libc::c_int,
                p1: ::libc::c_int,
                p2: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_get_input_blocksize(md: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_get_result_size(md: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_get_app_datasize(md: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_get_flags(md: *const EVP_MD) -> ::libc::c_ulong;
}
extern "C" {
    pub fn EVP_MD_meth_get_init(
        md: *const EVP_MD,
    ) -> ::std::option::Option<unsafe extern "C" fn(md: *mut EVP_MD_CTX) -> ::libc::c_int>;
}
extern "C" {
    pub fn EVP_MD_meth_get_update(
        md: *const EVP_MD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            md: *mut EVP_MD_CTX,
            arg1: *const ::libc::c_void,
            arg2: usize,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn EVP_MD_meth_get_final(
        md: *const EVP_MD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(md: *mut EVP_MD_CTX, arg1: *mut ::libc::c_uchar) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn EVP_MD_meth_get_copy(
        md: *const EVP_MD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(md: *mut EVP_MD_CTX, arg1: *const EVP_MD_CTX) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn EVP_MD_meth_get_cleanup(
        md: *const EVP_MD,
    ) -> ::std::option::Option<unsafe extern "C" fn(md: *mut EVP_MD_CTX) -> ::libc::c_int>;
}
extern "C" {
    pub fn EVP_MD_meth_get_ctrl(
        md: *const EVP_MD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            md: *mut EVP_MD_CTX,
            arg1: ::libc::c_int,
            arg2: ::libc::c_int,
            arg3: *mut ::libc::c_void,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn EVP_CIPHER_meth_new(
        cipher_type: ::libc::c_int,
        block_size: ::libc::c_int,
        key_len: ::libc::c_int,
    ) -> *mut EVP_CIPHER;
}
extern "C" {
    pub fn EVP_CIPHER_meth_dup(cipher: *const EVP_CIPHER) -> *mut EVP_CIPHER;
}
extern "C" {
    pub fn EVP_CIPHER_meth_free(cipher: *mut EVP_CIPHER);
}
extern "C" {
    pub fn EVP_CIPHER_meth_set_iv_length(
        cipher: *mut EVP_CIPHER,
        iv_len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_meth_set_flags(
        cipher: *mut EVP_CIPHER,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_meth_set_impl_ctx_size(
        cipher: *mut EVP_CIPHER,
        ctx_size: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_meth_set_init(
        cipher: *mut EVP_CIPHER,
        init: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_CIPHER_CTX,
                key: *const ::libc::c_uchar,
                iv: *const ::libc::c_uchar,
                enc: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_meth_set_do_cipher(
        cipher: *mut EVP_CIPHER,
        do_cipher: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_CIPHER_CTX,
                out: *mut ::libc::c_uchar,
                in_: *const ::libc::c_uchar,
                inl: usize,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_meth_set_cleanup(
        cipher: *mut EVP_CIPHER,
        cleanup: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut EVP_CIPHER_CTX) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_meth_set_set_asn1_params(
        cipher: *mut EVP_CIPHER,
        set_asn1_parameters: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut EVP_CIPHER_CTX, arg2: *mut ASN1_TYPE) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_meth_set_get_asn1_params(
        cipher: *mut EVP_CIPHER,
        get_asn1_parameters: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut EVP_CIPHER_CTX, arg2: *mut ASN1_TYPE) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_meth_set_ctrl(
        cipher: *mut EVP_CIPHER,
        ctrl: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut EVP_CIPHER_CTX,
                type_: ::libc::c_int,
                arg: ::libc::c_int,
                ptr: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_meth_get_init(
        cipher: *const EVP_CIPHER,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            cipher: *mut EVP_CIPHER_CTX,
            arg1: *const ::libc::c_uchar,
            arg2: *const ::libc::c_uchar,
            arg3: ::libc::c_int,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn EVP_CIPHER_meth_get_do_cipher(
        cipher: *const EVP_CIPHER,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            cipher: *mut EVP_CIPHER_CTX,
            arg1: *mut ::libc::c_uchar,
            arg2: *const ::libc::c_uchar,
            arg3: usize,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn EVP_CIPHER_meth_get_cleanup(
        cipher: *const EVP_CIPHER,
    ) -> ::std::option::Option<unsafe extern "C" fn(cipher: *mut EVP_CIPHER_CTX) -> ::libc::c_int>;
}
extern "C" {
    pub fn EVP_CIPHER_meth_get_set_asn1_params(
        cipher: *const EVP_CIPHER,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(cipher: *mut EVP_CIPHER_CTX, arg1: *mut ASN1_TYPE) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn EVP_CIPHER_meth_get_get_asn1_params(
        cipher: *const EVP_CIPHER,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(cipher: *mut EVP_CIPHER_CTX, arg1: *mut ASN1_TYPE) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn EVP_CIPHER_meth_get_ctrl(
        cipher: *const EVP_CIPHER,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            cipher: *mut EVP_CIPHER_CTX,
            arg1: ::libc::c_int,
            arg2: ::libc::c_int,
            arg3: *mut ::libc::c_void,
        ) -> ::libc::c_int,
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM {
    pub out: *mut ::libc::c_uchar,
    pub inp: *const ::libc::c_uchar,
    pub len: usize,
    pub interleave: ::libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_cipher_info_st {
    pub cipher: *const EVP_CIPHER,
    pub iv: [::libc::c_uchar; 16usize],
}
pub type EVP_CIPHER_INFO = evp_cipher_info_st;
pub type EVP_PBE_KEYGEN = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut EVP_CIPHER_CTX,
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        param: *mut ASN1_TYPE,
        cipher: *const EVP_CIPHER,
        md: *const EVP_MD,
        en_de: ::libc::c_int,
    ) -> ::libc::c_int,
>;
pub type EVP_PBE_KEYGEN_EX = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut EVP_CIPHER_CTX,
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        param: *mut ASN1_TYPE,
        cipher: *const EVP_CIPHER,
        md: *const EVP_MD,
        en_de: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int,
>;
extern "C" {
    pub fn EVP_MD_get_type(md: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_get0_name(md: *const EVP_MD) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_MD_get0_description(md: *const EVP_MD) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_MD_is_a(md: *const EVP_MD, name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_names_do_all(
        md: *const EVP_MD,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(name: *const ::libc::c_char, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_get0_provider(md: *const EVP_MD) -> *const OSSL_PROVIDER;
}
extern "C" {
    pub fn EVP_MD_get_pkey_type(md: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_get_size(md: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_get_block_size(md: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_get_flags(md: *const EVP_MD) -> ::libc::c_ulong;
}
extern "C" {
    pub fn EVP_MD_CTX_get0_md(ctx: *const EVP_MD_CTX) -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_MD_CTX_get1_md(ctx: *mut EVP_MD_CTX) -> *mut EVP_MD;
}
extern "C" {
    pub fn EVP_MD_CTX_md(ctx: *const EVP_MD_CTX) -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_MD_CTX_update_fn(
        ctx: *mut EVP_MD_CTX,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut EVP_MD_CTX,
            arg1: *const ::libc::c_void,
            arg2: usize,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn EVP_MD_CTX_set_update_fn(
        ctx: *mut EVP_MD_CTX,
        update: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_MD_CTX,
                data: *const ::libc::c_void,
                count: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_MD_CTX_get_pkey_ctx(ctx: *const EVP_MD_CTX) -> *mut EVP_PKEY_CTX;
}
extern "C" {
    pub fn EVP_MD_CTX_set_pkey_ctx(ctx: *mut EVP_MD_CTX, pctx: *mut EVP_PKEY_CTX);
}
extern "C" {
    pub fn EVP_MD_CTX_get0_md_data(ctx: *const EVP_MD_CTX) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn EVP_CIPHER_get_nid(cipher: *const EVP_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_get0_name(cipher: *const EVP_CIPHER) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_CIPHER_get0_description(cipher: *const EVP_CIPHER) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_CIPHER_is_a(cipher: *const EVP_CIPHER, name: *const ::libc::c_char)
        -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_names_do_all(
        cipher: *const EVP_CIPHER,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(name: *const ::libc::c_char, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_get0_provider(cipher: *const EVP_CIPHER) -> *const OSSL_PROVIDER;
}
extern "C" {
    pub fn EVP_CIPHER_get_block_size(cipher: *const EVP_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_impl_ctx_size(cipher: *const EVP_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_get_key_length(cipher: *const EVP_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_get_iv_length(cipher: *const EVP_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_get_flags(cipher: *const EVP_CIPHER) -> ::libc::c_ulong;
}
extern "C" {
    pub fn EVP_CIPHER_get_mode(cipher: *const EVP_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_get_type(cipher: *const EVP_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_fetch(
        ctx: *mut OSSL_LIB_CTX,
        algorithm: *const ::libc::c_char,
        properties: *const ::libc::c_char,
    ) -> *mut EVP_CIPHER;
}
extern "C" {
    pub fn EVP_CIPHER_up_ref(cipher: *mut EVP_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_free(cipher: *mut EVP_CIPHER);
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get0_cipher(ctx: *const EVP_CIPHER_CTX) -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get1_cipher(ctx: *mut EVP_CIPHER_CTX) -> *mut EVP_CIPHER;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_is_encrypting(ctx: *const EVP_CIPHER_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_nid(ctx: *const EVP_CIPHER_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_block_size(ctx: *const EVP_CIPHER_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_key_length(ctx: *const EVP_CIPHER_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_iv_length(ctx: *const EVP_CIPHER_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_tag_length(ctx: *const EVP_CIPHER_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_cipher(ctx: *const EVP_CIPHER_CTX) -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_iv(ctx: *const EVP_CIPHER_CTX) -> *const ::libc::c_uchar;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_original_iv(ctx: *const EVP_CIPHER_CTX) -> *const ::libc::c_uchar;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_iv_noconst(ctx: *mut EVP_CIPHER_CTX) -> *mut ::libc::c_uchar;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_updated_iv(
        ctx: *mut EVP_CIPHER_CTX,
        buf: *mut ::libc::c_void,
        len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_original_iv(
        ctx: *mut EVP_CIPHER_CTX,
        buf: *mut ::libc::c_void,
        len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_buf_noconst(ctx: *mut EVP_CIPHER_CTX) -> *mut ::libc::c_uchar;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_num(ctx: *const EVP_CIPHER_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_num(ctx: *mut EVP_CIPHER_CTX, num: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_copy(
        out: *mut EVP_CIPHER_CTX,
        in_: *const EVP_CIPHER_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_app_data(ctx: *const EVP_CIPHER_CTX) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_app_data(ctx: *mut EVP_CIPHER_CTX, data: *mut ::libc::c_void);
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_cipher_data(ctx: *const EVP_CIPHER_CTX) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_cipher_data(
        ctx: *mut EVP_CIPHER_CTX,
        cipher_data: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn EVP_Cipher(
        c: *mut EVP_CIPHER_CTX,
        out: *mut ::libc::c_uchar,
        in_: *const ::libc::c_uchar,
        inl: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_get_params(digest: *const EVP_MD, params: *mut OSSL_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_CTX_set_params(ctx: *mut EVP_MD_CTX, params: *const OSSL_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_CTX_get_params(ctx: *mut EVP_MD_CTX, params: *mut OSSL_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_gettable_params(digest: *const EVP_MD) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_MD_settable_ctx_params(md: *const EVP_MD) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_MD_gettable_ctx_params(md: *const EVP_MD) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_MD_CTX_settable_params(ctx: *mut EVP_MD_CTX) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_MD_CTX_gettable_params(ctx: *mut EVP_MD_CTX) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_MD_CTX_ctrl(
        ctx: *mut EVP_MD_CTX,
        cmd: ::libc::c_int,
        p1: ::libc::c_int,
        p2: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_CTX_new() -> *mut EVP_MD_CTX;
}
extern "C" {
    pub fn EVP_MD_CTX_reset(ctx: *mut EVP_MD_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_CTX_free(ctx: *mut EVP_MD_CTX);
}
extern "C" {
    pub fn EVP_MD_CTX_copy_ex(out: *mut EVP_MD_CTX, in_: *const EVP_MD_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_CTX_set_flags(ctx: *mut EVP_MD_CTX, flags: ::libc::c_int);
}
extern "C" {
    pub fn EVP_MD_CTX_clear_flags(ctx: *mut EVP_MD_CTX, flags: ::libc::c_int);
}
extern "C" {
    pub fn EVP_MD_CTX_test_flags(ctx: *const EVP_MD_CTX, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestInit_ex2(
        ctx: *mut EVP_MD_CTX,
        type_: *const EVP_MD,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestInit_ex(
        ctx: *mut EVP_MD_CTX,
        type_: *const EVP_MD,
        impl_: *mut ENGINE,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestUpdate(
        ctx: *mut EVP_MD_CTX,
        d: *const ::libc::c_void,
        cnt: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestFinal_ex(
        ctx: *mut EVP_MD_CTX,
        md: *mut ::libc::c_uchar,
        s: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_Digest(
        data: *const ::libc::c_void,
        count: usize,
        md: *mut ::libc::c_uchar,
        size: *mut ::libc::c_uint,
        type_: *const EVP_MD,
        impl_: *mut ENGINE,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_Q_digest(
        libctx: *mut OSSL_LIB_CTX,
        name: *const ::libc::c_char,
        propq: *const ::libc::c_char,
        data: *const ::libc::c_void,
        datalen: usize,
        md: *mut ::libc::c_uchar,
        mdlen: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_CTX_copy(out: *mut EVP_MD_CTX, in_: *const EVP_MD_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestInit(ctx: *mut EVP_MD_CTX, type_: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestFinal(
        ctx: *mut EVP_MD_CTX,
        md: *mut ::libc::c_uchar,
        s: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestFinalXOF(
        ctx: *mut EVP_MD_CTX,
        md: *mut ::libc::c_uchar,
        len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_fetch(
        ctx: *mut OSSL_LIB_CTX,
        algorithm: *const ::libc::c_char,
        properties: *const ::libc::c_char,
    ) -> *mut EVP_MD;
}
extern "C" {
    pub fn EVP_MD_up_ref(md: *mut EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MD_free(md: *mut EVP_MD);
}
extern "C" {
    pub fn EVP_read_pw_string(
        buf: *mut ::libc::c_char,
        length: ::libc::c_int,
        prompt: *const ::libc::c_char,
        verify: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_read_pw_string_min(
        buf: *mut ::libc::c_char,
        minlen: ::libc::c_int,
        maxlen: ::libc::c_int,
        prompt: *const ::libc::c_char,
        verify: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_set_pw_prompt(prompt: *const ::libc::c_char);
}
extern "C" {
    pub fn EVP_get_pw_prompt() -> *mut ::libc::c_char;
}
extern "C" {
    pub fn EVP_BytesToKey(
        type_: *const EVP_CIPHER,
        md: *const EVP_MD,
        salt: *const ::libc::c_uchar,
        data: *const ::libc::c_uchar,
        datal: ::libc::c_int,
        count: ::libc::c_int,
        key: *mut ::libc::c_uchar,
        iv: *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_flags(ctx: *mut EVP_CIPHER_CTX, flags: ::libc::c_int);
}
extern "C" {
    pub fn EVP_CIPHER_CTX_clear_flags(ctx: *mut EVP_CIPHER_CTX, flags: ::libc::c_int);
}
extern "C" {
    pub fn EVP_CIPHER_CTX_test_flags(
        ctx: *const EVP_CIPHER_CTX,
        flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_EncryptInit(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        key: *const ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_EncryptInit_ex(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        impl_: *mut ENGINE,
        key: *const ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_EncryptInit_ex2(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        key: *const ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_EncryptUpdate(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
        in_: *const ::libc::c_uchar,
        inl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_EncryptFinal_ex(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_EncryptFinal(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DecryptInit(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        key: *const ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DecryptInit_ex(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        impl_: *mut ENGINE,
        key: *const ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DecryptInit_ex2(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        key: *const ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DecryptUpdate(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
        in_: *const ::libc::c_uchar,
        inl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DecryptFinal(
        ctx: *mut EVP_CIPHER_CTX,
        outm: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DecryptFinal_ex(
        ctx: *mut EVP_CIPHER_CTX,
        outm: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CipherInit(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        key: *const ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
        enc: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CipherInit_ex(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        impl_: *mut ENGINE,
        key: *const ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
        enc: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CipherInit_ex2(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        key: *const ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
        enc: ::libc::c_int,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CipherUpdate(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
        in_: *const ::libc::c_uchar,
        inl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CipherFinal(
        ctx: *mut EVP_CIPHER_CTX,
        outm: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CipherFinal_ex(
        ctx: *mut EVP_CIPHER_CTX,
        outm: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_SignFinal(
        ctx: *mut EVP_MD_CTX,
        md: *mut ::libc::c_uchar,
        s: *mut ::libc::c_uint,
        pkey: *mut EVP_PKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_SignFinal_ex(
        ctx: *mut EVP_MD_CTX,
        md: *mut ::libc::c_uchar,
        s: *mut ::libc::c_uint,
        pkey: *mut EVP_PKEY,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestSign(
        ctx: *mut EVP_MD_CTX,
        sigret: *mut ::libc::c_uchar,
        siglen: *mut usize,
        tbs: *const ::libc::c_uchar,
        tbslen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_VerifyFinal(
        ctx: *mut EVP_MD_CTX,
        sigbuf: *const ::libc::c_uchar,
        siglen: ::libc::c_uint,
        pkey: *mut EVP_PKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_VerifyFinal_ex(
        ctx: *mut EVP_MD_CTX,
        sigbuf: *const ::libc::c_uchar,
        siglen: ::libc::c_uint,
        pkey: *mut EVP_PKEY,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestVerify(
        ctx: *mut EVP_MD_CTX,
        sigret: *const ::libc::c_uchar,
        siglen: usize,
        tbs: *const ::libc::c_uchar,
        tbslen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestSignInit_ex(
        ctx: *mut EVP_MD_CTX,
        pctx: *mut *mut EVP_PKEY_CTX,
        mdname: *const ::libc::c_char,
        libctx: *mut OSSL_LIB_CTX,
        props: *const ::libc::c_char,
        pkey: *mut EVP_PKEY,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestSignInit(
        ctx: *mut EVP_MD_CTX,
        pctx: *mut *mut EVP_PKEY_CTX,
        type_: *const EVP_MD,
        e: *mut ENGINE,
        pkey: *mut EVP_PKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestSignUpdate(
        ctx: *mut EVP_MD_CTX,
        data: *const ::libc::c_void,
        dsize: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestSignFinal(
        ctx: *mut EVP_MD_CTX,
        sigret: *mut ::libc::c_uchar,
        siglen: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestVerifyInit_ex(
        ctx: *mut EVP_MD_CTX,
        pctx: *mut *mut EVP_PKEY_CTX,
        mdname: *const ::libc::c_char,
        libctx: *mut OSSL_LIB_CTX,
        props: *const ::libc::c_char,
        pkey: *mut EVP_PKEY,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestVerifyInit(
        ctx: *mut EVP_MD_CTX,
        pctx: *mut *mut EVP_PKEY_CTX,
        type_: *const EVP_MD,
        e: *mut ENGINE,
        pkey: *mut EVP_PKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestVerifyUpdate(
        ctx: *mut EVP_MD_CTX,
        data: *const ::libc::c_void,
        dsize: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DigestVerifyFinal(
        ctx: *mut EVP_MD_CTX,
        sig: *const ::libc::c_uchar,
        siglen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_OpenInit(
        ctx: *mut EVP_CIPHER_CTX,
        type_: *const EVP_CIPHER,
        ek: *const ::libc::c_uchar,
        ekl: ::libc::c_int,
        iv: *const ::libc::c_uchar,
        priv_: *mut EVP_PKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_OpenFinal(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_SealInit(
        ctx: *mut EVP_CIPHER_CTX,
        type_: *const EVP_CIPHER,
        ek: *mut *mut ::libc::c_uchar,
        ekl: *mut ::libc::c_int,
        iv: *mut ::libc::c_uchar,
        pubk: *mut *mut EVP_PKEY,
        npubk: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_SealFinal(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_ENCODE_CTX_new() -> *mut EVP_ENCODE_CTX;
}
extern "C" {
    pub fn EVP_ENCODE_CTX_free(ctx: *mut EVP_ENCODE_CTX);
}
extern "C" {
    pub fn EVP_ENCODE_CTX_copy(
        dctx: *mut EVP_ENCODE_CTX,
        sctx: *const EVP_ENCODE_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_ENCODE_CTX_num(ctx: *mut EVP_ENCODE_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_EncodeInit(ctx: *mut EVP_ENCODE_CTX);
}
extern "C" {
    pub fn EVP_EncodeUpdate(
        ctx: *mut EVP_ENCODE_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
        in_: *const ::libc::c_uchar,
        inl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_EncodeFinal(
        ctx: *mut EVP_ENCODE_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
    );
}
extern "C" {
    pub fn EVP_EncodeBlock(
        t: *mut ::libc::c_uchar,
        f: *const ::libc::c_uchar,
        n: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DecodeInit(ctx: *mut EVP_ENCODE_CTX);
}
extern "C" {
    pub fn EVP_DecodeUpdate(
        ctx: *mut EVP_ENCODE_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
        in_: *const ::libc::c_uchar,
        inl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DecodeFinal(
        ctx: *mut EVP_ENCODE_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_DecodeBlock(
        t: *mut ::libc::c_uchar,
        f: *const ::libc::c_uchar,
        n: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_new() -> *mut EVP_CIPHER_CTX;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_reset(c: *mut EVP_CIPHER_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_free(c: *mut EVP_CIPHER_CTX);
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_key_length(
        x: *mut EVP_CIPHER_CTX,
        keylen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_padding(c: *mut EVP_CIPHER_CTX, pad: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_ctrl(
        ctx: *mut EVP_CIPHER_CTX,
        type_: ::libc::c_int,
        arg: ::libc::c_int,
        ptr: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_rand_key(
        ctx: *mut EVP_CIPHER_CTX,
        key: *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_get_params(cipher: *mut EVP_CIPHER, params: *mut OSSL_PARAM)
        -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_params(
        ctx: *mut EVP_CIPHER_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_params(
        ctx: *mut EVP_CIPHER_CTX,
        params: *mut OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_gettable_params(cipher: *const EVP_CIPHER) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_CIPHER_settable_ctx_params(cipher: *const EVP_CIPHER) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_CIPHER_gettable_ctx_params(cipher: *const EVP_CIPHER) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_settable_params(ctx: *mut EVP_CIPHER_CTX) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_gettable_params(ctx: *mut EVP_CIPHER_CTX) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn BIO_f_md() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_f_base64() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_f_cipher() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_f_reliable() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_set_cipher(
        b: *mut BIO,
        c: *const EVP_CIPHER,
        k: *const ::libc::c_uchar,
        i: *const ::libc::c_uchar,
        enc: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_md_null() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_md4() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_md5() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_md5_sha1() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_blake2b512() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_blake2s256() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha1() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha224() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha256() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha384() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha512() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha512_224() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha512_256() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha3_224() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha3_256() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha3_384() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha3_512() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_shake128() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_shake256() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_mdc2() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_ripemd160() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_whirlpool() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sm3() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_enc_null() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_cfb64() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede_cfb64() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3_cfb64() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_desx_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3_wrap() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc4() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc4_40() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc4_hmac_md5() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_idea_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_idea_cfb64() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_idea_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_idea_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc2_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc2_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc2_40_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc2_64_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc2_cfb64() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc2_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_bf_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_bf_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_bf_cfb64() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_bf_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_cast5_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_cast5_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_cast5_cfb64() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_cast5_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_ccm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_gcm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_xts() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_wrap() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_wrap_pad() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_ocb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_ccm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_gcm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_wrap() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_wrap_pad() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_ocb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_ccm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_gcm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_xts() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_wrap() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_wrap_pad() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_ocb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_cbc_hmac_sha1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_cbc_hmac_sha1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_cbc_hmac_sha256() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_cbc_hmac_sha256() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_128_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_128_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_128_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_128_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_128_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_128_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_128_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_128_gcm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_128_ccm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_192_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_192_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_192_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_192_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_192_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_192_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_192_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_192_gcm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_192_ccm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_256_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_256_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_256_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_256_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_256_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_256_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_256_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_256_gcm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aria_256_ccm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_128_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_128_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_128_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_128_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_128_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_128_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_128_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_192_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_192_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_192_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_192_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_192_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_192_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_192_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_256_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_256_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_256_cfb1() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_256_cfb8() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_256_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_256_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_camellia_256_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_chacha20() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_chacha20_poly1305() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_seed_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_seed_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_seed_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_seed_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_sm4_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_sm4_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_sm4_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_sm4_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_sm4_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_add_cipher(cipher: *const EVP_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_add_digest(digest: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_get_cipherbyname(name: *const ::libc::c_char) -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_get_digestbyname(name: *const ::libc::c_char) -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_CIPHER_do_all(
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                ciph: *const EVP_CIPHER,
                from: *const ::libc::c_char,
                to: *const ::libc::c_char,
                x: *mut ::libc::c_void,
            ),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_CIPHER_do_all_sorted(
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                ciph: *const EVP_CIPHER,
                from: *const ::libc::c_char,
                to: *const ::libc::c_char,
                x: *mut ::libc::c_void,
            ),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_CIPHER_do_all_provided(
        libctx: *mut OSSL_LIB_CTX,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(cipher: *mut EVP_CIPHER, arg: *mut ::libc::c_void),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_MD_do_all(
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                ciph: *const EVP_MD,
                from: *const ::libc::c_char,
                to: *const ::libc::c_char,
                x: *mut ::libc::c_void,
            ),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_MD_do_all_sorted(
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                ciph: *const EVP_MD,
                from: *const ::libc::c_char,
                to: *const ::libc::c_char,
                x: *mut ::libc::c_void,
            ),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_MD_do_all_provided(
        libctx: *mut OSSL_LIB_CTX,
        fn_: ::std::option::Option<unsafe extern "C" fn(md: *mut EVP_MD, arg: *mut ::libc::c_void)>,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_MAC_fetch(
        libctx: *mut OSSL_LIB_CTX,
        algorithm: *const ::libc::c_char,
        properties: *const ::libc::c_char,
    ) -> *mut EVP_MAC;
}
extern "C" {
    pub fn EVP_MAC_up_ref(mac: *mut EVP_MAC) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MAC_free(mac: *mut EVP_MAC);
}
extern "C" {
    pub fn EVP_MAC_get0_name(mac: *const EVP_MAC) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_MAC_get0_description(mac: *const EVP_MAC) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_MAC_is_a(mac: *const EVP_MAC, name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MAC_get0_provider(mac: *const EVP_MAC) -> *const OSSL_PROVIDER;
}
extern "C" {
    pub fn EVP_MAC_get_params(mac: *mut EVP_MAC, params: *mut OSSL_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MAC_CTX_new(mac: *mut EVP_MAC) -> *mut EVP_MAC_CTX;
}
extern "C" {
    pub fn EVP_MAC_CTX_free(ctx: *mut EVP_MAC_CTX);
}
extern "C" {
    pub fn EVP_MAC_CTX_dup(src: *const EVP_MAC_CTX) -> *mut EVP_MAC_CTX;
}
extern "C" {
    pub fn EVP_MAC_CTX_get0_mac(ctx: *mut EVP_MAC_CTX) -> *mut EVP_MAC;
}
extern "C" {
    pub fn EVP_MAC_CTX_get_params(ctx: *mut EVP_MAC_CTX, params: *mut OSSL_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MAC_CTX_set_params(
        ctx: *mut EVP_MAC_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MAC_CTX_get_mac_size(ctx: *mut EVP_MAC_CTX) -> usize;
}
extern "C" {
    pub fn EVP_MAC_CTX_get_block_size(ctx: *mut EVP_MAC_CTX) -> usize;
}
extern "C" {
    pub fn EVP_Q_mac(
        libctx: *mut OSSL_LIB_CTX,
        name: *const ::libc::c_char,
        propq: *const ::libc::c_char,
        subalg: *const ::libc::c_char,
        params: *const OSSL_PARAM,
        key: *const ::libc::c_void,
        keylen: usize,
        data: *const ::libc::c_uchar,
        datalen: usize,
        out: *mut ::libc::c_uchar,
        outsize: usize,
        outlen: *mut usize,
    ) -> *mut ::libc::c_uchar;
}
extern "C" {
    pub fn EVP_MAC_init(
        ctx: *mut EVP_MAC_CTX,
        key: *const ::libc::c_uchar,
        keylen: usize,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MAC_update(
        ctx: *mut EVP_MAC_CTX,
        data: *const ::libc::c_uchar,
        datalen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MAC_final(
        ctx: *mut EVP_MAC_CTX,
        out: *mut ::libc::c_uchar,
        outl: *mut usize,
        outsize: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MAC_finalXOF(
        ctx: *mut EVP_MAC_CTX,
        out: *mut ::libc::c_uchar,
        outsize: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_MAC_gettable_params(mac: *const EVP_MAC) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_MAC_gettable_ctx_params(mac: *const EVP_MAC) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_MAC_settable_ctx_params(mac: *const EVP_MAC) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_MAC_CTX_gettable_params(ctx: *mut EVP_MAC_CTX) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_MAC_CTX_settable_params(ctx: *mut EVP_MAC_CTX) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_MAC_do_all_provided(
        libctx: *mut OSSL_LIB_CTX,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(mac: *mut EVP_MAC, arg: *mut ::libc::c_void),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_MAC_names_do_all(
        mac: *const EVP_MAC,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(name: *const ::libc::c_char, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_fetch(
        libctx: *mut OSSL_LIB_CTX,
        algorithm: *const ::libc::c_char,
        properties: *const ::libc::c_char,
    ) -> *mut EVP_RAND;
}
extern "C" {
    pub fn EVP_RAND_up_ref(rand: *mut EVP_RAND) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_free(rand: *mut EVP_RAND);
}
extern "C" {
    pub fn EVP_RAND_get0_name(rand: *const EVP_RAND) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_RAND_get0_description(md: *const EVP_RAND) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_RAND_is_a(rand: *const EVP_RAND, name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_get0_provider(rand: *const EVP_RAND) -> *const OSSL_PROVIDER;
}
extern "C" {
    pub fn EVP_RAND_get_params(rand: *mut EVP_RAND, params: *mut OSSL_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_CTX_new(rand: *mut EVP_RAND, parent: *mut EVP_RAND_CTX) -> *mut EVP_RAND_CTX;
}
extern "C" {
    pub fn EVP_RAND_CTX_free(ctx: *mut EVP_RAND_CTX);
}
extern "C" {
    pub fn EVP_RAND_CTX_get0_rand(ctx: *mut EVP_RAND_CTX) -> *mut EVP_RAND;
}
extern "C" {
    pub fn EVP_RAND_CTX_get_params(
        ctx: *mut EVP_RAND_CTX,
        params: *mut OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_CTX_set_params(
        ctx: *mut EVP_RAND_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_gettable_params(rand: *const EVP_RAND) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_RAND_gettable_ctx_params(rand: *const EVP_RAND) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_RAND_settable_ctx_params(rand: *const EVP_RAND) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_RAND_CTX_gettable_params(ctx: *mut EVP_RAND_CTX) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_RAND_CTX_settable_params(ctx: *mut EVP_RAND_CTX) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_RAND_do_all_provided(
        libctx: *mut OSSL_LIB_CTX,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(rand: *mut EVP_RAND, arg: *mut ::libc::c_void),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_RAND_names_do_all(
        rand: *const EVP_RAND,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(name: *const ::libc::c_char, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_instantiate(
        ctx: *mut EVP_RAND_CTX,
        strength: ::libc::c_uint,
        prediction_resistance: ::libc::c_int,
        pstr: *const ::libc::c_uchar,
        pstr_len: usize,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_uninstantiate(ctx: *mut EVP_RAND_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_generate(
        ctx: *mut EVP_RAND_CTX,
        out: *mut ::libc::c_uchar,
        outlen: usize,
        strength: ::libc::c_uint,
        prediction_resistance: ::libc::c_int,
        addin: *const ::libc::c_uchar,
        addin_len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_reseed(
        ctx: *mut EVP_RAND_CTX,
        prediction_resistance: ::libc::c_int,
        ent: *const ::libc::c_uchar,
        ent_len: usize,
        addin: *const ::libc::c_uchar,
        addin_len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_nonce(
        ctx: *mut EVP_RAND_CTX,
        out: *mut ::libc::c_uchar,
        outlen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_enable_locking(ctx: *mut EVP_RAND_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_verify_zeroization(ctx: *mut EVP_RAND_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_RAND_get_strength(ctx: *mut EVP_RAND_CTX) -> ::libc::c_uint;
}
extern "C" {
    pub fn EVP_RAND_get_state(ctx: *mut EVP_RAND_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_decrypt_old(
        dec_key: *mut ::libc::c_uchar,
        enc_key: *const ::libc::c_uchar,
        enc_key_len: ::libc::c_int,
        private_key: *mut EVP_PKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_encrypt_old(
        enc_key: *mut ::libc::c_uchar,
        key: *const ::libc::c_uchar,
        key_len: ::libc::c_int,
        pub_key: *mut EVP_PKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_is_a(pkey: *const EVP_PKEY, name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_type_names_do_all(
        pkey: *const EVP_PKEY,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(name: *const ::libc::c_char, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_type(type_: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_id(pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_base_id(pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_bits(pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_security_bits(pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_size(pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_can_sign(pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set_type(pkey: *mut EVP_PKEY, type_: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set_type_str(
        pkey: *mut EVP_PKEY,
        str_: *const ::libc::c_char,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set_type_by_keymgmt(
        pkey: *mut EVP_PKEY,
        keymgmt: *mut EVP_KEYMGMT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set1_engine(pkey: *mut EVP_PKEY, e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0_engine(pkey: *const EVP_PKEY) -> *mut ENGINE;
}
extern "C" {
    pub fn EVP_PKEY_assign(
        pkey: *mut EVP_PKEY,
        type_: ::libc::c_int,
        key: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0(pkey: *const EVP_PKEY) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn EVP_PKEY_get0_hmac(pkey: *const EVP_PKEY, len: *mut usize) -> *const ::libc::c_uchar;
}
extern "C" {
    pub fn EVP_PKEY_get0_poly1305(pkey: *const EVP_PKEY, len: *mut usize)
        -> *const ::libc::c_uchar;
}
extern "C" {
    pub fn EVP_PKEY_get0_siphash(pkey: *const EVP_PKEY, len: *mut usize) -> *const ::libc::c_uchar;
}
extern "C" {
    pub fn EVP_PKEY_set1_RSA(pkey: *mut EVP_PKEY, key: *mut rsa_st) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0_RSA(pkey: *const EVP_PKEY) -> *const rsa_st;
}
extern "C" {
    pub fn EVP_PKEY_get1_RSA(pkey: *mut EVP_PKEY) -> *mut rsa_st;
}
extern "C" {
    pub fn EVP_PKEY_set1_DSA(pkey: *mut EVP_PKEY, key: *mut dsa_st) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0_DSA(pkey: *const EVP_PKEY) -> *const dsa_st;
}
extern "C" {
    pub fn EVP_PKEY_get1_DSA(pkey: *mut EVP_PKEY) -> *mut dsa_st;
}
extern "C" {
    pub fn EVP_PKEY_set1_DH(pkey: *mut EVP_PKEY, key: *mut dh_st) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0_DH(pkey: *const EVP_PKEY) -> *const dh_st;
}
extern "C" {
    pub fn EVP_PKEY_get1_DH(pkey: *mut EVP_PKEY) -> *mut dh_st;
}
extern "C" {
    pub fn EVP_PKEY_set1_EC_KEY(pkey: *mut EVP_PKEY, key: *mut ec_key_st) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0_EC_KEY(pkey: *const EVP_PKEY) -> *const ec_key_st;
}
extern "C" {
    pub fn EVP_PKEY_get1_EC_KEY(pkey: *mut EVP_PKEY) -> *mut ec_key_st;
}
extern "C" {
    pub fn EVP_PKEY_new() -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_up_ref(pkey: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_dup(pkey: *mut EVP_PKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_free(pkey: *mut EVP_PKEY);
}
extern "C" {
    pub fn EVP_PKEY_get0_description(pkey: *const EVP_PKEY) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_PKEY_get0_provider(key: *const EVP_PKEY) -> *const OSSL_PROVIDER;
}
extern "C" {
    pub fn d2i_PublicKey(
        type_: ::libc::c_int,
        a: *mut *mut EVP_PKEY,
        pp: *mut *const ::libc::c_uchar,
        length: ::libc::c_long,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_PublicKey(a: *const EVP_PKEY, pp: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PrivateKey_ex(
        type_: ::libc::c_int,
        a: *mut *mut EVP_PKEY,
        pp: *mut *const ::libc::c_uchar,
        length: ::libc::c_long,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_PrivateKey(
        type_: ::libc::c_int,
        a: *mut *mut EVP_PKEY,
        pp: *mut *const ::libc::c_uchar,
        length: ::libc::c_long,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_AutoPrivateKey_ex(
        a: *mut *mut EVP_PKEY,
        pp: *mut *const ::libc::c_uchar,
        length: ::libc::c_long,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_AutoPrivateKey(
        a: *mut *mut EVP_PKEY,
        pp: *mut *const ::libc::c_uchar,
        length: ::libc::c_long,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_PrivateKey(a: *const EVP_PKEY, pp: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_KeyParams(a: *const EVP_PKEY, pp: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_KeyParams(
        type_: ::libc::c_int,
        a: *mut *mut EVP_PKEY,
        pp: *mut *const ::libc::c_uchar,
        length: ::libc::c_long,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_KeyParams_bio(bp: *mut BIO, pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_KeyParams_bio(
        type_: ::libc::c_int,
        a: *mut *mut EVP_PKEY,
        in_: *mut BIO,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_copy_parameters(to: *mut EVP_PKEY, from: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_missing_parameters(pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_save_parameters(pkey: *mut EVP_PKEY, mode: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_parameters_eq(a: *const EVP_PKEY, b: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_eq(a: *const EVP_PKEY, b: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_cmp_parameters(a: *const EVP_PKEY, b: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_cmp(a: *const EVP_PKEY, b: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_print_public(
        out: *mut BIO,
        pkey: *const EVP_PKEY,
        indent: ::libc::c_int,
        pctx: *mut ASN1_PCTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_print_private(
        out: *mut BIO,
        pkey: *const EVP_PKEY,
        indent: ::libc::c_int,
        pctx: *mut ASN1_PCTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_print_params(
        out: *mut BIO,
        pkey: *const EVP_PKEY,
        indent: ::libc::c_int,
        pctx: *mut ASN1_PCTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_print_public_fp(
        fp: *mut FILE,
        pkey: *const EVP_PKEY,
        indent: ::libc::c_int,
        pctx: *mut ASN1_PCTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_print_private_fp(
        fp: *mut FILE,
        pkey: *const EVP_PKEY,
        indent: ::libc::c_int,
        pctx: *mut ASN1_PCTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_print_params_fp(
        fp: *mut FILE,
        pkey: *const EVP_PKEY,
        indent: ::libc::c_int,
        pctx: *mut ASN1_PCTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_default_digest_nid(
        pkey: *mut EVP_PKEY,
        pnid: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_default_digest_name(
        pkey: *mut EVP_PKEY,
        mdname: *mut ::libc::c_char,
        mdname_sz: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_digestsign_supports_digest(
        pkey: *mut EVP_PKEY,
        libctx: *mut OSSL_LIB_CTX,
        name: *const ::libc::c_char,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set1_encoded_public_key(
        pkey: *mut EVP_PKEY,
        pub_: *const ::libc::c_uchar,
        publen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get1_encoded_public_key(
        pkey: *mut EVP_PKEY,
        ppub: *mut *mut ::libc::c_uchar,
    ) -> usize;
}
extern "C" {
    pub fn EVP_CIPHER_param_to_asn1(c: *mut EVP_CIPHER_CTX, type_: *mut ASN1_TYPE)
        -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_asn1_to_param(c: *mut EVP_CIPHER_CTX, type_: *mut ASN1_TYPE)
        -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_set_asn1_iv(c: *mut EVP_CIPHER_CTX, type_: *mut ASN1_TYPE) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_get_asn1_iv(c: *mut EVP_CIPHER_CTX, type_: *mut ASN1_TYPE) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_PBE_keyivgen(
        ctx: *mut EVP_CIPHER_CTX,
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        param: *mut ASN1_TYPE,
        cipher: *const EVP_CIPHER,
        md: *const EVP_MD,
        en_de: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_PBE_keyivgen_ex(
        cctx: *mut EVP_CIPHER_CTX,
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        param: *mut ASN1_TYPE,
        cipher: *const EVP_CIPHER,
        md: *const EVP_MD,
        en_de: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_PBKDF2_HMAC_SHA1(
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        salt: *const ::libc::c_uchar,
        saltlen: ::libc::c_int,
        iter: ::libc::c_int,
        keylen: ::libc::c_int,
        out: *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_PBKDF2_HMAC(
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        salt: *const ::libc::c_uchar,
        saltlen: ::libc::c_int,
        iter: ::libc::c_int,
        digest: *const EVP_MD,
        keylen: ::libc::c_int,
        out: *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_v2_PBE_keyivgen(
        ctx: *mut EVP_CIPHER_CTX,
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        param: *mut ASN1_TYPE,
        cipher: *const EVP_CIPHER,
        md: *const EVP_MD,
        en_de: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_v2_PBE_keyivgen_ex(
        ctx: *mut EVP_CIPHER_CTX,
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        param: *mut ASN1_TYPE,
        cipher: *const EVP_CIPHER,
        md: *const EVP_MD,
        en_de: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PBE_scrypt(
        pass: *const ::libc::c_char,
        passlen: usize,
        salt: *const ::libc::c_uchar,
        saltlen: usize,
        N: u64,
        r: u64,
        p: u64,
        maxmem: u64,
        key: *mut ::libc::c_uchar,
        keylen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PBE_scrypt_ex(
        pass: *const ::libc::c_char,
        passlen: usize,
        salt: *const ::libc::c_uchar,
        saltlen: usize,
        N: u64,
        r: u64,
        p: u64,
        maxmem: u64,
        key: *mut ::libc::c_uchar,
        keylen: usize,
        ctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_v2_scrypt_keyivgen(
        ctx: *mut EVP_CIPHER_CTX,
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        param: *mut ASN1_TYPE,
        c: *const EVP_CIPHER,
        md: *const EVP_MD,
        en_de: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_v2_scrypt_keyivgen_ex(
        ctx: *mut EVP_CIPHER_CTX,
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        param: *mut ASN1_TYPE,
        c: *const EVP_CIPHER,
        md: *const EVP_MD,
        en_de: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_PBE_add();
}
extern "C" {
    pub fn EVP_PBE_CipherInit(
        pbe_obj: *mut ASN1_OBJECT,
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        param: *mut ASN1_TYPE,
        ctx: *mut EVP_CIPHER_CTX,
        en_de: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PBE_CipherInit_ex(
        pbe_obj: *mut ASN1_OBJECT,
        pass: *const ::libc::c_char,
        passlen: ::libc::c_int,
        param: *mut ASN1_TYPE,
        ctx: *mut EVP_CIPHER_CTX,
        en_de: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PBE_alg_add_type(
        pbe_type: ::libc::c_int,
        pbe_nid: ::libc::c_int,
        cipher_nid: ::libc::c_int,
        md_nid: ::libc::c_int,
        keygen: EVP_PBE_KEYGEN,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PBE_alg_add(
        nid: ::libc::c_int,
        cipher: *const EVP_CIPHER,
        md: *const EVP_MD,
        keygen: EVP_PBE_KEYGEN,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PBE_find(
        type_: ::libc::c_int,
        pbe_nid: ::libc::c_int,
        pcnid: *mut ::libc::c_int,
        pmnid: *mut ::libc::c_int,
        pkeygen: *mut EVP_PBE_KEYGEN,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PBE_find_ex(
        type_: ::libc::c_int,
        pbe_nid: ::libc::c_int,
        pcnid: *mut ::libc::c_int,
        pmnid: *mut ::libc::c_int,
        pkeygen: *mut EVP_PBE_KEYGEN,
        pkeygen_ex: *mut EVP_PBE_KEYGEN_EX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PBE_cleanup();
}
extern "C" {
    pub fn EVP_PBE_get(
        ptype: *mut ::libc::c_int,
        ppbe_nid: *mut ::libc::c_int,
        num: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_asn1_get_count() -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_asn1_get0(idx: ::libc::c_int) -> *const EVP_PKEY_ASN1_METHOD;
}
extern "C" {
    pub fn EVP_PKEY_asn1_find(
        pe: *mut *mut ENGINE,
        type_: ::libc::c_int,
    ) -> *const EVP_PKEY_ASN1_METHOD;
}
extern "C" {
    pub fn EVP_PKEY_asn1_find_str(
        pe: *mut *mut ENGINE,
        str_: *const ::libc::c_char,
        len: ::libc::c_int,
    ) -> *const EVP_PKEY_ASN1_METHOD;
}
extern "C" {
    pub fn EVP_PKEY_asn1_add0(ameth: *const EVP_PKEY_ASN1_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_asn1_add_alias(to: ::libc::c_int, from: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_asn1_get0_info(
        ppkey_id: *mut ::libc::c_int,
        pkey_base_id: *mut ::libc::c_int,
        ppkey_flags: *mut ::libc::c_int,
        pinfo: *mut *const ::libc::c_char,
        ppem_str: *mut *const ::libc::c_char,
        ameth: *const EVP_PKEY_ASN1_METHOD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0_asn1(pkey: *const EVP_PKEY) -> *const EVP_PKEY_ASN1_METHOD;
}
extern "C" {
    pub fn EVP_PKEY_asn1_new(
        id: ::libc::c_int,
        flags: ::libc::c_int,
        pem_str: *const ::libc::c_char,
        info: *const ::libc::c_char,
    ) -> *mut EVP_PKEY_ASN1_METHOD;
}
extern "C" {
    pub fn EVP_PKEY_asn1_copy(dst: *mut EVP_PKEY_ASN1_METHOD, src: *const EVP_PKEY_ASN1_METHOD);
}
extern "C" {
    pub fn EVP_PKEY_asn1_free(ameth: *mut EVP_PKEY_ASN1_METHOD);
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_public(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        pub_decode: ::std::option::Option<
            unsafe extern "C" fn(pk: *mut EVP_PKEY, pub_: *const X509_PUBKEY) -> ::libc::c_int,
        >,
        pub_encode: ::std::option::Option<
            unsafe extern "C" fn(pub_: *mut X509_PUBKEY, pk: *const EVP_PKEY) -> ::libc::c_int,
        >,
        pub_cmp: ::std::option::Option<
            unsafe extern "C" fn(a: *const EVP_PKEY, b: *const EVP_PKEY) -> ::libc::c_int,
        >,
        pub_print: ::std::option::Option<
            unsafe extern "C" fn(
                out: *mut BIO,
                pkey: *const EVP_PKEY,
                indent: ::libc::c_int,
                pctx: *mut ASN1_PCTX,
            ) -> ::libc::c_int,
        >,
        pkey_size: ::std::option::Option<
            unsafe extern "C" fn(pk: *const EVP_PKEY) -> ::libc::c_int,
        >,
        pkey_bits: ::std::option::Option<
            unsafe extern "C" fn(pk: *const EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_private(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        priv_decode: ::std::option::Option<
            unsafe extern "C" fn(
                pk: *mut EVP_PKEY,
                p8inf: *const PKCS8_PRIV_KEY_INFO,
            ) -> ::libc::c_int,
        >,
        priv_encode: ::std::option::Option<
            unsafe extern "C" fn(
                p8: *mut PKCS8_PRIV_KEY_INFO,
                pk: *const EVP_PKEY,
            ) -> ::libc::c_int,
        >,
        priv_print: ::std::option::Option<
            unsafe extern "C" fn(
                out: *mut BIO,
                pkey: *const EVP_PKEY,
                indent: ::libc::c_int,
                pctx: *mut ASN1_PCTX,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_param(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        param_decode: ::std::option::Option<
            unsafe extern "C" fn(
                pkey: *mut EVP_PKEY,
                pder: *mut *const ::libc::c_uchar,
                derlen: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
        param_encode: ::std::option::Option<
            unsafe extern "C" fn(
                pkey: *const EVP_PKEY,
                pder: *mut *mut ::libc::c_uchar,
            ) -> ::libc::c_int,
        >,
        param_missing: ::std::option::Option<
            unsafe extern "C" fn(pk: *const EVP_PKEY) -> ::libc::c_int,
        >,
        param_copy: ::std::option::Option<
            unsafe extern "C" fn(to: *mut EVP_PKEY, from: *const EVP_PKEY) -> ::libc::c_int,
        >,
        param_cmp: ::std::option::Option<
            unsafe extern "C" fn(a: *const EVP_PKEY, b: *const EVP_PKEY) -> ::libc::c_int,
        >,
        param_print: ::std::option::Option<
            unsafe extern "C" fn(
                out: *mut BIO,
                pkey: *const EVP_PKEY,
                indent: ::libc::c_int,
                pctx: *mut ASN1_PCTX,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_free(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        pkey_free: ::std::option::Option<unsafe extern "C" fn(pkey: *mut EVP_PKEY)>,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_ctrl(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        pkey_ctrl: ::std::option::Option<
            unsafe extern "C" fn(
                pkey: *mut EVP_PKEY,
                op: ::libc::c_int,
                arg1: ::libc::c_long,
                arg2: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_item(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        item_verify: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_MD_CTX,
                it: *const ASN1_ITEM,
                data: *const ::libc::c_void,
                a: *const X509_ALGOR,
                sig: *const ASN1_BIT_STRING,
                pkey: *mut EVP_PKEY,
            ) -> ::libc::c_int,
        >,
        item_sign: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_MD_CTX,
                it: *const ASN1_ITEM,
                data: *const ::libc::c_void,
                alg1: *mut X509_ALGOR,
                alg2: *mut X509_ALGOR,
                sig: *mut ASN1_BIT_STRING,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_siginf(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        siginf_set: ::std::option::Option<
            unsafe extern "C" fn(
                siginf: *mut X509_SIG_INFO,
                alg: *const X509_ALGOR,
                sig: *const ASN1_STRING,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_check(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        pkey_check: ::std::option::Option<
            unsafe extern "C" fn(pk: *const EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_public_check(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        pkey_pub_check: ::std::option::Option<
            unsafe extern "C" fn(pk: *const EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_param_check(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        pkey_param_check: ::std::option::Option<
            unsafe extern "C" fn(pk: *const EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_set_priv_key(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        set_priv_key: ::std::option::Option<
            unsafe extern "C" fn(
                pk: *mut EVP_PKEY,
                priv_: *const ::libc::c_uchar,
                len: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_set_pub_key(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        set_pub_key: ::std::option::Option<
            unsafe extern "C" fn(
                pk: *mut EVP_PKEY,
                pub_: *const ::libc::c_uchar,
                len: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_get_priv_key(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        get_priv_key: ::std::option::Option<
            unsafe extern "C" fn(
                pk: *const EVP_PKEY,
                priv_: *mut ::libc::c_uchar,
                len: *mut usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_get_pub_key(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        get_pub_key: ::std::option::Option<
            unsafe extern "C" fn(
                pk: *const EVP_PKEY,
                pub_: *mut ::libc::c_uchar,
                len: *mut usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_asn1_set_security_bits(
        ameth: *mut EVP_PKEY_ASN1_METHOD,
        pkey_security_bits: ::std::option::Option<
            unsafe extern "C" fn(pk: *const EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_signature_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *mut *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_signature_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set1_id(
        ctx: *mut EVP_PKEY_CTX,
        id: *const ::libc::c_void,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get1_id(ctx: *mut EVP_PKEY_CTX, id: *mut ::libc::c_void) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get1_id_len(ctx: *mut EVP_PKEY_CTX, id_len: *mut usize) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_kem_op(
        ctx: *mut EVP_PKEY_CTX,
        op: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0_type_name(key: *const EVP_PKEY) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_mac_key(
        ctx: *mut EVP_PKEY_CTX,
        key: *const ::libc::c_uchar,
        keylen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_meth_find(type_: ::libc::c_int) -> *const EVP_PKEY_METHOD;
}
extern "C" {
    pub fn EVP_PKEY_meth_new(id: ::libc::c_int, flags: ::libc::c_int) -> *mut EVP_PKEY_METHOD;
}
extern "C" {
    pub fn EVP_PKEY_meth_get0_info(
        ppkey_id: *mut ::libc::c_int,
        pflags: *mut ::libc::c_int,
        meth: *const EVP_PKEY_METHOD,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_copy(dst: *mut EVP_PKEY_METHOD, src: *const EVP_PKEY_METHOD);
}
extern "C" {
    pub fn EVP_PKEY_meth_free(pmeth: *mut EVP_PKEY_METHOD);
}
extern "C" {
    pub fn EVP_PKEY_meth_add0(pmeth: *const EVP_PKEY_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_meth_remove(pmeth: *const EVP_PKEY_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_meth_get_count() -> usize;
}
extern "C" {
    pub fn EVP_PKEY_meth_get0(idx: usize) -> *const EVP_PKEY_METHOD;
}
extern "C" {
    pub fn EVP_KEYMGMT_fetch(
        ctx: *mut OSSL_LIB_CTX,
        algorithm: *const ::libc::c_char,
        properties: *const ::libc::c_char,
    ) -> *mut EVP_KEYMGMT;
}
extern "C" {
    pub fn EVP_KEYMGMT_up_ref(keymgmt: *mut EVP_KEYMGMT) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_KEYMGMT_free(keymgmt: *mut EVP_KEYMGMT);
}
extern "C" {
    pub fn EVP_KEYMGMT_get0_provider(keymgmt: *const EVP_KEYMGMT) -> *const OSSL_PROVIDER;
}
extern "C" {
    pub fn EVP_KEYMGMT_get0_name(keymgmt: *const EVP_KEYMGMT) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_KEYMGMT_get0_description(keymgmt: *const EVP_KEYMGMT) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_KEYMGMT_is_a(
        keymgmt: *const EVP_KEYMGMT,
        name: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_KEYMGMT_do_all_provided(
        libctx: *mut OSSL_LIB_CTX,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(keymgmt: *mut EVP_KEYMGMT, arg: *mut ::libc::c_void),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_KEYMGMT_names_do_all(
        keymgmt: *const EVP_KEYMGMT,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(name: *const ::libc::c_char, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_KEYMGMT_gettable_params(keymgmt: *const EVP_KEYMGMT) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_KEYMGMT_settable_params(keymgmt: *const EVP_KEYMGMT) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_KEYMGMT_gen_settable_params(keymgmt: *const EVP_KEYMGMT) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_PKEY_CTX_new(pkey: *mut EVP_PKEY, e: *mut ENGINE) -> *mut EVP_PKEY_CTX;
}
extern "C" {
    pub fn EVP_PKEY_CTX_new_id(id: ::libc::c_int, e: *mut ENGINE) -> *mut EVP_PKEY_CTX;
}
extern "C" {
    pub fn EVP_PKEY_CTX_new_from_name(
        libctx: *mut OSSL_LIB_CTX,
        name: *const ::libc::c_char,
        propquery: *const ::libc::c_char,
    ) -> *mut EVP_PKEY_CTX;
}
extern "C" {
    pub fn EVP_PKEY_CTX_new_from_pkey(
        libctx: *mut OSSL_LIB_CTX,
        pkey: *mut EVP_PKEY,
        propquery: *const ::libc::c_char,
    ) -> *mut EVP_PKEY_CTX;
}
extern "C" {
    pub fn EVP_PKEY_CTX_dup(ctx: *const EVP_PKEY_CTX) -> *mut EVP_PKEY_CTX;
}
extern "C" {
    pub fn EVP_PKEY_CTX_free(ctx: *mut EVP_PKEY_CTX);
}
extern "C" {
    pub fn EVP_PKEY_CTX_is_a(
        ctx: *mut EVP_PKEY_CTX,
        keytype: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_params(
        ctx: *mut EVP_PKEY_CTX,
        params: *mut OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_gettable_params(ctx: *const EVP_PKEY_CTX) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_params(
        ctx: *mut EVP_PKEY_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_settable_params(ctx: *const EVP_PKEY_CTX) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_PKEY_CTX_ctrl(
        ctx: *mut EVP_PKEY_CTX,
        keytype: ::libc::c_int,
        optype: ::libc::c_int,
        cmd: ::libc::c_int,
        p1: ::libc::c_int,
        p2: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_ctrl_str(
        ctx: *mut EVP_PKEY_CTX,
        type_: *const ::libc::c_char,
        value: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_ctrl_uint64(
        ctx: *mut EVP_PKEY_CTX,
        keytype: ::libc::c_int,
        optype: ::libc::c_int,
        cmd: ::libc::c_int,
        value: u64,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_str2ctrl(
        ctx: *mut EVP_PKEY_CTX,
        cmd: ::libc::c_int,
        str_: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_hex2ctrl(
        ctx: *mut EVP_PKEY_CTX,
        cmd: ::libc::c_int,
        hex: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_md(
        ctx: *mut EVP_PKEY_CTX,
        optype: ::libc::c_int,
        cmd: ::libc::c_int,
        md: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_operation(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set0_keygen_info(
        ctx: *mut EVP_PKEY_CTX,
        dat: *mut ::libc::c_int,
        datlen: ::libc::c_int,
    );
}
extern "C" {
    pub fn EVP_PKEY_new_mac_key(
        type_: ::libc::c_int,
        e: *mut ENGINE,
        key: *const ::libc::c_uchar,
        keylen: ::libc::c_int,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_new_raw_private_key_ex(
        libctx: *mut OSSL_LIB_CTX,
        keytype: *const ::libc::c_char,
        propq: *const ::libc::c_char,
        priv_: *const ::libc::c_uchar,
        len: usize,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_new_raw_private_key(
        type_: ::libc::c_int,
        e: *mut ENGINE,
        priv_: *const ::libc::c_uchar,
        len: usize,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_new_raw_public_key_ex(
        libctx: *mut OSSL_LIB_CTX,
        keytype: *const ::libc::c_char,
        propq: *const ::libc::c_char,
        pub_: *const ::libc::c_uchar,
        len: usize,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_new_raw_public_key(
        type_: ::libc::c_int,
        e: *mut ENGINE,
        pub_: *const ::libc::c_uchar,
        len: usize,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_get_raw_private_key(
        pkey: *const EVP_PKEY,
        priv_: *mut ::libc::c_uchar,
        len: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_raw_public_key(
        pkey: *const EVP_PKEY,
        pub_: *mut ::libc::c_uchar,
        len: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_new_CMAC_key(
        e: *mut ENGINE,
        priv_: *const ::libc::c_uchar,
        len: usize,
        cipher: *const EVP_CIPHER,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_data(ctx: *mut EVP_PKEY_CTX, data: *mut ::libc::c_void);
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_data(ctx: *const EVP_PKEY_CTX) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_pkey(ctx: *mut EVP_PKEY_CTX) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_peerkey(ctx: *mut EVP_PKEY_CTX) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_app_data(ctx: *mut EVP_PKEY_CTX, data: *mut ::libc::c_void);
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_app_data(ctx: *mut EVP_PKEY_CTX) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn EVP_SIGNATURE_free(signature: *mut EVP_SIGNATURE);
}
extern "C" {
    pub fn EVP_SIGNATURE_up_ref(signature: *mut EVP_SIGNATURE) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_SIGNATURE_get0_provider(signature: *const EVP_SIGNATURE) -> *mut OSSL_PROVIDER;
}
extern "C" {
    pub fn EVP_SIGNATURE_fetch(
        ctx: *mut OSSL_LIB_CTX,
        algorithm: *const ::libc::c_char,
        properties: *const ::libc::c_char,
    ) -> *mut EVP_SIGNATURE;
}
extern "C" {
    pub fn EVP_SIGNATURE_is_a(
        signature: *const EVP_SIGNATURE,
        name: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_SIGNATURE_get0_name(signature: *const EVP_SIGNATURE) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_SIGNATURE_get0_description(signature: *const EVP_SIGNATURE)
        -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_SIGNATURE_do_all_provided(
        libctx: *mut OSSL_LIB_CTX,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(signature: *mut EVP_SIGNATURE, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_SIGNATURE_names_do_all(
        signature: *const EVP_SIGNATURE,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(name: *const ::libc::c_char, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_SIGNATURE_gettable_ctx_params(sig: *const EVP_SIGNATURE) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_SIGNATURE_settable_ctx_params(sig: *const EVP_SIGNATURE) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_free(cipher: *mut EVP_ASYM_CIPHER);
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_up_ref(cipher: *mut EVP_ASYM_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_get0_provider(cipher: *const EVP_ASYM_CIPHER) -> *mut OSSL_PROVIDER;
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_fetch(
        ctx: *mut OSSL_LIB_CTX,
        algorithm: *const ::libc::c_char,
        properties: *const ::libc::c_char,
    ) -> *mut EVP_ASYM_CIPHER;
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_is_a(
        cipher: *const EVP_ASYM_CIPHER,
        name: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_get0_name(cipher: *const EVP_ASYM_CIPHER) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_get0_description(
        cipher: *const EVP_ASYM_CIPHER,
    ) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_do_all_provided(
        libctx: *mut OSSL_LIB_CTX,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(cipher: *mut EVP_ASYM_CIPHER, arg: *mut ::libc::c_void),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_names_do_all(
        cipher: *const EVP_ASYM_CIPHER,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(name: *const ::libc::c_char, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_gettable_ctx_params(ciph: *const EVP_ASYM_CIPHER) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_ASYM_CIPHER_settable_ctx_params(ciph: *const EVP_ASYM_CIPHER) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_KEM_free(wrap: *mut EVP_KEM);
}
extern "C" {
    pub fn EVP_KEM_up_ref(wrap: *mut EVP_KEM) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_KEM_get0_provider(wrap: *const EVP_KEM) -> *mut OSSL_PROVIDER;
}
extern "C" {
    pub fn EVP_KEM_fetch(
        ctx: *mut OSSL_LIB_CTX,
        algorithm: *const ::libc::c_char,
        properties: *const ::libc::c_char,
    ) -> *mut EVP_KEM;
}
extern "C" {
    pub fn EVP_KEM_is_a(wrap: *const EVP_KEM, name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_KEM_get0_name(wrap: *const EVP_KEM) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_KEM_get0_description(wrap: *const EVP_KEM) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_KEM_do_all_provided(
        libctx: *mut OSSL_LIB_CTX,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(wrap: *mut EVP_KEM, arg: *mut ::libc::c_void),
        >,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_KEM_names_do_all(
        wrap: *const EVP_KEM,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(name: *const ::libc::c_char, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_KEM_gettable_ctx_params(kem: *const EVP_KEM) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_KEM_settable_ctx_params(kem: *const EVP_KEM) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_PKEY_sign_init(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_sign_init_ex(
        ctx: *mut EVP_PKEY_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_sign(
        ctx: *mut EVP_PKEY_CTX,
        sig: *mut ::libc::c_uchar,
        siglen: *mut usize,
        tbs: *const ::libc::c_uchar,
        tbslen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_verify_init(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_verify_init_ex(
        ctx: *mut EVP_PKEY_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_verify(
        ctx: *mut EVP_PKEY_CTX,
        sig: *const ::libc::c_uchar,
        siglen: usize,
        tbs: *const ::libc::c_uchar,
        tbslen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_verify_recover_init(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_verify_recover_init_ex(
        ctx: *mut EVP_PKEY_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_verify_recover(
        ctx: *mut EVP_PKEY_CTX,
        rout: *mut ::libc::c_uchar,
        routlen: *mut usize,
        sig: *const ::libc::c_uchar,
        siglen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_encrypt_init(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_encrypt_init_ex(
        ctx: *mut EVP_PKEY_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_encrypt(
        ctx: *mut EVP_PKEY_CTX,
        out: *mut ::libc::c_uchar,
        outlen: *mut usize,
        in_: *const ::libc::c_uchar,
        inlen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_decrypt_init(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_decrypt_init_ex(
        ctx: *mut EVP_PKEY_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_decrypt(
        ctx: *mut EVP_PKEY_CTX,
        out: *mut ::libc::c_uchar,
        outlen: *mut usize,
        in_: *const ::libc::c_uchar,
        inlen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_derive_init(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_derive_init_ex(
        ctx: *mut EVP_PKEY_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_derive_set_peer_ex(
        ctx: *mut EVP_PKEY_CTX,
        peer: *mut EVP_PKEY,
        validate_peer: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_derive_set_peer(ctx: *mut EVP_PKEY_CTX, peer: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_derive(
        ctx: *mut EVP_PKEY_CTX,
        key: *mut ::libc::c_uchar,
        keylen: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_encapsulate_init(
        ctx: *mut EVP_PKEY_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_encapsulate(
        ctx: *mut EVP_PKEY_CTX,
        wrappedkey: *mut ::libc::c_uchar,
        wrappedkeylen: *mut usize,
        genkey: *mut ::libc::c_uchar,
        genkeylen: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_decapsulate_init(
        ctx: *mut EVP_PKEY_CTX,
        params: *const OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_decapsulate(
        ctx: *mut EVP_PKEY_CTX,
        unwrapped: *mut ::libc::c_uchar,
        unwrappedlen: *mut usize,
        wrapped: *const ::libc::c_uchar,
        wrappedlen: usize,
    ) -> ::libc::c_int;
}
pub type EVP_PKEY_gen_cb =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int>;
extern "C" {
    pub fn EVP_PKEY_fromdata_init(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_fromdata(
        ctx: *mut EVP_PKEY_CTX,
        ppkey: *mut *mut EVP_PKEY,
        selection: ::libc::c_int,
        param: *mut OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_fromdata_settable(
        ctx: *mut EVP_PKEY_CTX,
        selection: ::libc::c_int,
    ) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_PKEY_todata(
        pkey: *const EVP_PKEY,
        selection: ::libc::c_int,
        params: *mut *mut OSSL_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_export(
        pkey: *const EVP_PKEY,
        selection: ::libc::c_int,
        export_cb: OSSL_CALLBACK,
        export_cbarg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_gettable_params(pkey: *const EVP_PKEY) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_PKEY_get_params(pkey: *const EVP_PKEY, params: *mut OSSL_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_int_param(
        pkey: *const EVP_PKEY,
        key_name: *const ::libc::c_char,
        out: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_size_t_param(
        pkey: *const EVP_PKEY,
        key_name: *const ::libc::c_char,
        out: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_bn_param(
        pkey: *const EVP_PKEY,
        key_name: *const ::libc::c_char,
        bn: *mut *mut BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_utf8_string_param(
        pkey: *const EVP_PKEY,
        key_name: *const ::libc::c_char,
        str_: *mut ::libc::c_char,
        max_buf_sz: usize,
        out_sz: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_octet_string_param(
        pkey: *const EVP_PKEY,
        key_name: *const ::libc::c_char,
        buf: *mut ::libc::c_uchar,
        max_buf_sz: usize,
        out_sz: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_settable_params(pkey: *const EVP_PKEY) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_PKEY_set_params(pkey: *mut EVP_PKEY, params: *mut OSSL_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set_int_param(
        pkey: *mut EVP_PKEY,
        key_name: *const ::libc::c_char,
        in_: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set_size_t_param(
        pkey: *mut EVP_PKEY,
        key_name: *const ::libc::c_char,
        in_: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set_bn_param(
        pkey: *mut EVP_PKEY,
        key_name: *const ::libc::c_char,
        bn: *const BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set_utf8_string_param(
        pkey: *mut EVP_PKEY,
        key_name: *const ::libc::c_char,
        str_: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set_octet_string_param(
        pkey: *mut EVP_PKEY,
        key_name: *const ::libc::c_char,
        buf: *const ::libc::c_uchar,
        bsize: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_ec_point_conv_form(pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_field_type(pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_Q_keygen(
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
        type_: *const ::libc::c_char,
        ...
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_paramgen_init(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_paramgen(ctx: *mut EVP_PKEY_CTX, ppkey: *mut *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_keygen_init(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_keygen(ctx: *mut EVP_PKEY_CTX, ppkey: *mut *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_generate(ctx: *mut EVP_PKEY_CTX, ppkey: *mut *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_check(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_public_check(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_public_check_quick(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_param_check(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_param_check_quick(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_private_check(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_pairwise_check(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set_ex_data(
        key: *mut EVP_PKEY,
        idx: ::libc::c_int,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_ex_data(key: *const EVP_PKEY, idx: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_cb(ctx: *mut EVP_PKEY_CTX, cb: EVP_PKEY_gen_cb);
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_cb(ctx: *mut EVP_PKEY_CTX) -> EVP_PKEY_gen_cb;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_keygen_info(
        ctx: *mut EVP_PKEY_CTX,
        idx: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_meth_set_init(
        pmeth: *mut EVP_PKEY_METHOD,
        init: ::std::option::Option<unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int>,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_copy(
        pmeth: *mut EVP_PKEY_METHOD,
        copy: ::std::option::Option<
            unsafe extern "C" fn(dst: *mut EVP_PKEY_CTX, src: *const EVP_PKEY_CTX) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_cleanup(
        pmeth: *mut EVP_PKEY_METHOD,
        cleanup: ::std::option::Option<unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX)>,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_paramgen(
        pmeth: *mut EVP_PKEY_METHOD,
        paramgen_init: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        paramgen: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX, pkey: *mut EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_keygen(
        pmeth: *mut EVP_PKEY_METHOD,
        keygen_init: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        keygen: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX, pkey: *mut EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_sign(
        pmeth: *mut EVP_PKEY_METHOD,
        sign_init: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        sign: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                sig: *mut ::libc::c_uchar,
                siglen: *mut usize,
                tbs: *const ::libc::c_uchar,
                tbslen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_verify(
        pmeth: *mut EVP_PKEY_METHOD,
        verify_init: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        verify: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                sig: *const ::libc::c_uchar,
                siglen: usize,
                tbs: *const ::libc::c_uchar,
                tbslen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_verify_recover(
        pmeth: *mut EVP_PKEY_METHOD,
        verify_recover_init: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        verify_recover: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                sig: *mut ::libc::c_uchar,
                siglen: *mut usize,
                tbs: *const ::libc::c_uchar,
                tbslen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_signctx(
        pmeth: *mut EVP_PKEY_METHOD,
        signctx_init: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX, mctx: *mut EVP_MD_CTX) -> ::libc::c_int,
        >,
        signctx: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                sig: *mut ::libc::c_uchar,
                siglen: *mut usize,
                mctx: *mut EVP_MD_CTX,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_verifyctx(
        pmeth: *mut EVP_PKEY_METHOD,
        verifyctx_init: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX, mctx: *mut EVP_MD_CTX) -> ::libc::c_int,
        >,
        verifyctx: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                sig: *const ::libc::c_uchar,
                siglen: ::libc::c_int,
                mctx: *mut EVP_MD_CTX,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_encrypt(
        pmeth: *mut EVP_PKEY_METHOD,
        encrypt_init: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        encryptfn: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                out: *mut ::libc::c_uchar,
                outlen: *mut usize,
                in_: *const ::libc::c_uchar,
                inlen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_decrypt(
        pmeth: *mut EVP_PKEY_METHOD,
        decrypt_init: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        decrypt: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                out: *mut ::libc::c_uchar,
                outlen: *mut usize,
                in_: *const ::libc::c_uchar,
                inlen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_derive(
        pmeth: *mut EVP_PKEY_METHOD,
        derive_init: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        derive: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                key: *mut ::libc::c_uchar,
                keylen: *mut usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_ctrl(
        pmeth: *mut EVP_PKEY_METHOD,
        ctrl: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                type_: ::libc::c_int,
                p1: ::libc::c_int,
                p2: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
        ctrl_str: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                type_: *const ::libc::c_char,
                value: *const ::libc::c_char,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_digestsign(
        pmeth: *mut EVP_PKEY_METHOD,
        digestsign: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_MD_CTX,
                sig: *mut ::libc::c_uchar,
                siglen: *mut usize,
                tbs: *const ::libc::c_uchar,
                tbslen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_digestverify(
        pmeth: *mut EVP_PKEY_METHOD,
        digestverify: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_MD_CTX,
                sig: *const ::libc::c_uchar,
                siglen: usize,
                tbs: *const ::libc::c_uchar,
                tbslen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_check(
        pmeth: *mut EVP_PKEY_METHOD,
        check: ::std::option::Option<unsafe extern "C" fn(pkey: *mut EVP_PKEY) -> ::libc::c_int>,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_public_check(
        pmeth: *mut EVP_PKEY_METHOD,
        check: ::std::option::Option<unsafe extern "C" fn(pkey: *mut EVP_PKEY) -> ::libc::c_int>,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_param_check(
        pmeth: *mut EVP_PKEY_METHOD,
        check: ::std::option::Option<unsafe extern "C" fn(pkey: *mut EVP_PKEY) -> ::libc::c_int>,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_set_digest_custom(
        pmeth: *mut EVP_PKEY_METHOD,
        digest_custom: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX, mctx: *mut EVP_MD_CTX) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_init(
        pmeth: *const EVP_PKEY_METHOD,
        pinit: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_copy(
        pmeth: *const EVP_PKEY_METHOD,
        pcopy: *mut ::std::option::Option<
            unsafe extern "C" fn(dst: *mut EVP_PKEY_CTX, src: *const EVP_PKEY_CTX) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_cleanup(
        pmeth: *const EVP_PKEY_METHOD,
        pcleanup: *mut ::std::option::Option<unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX)>,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_paramgen(
        pmeth: *const EVP_PKEY_METHOD,
        pparamgen_init: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        pparamgen: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX, pkey: *mut EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_keygen(
        pmeth: *const EVP_PKEY_METHOD,
        pkeygen_init: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        pkeygen: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX, pkey: *mut EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_sign(
        pmeth: *const EVP_PKEY_METHOD,
        psign_init: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        psign: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                sig: *mut ::libc::c_uchar,
                siglen: *mut usize,
                tbs: *const ::libc::c_uchar,
                tbslen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_verify(
        pmeth: *const EVP_PKEY_METHOD,
        pverify_init: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        pverify: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                sig: *const ::libc::c_uchar,
                siglen: usize,
                tbs: *const ::libc::c_uchar,
                tbslen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_verify_recover(
        pmeth: *const EVP_PKEY_METHOD,
        pverify_recover_init: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        pverify_recover: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                sig: *mut ::libc::c_uchar,
                siglen: *mut usize,
                tbs: *const ::libc::c_uchar,
                tbslen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_signctx(
        pmeth: *const EVP_PKEY_METHOD,
        psignctx_init: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX, mctx: *mut EVP_MD_CTX) -> ::libc::c_int,
        >,
        psignctx: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                sig: *mut ::libc::c_uchar,
                siglen: *mut usize,
                mctx: *mut EVP_MD_CTX,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_verifyctx(
        pmeth: *const EVP_PKEY_METHOD,
        pverifyctx_init: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX, mctx: *mut EVP_MD_CTX) -> ::libc::c_int,
        >,
        pverifyctx: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                sig: *const ::libc::c_uchar,
                siglen: ::libc::c_int,
                mctx: *mut EVP_MD_CTX,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_encrypt(
        pmeth: *const EVP_PKEY_METHOD,
        pencrypt_init: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        pencryptfn: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                out: *mut ::libc::c_uchar,
                outlen: *mut usize,
                in_: *const ::libc::c_uchar,
                inlen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_decrypt(
        pmeth: *const EVP_PKEY_METHOD,
        pdecrypt_init: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        pdecrypt: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                out: *mut ::libc::c_uchar,
                outlen: *mut usize,
                in_: *const ::libc::c_uchar,
                inlen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_derive(
        pmeth: *const EVP_PKEY_METHOD,
        pderive_init: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int,
        >,
        pderive: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                key: *mut ::libc::c_uchar,
                keylen: *mut usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_ctrl(
        pmeth: *const EVP_PKEY_METHOD,
        pctrl: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                type_: ::libc::c_int,
                p1: ::libc::c_int,
                p2: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
        pctrl_str: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_PKEY_CTX,
                type_: *const ::libc::c_char,
                value: *const ::libc::c_char,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_digestsign(
        pmeth: *const EVP_PKEY_METHOD,
        digestsign: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_MD_CTX,
                sig: *mut ::libc::c_uchar,
                siglen: *mut usize,
                tbs: *const ::libc::c_uchar,
                tbslen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_digestverify(
        pmeth: *const EVP_PKEY_METHOD,
        digestverify: *mut ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut EVP_MD_CTX,
                sig: *const ::libc::c_uchar,
                siglen: usize,
                tbs: *const ::libc::c_uchar,
                tbslen: usize,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_check(
        pmeth: *const EVP_PKEY_METHOD,
        pcheck: *mut ::std::option::Option<
            unsafe extern "C" fn(pkey: *mut EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_public_check(
        pmeth: *const EVP_PKEY_METHOD,
        pcheck: *mut ::std::option::Option<
            unsafe extern "C" fn(pkey: *mut EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_param_check(
        pmeth: *const EVP_PKEY_METHOD,
        pcheck: *mut ::std::option::Option<
            unsafe extern "C" fn(pkey: *mut EVP_PKEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_meth_get_digest_custom(
        pmeth: *const EVP_PKEY_METHOD,
        pdigest_custom: *mut ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut EVP_PKEY_CTX, mctx: *mut EVP_MD_CTX) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_KEYEXCH_free(exchange: *mut EVP_KEYEXCH);
}
extern "C" {
    pub fn EVP_KEYEXCH_up_ref(exchange: *mut EVP_KEYEXCH) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_KEYEXCH_fetch(
        ctx: *mut OSSL_LIB_CTX,
        algorithm: *const ::libc::c_char,
        properties: *const ::libc::c_char,
    ) -> *mut EVP_KEYEXCH;
}
extern "C" {
    pub fn EVP_KEYEXCH_get0_provider(exchange: *const EVP_KEYEXCH) -> *mut OSSL_PROVIDER;
}
extern "C" {
    pub fn EVP_KEYEXCH_is_a(
        keyexch: *const EVP_KEYEXCH,
        name: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_KEYEXCH_get0_name(keyexch: *const EVP_KEYEXCH) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_KEYEXCH_get0_description(keyexch: *const EVP_KEYEXCH) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_KEYEXCH_do_all_provided(
        libctx: *mut OSSL_LIB_CTX,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(keyexch: *mut EVP_KEYEXCH, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn EVP_KEYEXCH_names_do_all(
        keyexch: *const EVP_KEYEXCH,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(name: *const ::libc::c_char, data: *mut ::libc::c_void),
        >,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_KEYEXCH_gettable_ctx_params(keyexch: *const EVP_KEYEXCH) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_KEYEXCH_settable_ctx_params(keyexch: *const EVP_KEYEXCH) -> *const OSSL_PARAM;
}
extern "C" {
    pub fn EVP_add_alg_module();
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_group_name(
        ctx: *mut EVP_PKEY_CTX,
        name: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_group_name(
        ctx: *mut EVP_PKEY_CTX,
        name: *mut ::libc::c_char,
        namelen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_group_name(
        pkey: *const EVP_PKEY,
        name: *mut ::libc::c_char,
        name_sz: usize,
        gname_len: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_libctx(ctx: *mut EVP_PKEY_CTX) -> *mut OSSL_LIB_CTX;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_propq(ctx: *const EVP_PKEY_CTX) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_provider(ctx: *const EVP_PKEY_CTX) -> *const OSSL_PROVIDER;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_TEMPLATE_st {
    pub flags: ::libc::c_ulong,
    pub tag: ::libc::c_long,
    pub offset: ::libc::c_ulong,
    pub field_name: *const ::libc::c_char,
    pub item: ASN1_ITEM_EXP,
}
pub type ASN1_ADB_TABLE = ASN1_ADB_TABLE_st;
pub type ASN1_ADB = ASN1_ADB_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_ADB_st {
    pub flags: ::libc::c_ulong,
    pub offset: ::libc::c_ulong,
    pub adb_cb:
        ::std::option::Option<unsafe extern "C" fn(psel: *mut ::libc::c_long) -> ::libc::c_int>,
    pub tbl: *const ASN1_ADB_TABLE,
    pub tblcount: ::libc::c_long,
    pub default_tt: *const ASN1_TEMPLATE,
    pub null_tt: *const ASN1_TEMPLATE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_ADB_TABLE_st {
    pub value: ::libc::c_long,
    pub tt: ASN1_TEMPLATE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_ITEM_st {
    pub itype: ::libc::c_char,
    pub utype: ::libc::c_long,
    pub templates: *const ASN1_TEMPLATE,
    pub tcount: ::libc::c_long,
    pub funcs: *const ::libc::c_void,
    pub size: ::libc::c_long,
    pub sname: *const ::libc::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_TLC_st {
    pub valid: ::libc::c_char,
    pub ret: ::libc::c_int,
    pub plen: ::libc::c_long,
    pub ptag: ::libc::c_int,
    pub pclass: ::libc::c_int,
    pub hdrlen: ::libc::c_int,
}
pub type ASN1_ex_d2i = ::std::option::Option<
    unsafe extern "C" fn(
        pval: *mut *mut ASN1_VALUE,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
        it: *const ASN1_ITEM,
        tag: ::libc::c_int,
        aclass: ::libc::c_int,
        opt: ::libc::c_char,
        ctx: *mut ASN1_TLC,
    ) -> ::libc::c_int,
>;
pub type ASN1_ex_d2i_ex = ::std::option::Option<
    unsafe extern "C" fn(
        pval: *mut *mut ASN1_VALUE,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
        it: *const ASN1_ITEM,
        tag: ::libc::c_int,
        aclass: ::libc::c_int,
        opt: ::libc::c_char,
        ctx: *mut ASN1_TLC,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int,
>;
pub type ASN1_ex_i2d = ::std::option::Option<
    unsafe extern "C" fn(
        pval: *mut *const ASN1_VALUE,
        out: *mut *mut ::libc::c_uchar,
        it: *const ASN1_ITEM,
        tag: ::libc::c_int,
        aclass: ::libc::c_int,
    ) -> ::libc::c_int,
>;
pub type ASN1_ex_new_func = ::std::option::Option<
    unsafe extern "C" fn(pval: *mut *mut ASN1_VALUE, it: *const ASN1_ITEM) -> ::libc::c_int,
>;
pub type ASN1_ex_new_ex_func = ::std::option::Option<
    unsafe extern "C" fn(
        pval: *mut *mut ASN1_VALUE,
        it: *const ASN1_ITEM,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int,
>;
pub type ASN1_ex_free_func =
    ::std::option::Option<unsafe extern "C" fn(pval: *mut *mut ASN1_VALUE, it: *const ASN1_ITEM)>;
pub type ASN1_ex_print_func = ::std::option::Option<
    unsafe extern "C" fn(
        out: *mut BIO,
        pval: *mut *const ASN1_VALUE,
        indent: ::libc::c_int,
        fname: *const ::libc::c_char,
        pctx: *const ASN1_PCTX,
    ) -> ::libc::c_int,
>;
pub type ASN1_primitive_i2c = ::std::option::Option<
    unsafe extern "C" fn(
        pval: *mut *const ASN1_VALUE,
        cont: *mut ::libc::c_uchar,
        putype: *mut ::libc::c_int,
        it: *const ASN1_ITEM,
    ) -> ::libc::c_int,
>;
pub type ASN1_primitive_c2i = ::std::option::Option<
    unsafe extern "C" fn(
        pval: *mut *mut ASN1_VALUE,
        cont: *const ::libc::c_uchar,
        len: ::libc::c_int,
        utype: ::libc::c_int,
        free_cont: *mut ::libc::c_char,
        it: *const ASN1_ITEM,
    ) -> ::libc::c_int,
>;
pub type ASN1_primitive_print = ::std::option::Option<
    unsafe extern "C" fn(
        out: *mut BIO,
        pval: *mut *const ASN1_VALUE,
        it: *const ASN1_ITEM,
        indent: ::libc::c_int,
        pctx: *const ASN1_PCTX,
    ) -> ::libc::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_EXTERN_FUNCS_st {
    pub app_data: *mut ::libc::c_void,
    pub asn1_ex_new: ASN1_ex_new_func,
    pub asn1_ex_free: ASN1_ex_free_func,
    pub asn1_ex_clear: ASN1_ex_free_func,
    pub asn1_ex_d2i: ASN1_ex_d2i,
    pub asn1_ex_i2d: ASN1_ex_i2d,
    pub asn1_ex_print: ASN1_ex_print_func,
    pub asn1_ex_new_ex: ASN1_ex_new_ex_func,
    pub asn1_ex_d2i_ex: ASN1_ex_d2i_ex,
}
pub type ASN1_EXTERN_FUNCS = ASN1_EXTERN_FUNCS_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_PRIMITIVE_FUNCS_st {
    pub app_data: *mut ::libc::c_void,
    pub flags: ::libc::c_ulong,
    pub prim_new: ASN1_ex_new_func,
    pub prim_free: ASN1_ex_free_func,
    pub prim_clear: ASN1_ex_free_func,
    pub prim_c2i: ASN1_primitive_c2i,
    pub prim_i2c: ASN1_primitive_i2c,
    pub prim_print: ASN1_primitive_print,
}
pub type ASN1_PRIMITIVE_FUNCS = ASN1_PRIMITIVE_FUNCS_st;
pub type ASN1_aux_cb = ::std::option::Option<
    unsafe extern "C" fn(
        operation: ::libc::c_int,
        in_: *mut *mut ASN1_VALUE,
        it: *const ASN1_ITEM,
        exarg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type ASN1_aux_const_cb = ::std::option::Option<
    unsafe extern "C" fn(
        operation: ::libc::c_int,
        in_: *mut *const ASN1_VALUE,
        it: *const ASN1_ITEM,
        exarg: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_AUX_st {
    pub app_data: *mut ::libc::c_void,
    pub flags: ::libc::c_int,
    pub ref_offset: ::libc::c_int,
    pub ref_lock: ::libc::c_int,
    pub asn1_cb: ASN1_aux_cb,
    pub enc_offset: ::libc::c_int,
    pub asn1_const_cb: ASN1_aux_const_cb,
}
pub type ASN1_AUX = ASN1_AUX_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_PRINT_ARG_st {
    pub out: *mut BIO,
    pub indent: ::libc::c_int,
    pub pctx: *const ASN1_PCTX,
}
pub type ASN1_PRINT_ARG = ASN1_PRINT_ARG_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_STREAM_ARG_st {
    pub out: *mut BIO,
    pub ndef_bio: *mut BIO,
    pub boundary: *mut *mut ::libc::c_uchar,
}
pub type ASN1_STREAM_ARG = ASN1_STREAM_ARG_st;
extern "C" {
    pub fn ASN1_BOOLEAN_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_TBOOLEAN_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_FBOOLEAN_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_SEQUENCE_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn CBIGNUM_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn BIGNUM_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn INT32_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ZINT32_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn UINT32_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ZUINT32_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn INT64_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ZINT64_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn UINT64_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ZUINT64_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn LONG_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ZLONG_it() -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_VALUE {
    _unused: [u8; 0],
}
pub type sk_ASN1_VALUE_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const ASN1_VALUE, b: *const *const ASN1_VALUE) -> ::libc::c_int,
>;
pub type sk_ASN1_VALUE_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut ASN1_VALUE)>;
pub type sk_ASN1_VALUE_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const ASN1_VALUE) -> *mut ASN1_VALUE>;
extern "C" {
    pub fn ASN1_item_ex_new(pval: *mut *mut ASN1_VALUE, it: *const ASN1_ITEM) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_ex_free(pval: *mut *mut ASN1_VALUE, it: *const ASN1_ITEM);
}
extern "C" {
    pub fn ASN1_item_ex_d2i(
        pval: *mut *mut ASN1_VALUE,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
        it: *const ASN1_ITEM,
        tag: ::libc::c_int,
        aclass: ::libc::c_int,
        opt: ::libc::c_char,
        ctx: *mut ASN1_TLC,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_ex_i2d(
        pval: *mut *const ASN1_VALUE,
        out: *mut *mut ::libc::c_uchar,
        it: *const ASN1_ITEM,
        tag: ::libc::c_int,
        aclass: ::libc::c_int,
    ) -> ::libc::c_int;
}
pub type _ino_t = ::libc::c_ushort;
pub type ino_t = _ino_t;
pub type _dev_t = ::libc::c_uint;
pub type dev_t = _dev_t;
pub type _off_t = ::libc::c_long;
pub type off_t = _off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buf_mem_st {
    pub length: usize,
    pub data: *mut ::libc::c_char,
    pub max: usize,
    pub flags: ::libc::c_ulong,
}
extern "C" {
    pub fn BUF_MEM_new() -> *mut BUF_MEM;
}
extern "C" {
    pub fn BUF_MEM_new_ex(flags: ::libc::c_ulong) -> *mut BUF_MEM;
}
extern "C" {
    pub fn BUF_MEM_free(a: *mut BUF_MEM);
}
extern "C" {
    pub fn BUF_MEM_grow(str_: *mut BUF_MEM, len: usize) -> usize;
}
extern "C" {
    pub fn BUF_MEM_grow_clean(str_: *mut BUF_MEM, len: usize) -> usize;
}
extern "C" {
    pub fn BUF_reverse(out: *mut ::libc::c_uchar, in_: *const ::libc::c_uchar, siz: usize);
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::libc::c_void,
        _Val: ::libc::c_int,
        _MaxCount: ::libc::c_ulonglong,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::libc::c_void,
        _Buf2: *const ::libc::c_void,
        _Size: ::libc::c_ulonglong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::libc::c_void,
        _Src: *const ::libc::c_void,
        _Size: ::libc::c_ulonglong,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::libc::c_void,
        _Src: *const ::libc::c_void,
        _Size: ::libc::c_ulonglong,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::libc::c_void,
        _Val: ::libc::c_int,
        _Size: ::libc::c_ulonglong,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn strchr(_Str: *const ::libc::c_char, _Val: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strrchr(_Str: *const ::libc::c_char, _Ch: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::libc::c_char,
        _SubStr: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn wcschr(_Str: *const ::libc::c_ushort, _Ch: ::libc::c_ushort) -> *mut ::libc::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::libc::c_void,
        _Buf2: *const ::libc::c_void,
        _Size: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::libc::c_void,
        _Buf2: *const ::libc::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::libc::c_void,
        _Src: *const ::libc::c_void,
        _Val: ::libc::c_int,
        _Size: ::libc::c_ulonglong,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::libc::c_void,
        _Buf2: *const ::libc::c_void,
        _Size: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        _String1: *const ::libc::c_ushort,
        _String2: *const ::libc::c_ushort,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcslen(_String: *const ::libc::c_ushort) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const ::libc::c_ushort,
        _String2: *const ::libc::c_ushort,
        _MaxCount: ::libc::c_ulonglong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::libc::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorNumber: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: usize,
        _Value: wchar_t,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: usize, _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(_Destination: *mut wchar_t, _Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::libc::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::libc::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::libc::c_char,
        _SizeInBytes: usize,
        _ErrorNumber: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::libc::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::libc::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::libc::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::libc::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut ::libc::c_char,
        _Delimiter: *const ::libc::c_char,
        _Context: *mut *mut ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::libc::c_void,
        _Src: *const ::libc::c_void,
        _Val: ::libc::c_int,
        _MaxCount: usize,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn strcat(
        _Destination: *mut ::libc::c_char,
        _Source: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strcmp(_Str1: *const ::libc::c_char, _Str2: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strcoll(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strcpy(
        _Destination: *mut ::libc::c_char,
        _Source: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::libc::c_char,
        _Control: *const ::libc::c_char,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _strdup(_Source: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::libc::c_char,
        _SizeInBytes: usize,
        _ErrorMessage: *const ::libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _stricmp(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _stricoll(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::libc::c_char) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::libc::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(_String: *mut ::libc::c_char, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(_String: *mut ::libc::c_char, _Locale: _locale_t) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut ::libc::c_char,
        _Source: *const ::libc::c_char,
        _Count: ::libc::c_ulonglong,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::libc::c_char,
        _Str2: *const ::libc::c_char,
        _MaxCount: ::libc::c_ulonglong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
        _MaxCount: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
        _MaxCount: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
        _MaxCount: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::libc::c_char, _Count: usize) -> usize;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut ::libc::c_char,
        _Source: *const ::libc::c_char,
        _Count: ::libc::c_ulonglong,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::libc::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut ::libc::c_char,
        _SizeInBytes: usize,
        _Value: ::libc::c_int,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut ::libc::c_char,
        _Value: ::libc::c_int,
        _Count: usize,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::libc::c_char,
        _Control: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::libc::c_char,
        _DestinationSize: usize,
        _Value: ::libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(_Destination: *mut ::libc::c_char, _Value: ::libc::c_int)
        -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::libc::c_char,
        _Control: *const ::libc::c_char,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn strtok(
        _String: *mut ::libc::c_char,
        _Delimiter: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::libc::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _strupr_s_l(_String: *mut ::libc::c_char, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(_String: *mut ::libc::c_char, _Locale: _locale_t) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::libc::c_char,
        _Source: *const ::libc::c_char,
        _MaxCount: ::libc::c_ulonglong,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::libc::c_char,
        _Source: *const ::libc::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(_String: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strcmpi(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn stricmp(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const ::libc::c_char,
        _String2: *const ::libc::c_char,
        _MaxCount: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut ::libc::c_char,
        _Value: ::libc::c_int,
        _MaxCount: usize,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strset(_String: *mut ::libc::c_char, _Value: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_ec_paramgen_curve_nid(
        ctx: *mut EVP_PKEY_CTX,
        nid: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_ec_param_enc(
        ctx: *mut EVP_PKEY_CTX,
        param_enc: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_ecdh_cofactor_mode(
        ctx: *mut EVP_PKEY_CTX,
        cofactor_mode: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_ecdh_cofactor_mode(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_ecdh_kdf_type(
        ctx: *mut EVP_PKEY_CTX,
        kdf: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_ecdh_kdf_type(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_ecdh_kdf_md(ctx: *mut EVP_PKEY_CTX, md: *const EVP_MD)
        -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_ecdh_kdf_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *mut *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_ecdh_kdf_outlen(
        ctx: *mut EVP_PKEY_CTX,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_ecdh_kdf_outlen(
        ctx: *mut EVP_PKEY_CTX,
        len: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set0_ecdh_kdf_ukm(
        ctx: *mut EVP_PKEY_CTX,
        ukm: *mut ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_ecdh_kdf_ukm(
        ctx: *mut EVP_PKEY_CTX,
        ukm: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
#[doc = " the point is encoded as z||x, where the octet z specifies\n  which solution of the quadratic equation y is"]
pub const point_conversion_form_t_POINT_CONVERSION_COMPRESSED: point_conversion_form_t = 2;
#[doc = " the point is encoded as z||x||y, where z is the octet 0x04"]
pub const point_conversion_form_t_POINT_CONVERSION_UNCOMPRESSED: point_conversion_form_t = 4;
#[doc = " the point is encoded as z||x||y, where the octet z specifies\n  which solution of the quadratic equation y is"]
pub const point_conversion_form_t_POINT_CONVERSION_HYBRID: point_conversion_form_t = 6;
#[doc = " Enum for the point conversion form as defined in X9.62 (ECDSA)\n  for the encoding of a elliptic curve point (x,y)"]
pub type point_conversion_form_t = ::libc::c_int;
extern "C" {
    pub fn OSSL_EC_curve_nid2name(nid: ::libc::c_int) -> *const ::libc::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_method_st {
    _unused: [u8; 0],
}
pub type EC_METHOD = ec_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_group_st {
    _unused: [u8; 0],
}
pub type EC_GROUP = ec_group_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_point_st {
    _unused: [u8; 0],
}
pub type EC_POINT = ec_point_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecpk_parameters_st {
    _unused: [u8; 0],
}
pub type ECPKPARAMETERS = ecpk_parameters_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_parameters_st {
    _unused: [u8; 0],
}
pub type ECPARAMETERS = ec_parameters_st;
extern "C" {
    #[doc = " Returns the basic GFp ec methods which provides the basis for the\n  optimized methods.\n  \\return  EC_METHOD object"]
    pub fn EC_GFp_simple_method() -> *const EC_METHOD;
}
extern "C" {
    #[doc = " Returns GFp methods using montgomery multiplication.\n  \\return  EC_METHOD object"]
    pub fn EC_GFp_mont_method() -> *const EC_METHOD;
}
extern "C" {
    #[doc = " Returns GFp methods using optimized methods for NIST recommended curves\n  \\return  EC_METHOD object"]
    pub fn EC_GFp_nist_method() -> *const EC_METHOD;
}
extern "C" {
    #[doc = " Returns the basic GF2m ec method\n  \\return  EC_METHOD object"]
    pub fn EC_GF2m_simple_method() -> *const EC_METHOD;
}
extern "C" {
    #[doc = "  Creates a new EC_GROUP object\n  \\param   meth   EC_METHOD to use\n  \\return  newly created EC_GROUP object or NULL in case of an error."]
    pub fn EC_GROUP_new(meth: *const EC_METHOD) -> *mut EC_GROUP;
}
extern "C" {
    #[doc = " Clears and frees a EC_GROUP object\n  \\param  group  EC_GROUP object to be cleared and freed."]
    pub fn EC_GROUP_clear_free(group: *mut EC_GROUP);
}
extern "C" {
    #[doc = " Returns the EC_METHOD of the EC_GROUP object.\n  \\param  group  EC_GROUP object\n  \\return EC_METHOD used in this EC_GROUP object."]
    pub fn EC_GROUP_method_of(group: *const EC_GROUP) -> *const EC_METHOD;
}
extern "C" {
    #[doc = " Returns the field type of the EC_METHOD.\n  \\param  meth  EC_METHOD object\n  \\return NID of the underlying field type OID."]
    pub fn EC_METHOD_get_field_type(meth: *const EC_METHOD) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Frees a EC_GROUP object\n  \\param  group  EC_GROUP object to be freed."]
    pub fn EC_GROUP_free(group: *mut EC_GROUP);
}
extern "C" {
    #[doc = " Copies EC_GROUP objects. Note: both EC_GROUPs must use the same EC_METHOD.\n  \\param  dst  destination EC_GROUP object\n  \\param  src  source EC_GROUP object\n  \\return 1 on success and 0 if an error occurred."]
    pub fn EC_GROUP_copy(dst: *mut EC_GROUP, src: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Creates a new EC_GROUP object and copies the content\n  form src to the newly created EC_KEY object\n  \\param  src  source EC_GROUP object\n  \\return newly created EC_GROUP object or NULL in case of an error."]
    pub fn EC_GROUP_dup(src: *const EC_GROUP) -> *mut EC_GROUP;
}
extern "C" {
    #[doc = " Sets the generator and its order/cofactor of a EC_GROUP object.\n  \\param  group      EC_GROUP object\n  \\param  generator  EC_POINT object with the generator.\n  \\param  order      the order of the group generated by the generator.\n  \\param  cofactor   the index of the sub-group generated by the generator\n                     in the group of all points on the elliptic curve.\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_GROUP_set_generator(
        group: *mut EC_GROUP,
        generator: *const EC_POINT,
        order: *const BIGNUM,
        cofactor: *const BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Returns the generator of a EC_GROUP object.\n  \\param  group  EC_GROUP object\n  \\return the currently used generator (possibly NULL)."]
    pub fn EC_GROUP_get0_generator(group: *const EC_GROUP) -> *const EC_POINT;
}
extern "C" {
    #[doc = " Returns the montgomery data for order(Generator)\n  \\param  group  EC_GROUP object\n  \\return the currently used montgomery data (possibly NULL)."]
    pub fn EC_GROUP_get_mont_data(group: *const EC_GROUP) -> *mut BN_MONT_CTX;
}
extern "C" {
    #[doc = " Gets the order of a EC_GROUP\n  \\param  group  EC_GROUP object\n  \\param  order  BIGNUM to which the order is copied\n  \\param  ctx    unused\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_GROUP_get_order(
        group: *const EC_GROUP,
        order: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the order of an EC_GROUP\n  \\param  group  EC_GROUP object\n  \\return the group order"]
    pub fn EC_GROUP_get0_order(group: *const EC_GROUP) -> *const BIGNUM;
}
extern "C" {
    #[doc = " Gets the number of bits of the order of an EC_GROUP\n  \\param  group  EC_GROUP object\n  \\return number of bits of group order."]
    pub fn EC_GROUP_order_bits(group: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the cofactor of a EC_GROUP\n  \\param  group     EC_GROUP object\n  \\param  cofactor  BIGNUM to which the cofactor is copied\n  \\param  ctx       unused\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_GROUP_get_cofactor(
        group: *const EC_GROUP,
        cofactor: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the cofactor of an EC_GROUP\n  \\param  group  EC_GROUP object\n  \\return the group cofactor"]
    pub fn EC_GROUP_get0_cofactor(group: *const EC_GROUP) -> *const BIGNUM;
}
extern "C" {
    #[doc = " Sets the name of a EC_GROUP object\n  \\param  group  EC_GROUP object\n  \\param  nid    NID of the curve name OID"]
    pub fn EC_GROUP_set_curve_name(group: *mut EC_GROUP, nid: ::libc::c_int);
}
extern "C" {
    #[doc = " Returns the curve name of a EC_GROUP object\n  \\param  group  EC_GROUP object\n  \\return NID of the curve name OID or 0 if not set."]
    pub fn EC_GROUP_get_curve_name(group: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the field of an EC_GROUP\n  \\param  group  EC_GROUP object\n  \\return the group field"]
    pub fn EC_GROUP_get0_field(group: *const EC_GROUP) -> *const BIGNUM;
}
extern "C" {
    #[doc = " Returns the field type of the EC_GROUP.\n  \\param  group  EC_GROUP object\n  \\return NID of the underlying field type OID."]
    pub fn EC_GROUP_get_field_type(group: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_GROUP_set_asn1_flag(group: *mut EC_GROUP, flag: ::libc::c_int);
}
extern "C" {
    pub fn EC_GROUP_get_asn1_flag(group: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_GROUP_set_point_conversion_form(group: *mut EC_GROUP, form: point_conversion_form_t);
}
extern "C" {
    pub fn EC_GROUP_get_point_conversion_form(arg1: *const EC_GROUP) -> point_conversion_form_t;
}
extern "C" {
    pub fn EC_GROUP_get0_seed(x: *const EC_GROUP) -> *mut ::libc::c_uchar;
}
extern "C" {
    pub fn EC_GROUP_get_seed_len(arg1: *const EC_GROUP) -> usize;
}
extern "C" {
    pub fn EC_GROUP_set_seed(
        arg1: *mut EC_GROUP,
        arg2: *const ::libc::c_uchar,
        len: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Sets the parameters of an ec curve defined by y^2 = x^3 + a*x + b (for GFp)\n  or y^2 + x*y = x^3 + a*x^2 + b (for GF2m)\n  \\param  group  EC_GROUP object\n  \\param  p      BIGNUM with the prime number (GFp) or the polynomial\n                 defining the underlying field (GF2m)\n  \\param  a      BIGNUM with parameter a of the equation\n  \\param  b      BIGNUM with parameter b of the equation\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_GROUP_set_curve(
        group: *mut EC_GROUP,
        p: *const BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the parameters of the ec curve defined by y^2 = x^3 + a*x + b (for GFp)\n  or y^2 + x*y = x^3 + a*x^2 + b (for GF2m)\n  \\param  group  EC_GROUP object\n  \\param  p      BIGNUM with the prime number (GFp) or the polynomial\n                 defining the underlying field (GF2m)\n  \\param  a      BIGNUM for parameter a of the equation\n  \\param  b      BIGNUM for parameter b of the equation\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_GROUP_get_curve(
        group: *const EC_GROUP,
        p: *mut BIGNUM,
        a: *mut BIGNUM,
        b: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Sets the parameters of an ec curve. Synonym for EC_GROUP_set_curve\n  \\param  group  EC_GROUP object\n  \\param  p      BIGNUM with the prime number (GFp) or the polynomial\n                 defining the underlying field (GF2m)\n  \\param  a      BIGNUM with parameter a of the equation\n  \\param  b      BIGNUM with parameter b of the equation\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_GROUP_set_curve_GFp(
        group: *mut EC_GROUP,
        p: *const BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the parameters of an ec curve. Synonym for EC_GROUP_get_curve\n  \\param  group  EC_GROUP object\n  \\param  p      BIGNUM with the prime number (GFp) or the polynomial\n                 defining the underlying field (GF2m)\n  \\param  a      BIGNUM for parameter a of the equation\n  \\param  b      BIGNUM for parameter b of the equation\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_GROUP_get_curve_GFp(
        group: *const EC_GROUP,
        p: *mut BIGNUM,
        a: *mut BIGNUM,
        b: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Sets the parameter of an ec curve. Synonym for EC_GROUP_set_curve\n  \\param  group  EC_GROUP object\n  \\param  p      BIGNUM with the prime number (GFp) or the polynomial\n                 defining the underlying field (GF2m)\n  \\param  a      BIGNUM with parameter a of the equation\n  \\param  b      BIGNUM with parameter b of the equation\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_GROUP_set_curve_GF2m(
        group: *mut EC_GROUP,
        p: *const BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the parameters of an ec curve. Synonym for EC_GROUP_get_curve\n  \\param  group  EC_GROUP object\n  \\param  p      BIGNUM with the prime number (GFp) or the polynomial\n                 defining the underlying field (GF2m)\n  \\param  a      BIGNUM for parameter a of the equation\n  \\param  b      BIGNUM for parameter b of the equation\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_GROUP_get_curve_GF2m(
        group: *const EC_GROUP,
        p: *mut BIGNUM,
        a: *mut BIGNUM,
        b: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Returns the number of bits needed to represent a field element\n  \\param  group  EC_GROUP object\n  \\return number of bits needed to represent a field element"]
    pub fn EC_GROUP_get_degree(group: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Checks whether the parameter in the EC_GROUP define a valid ec group\n  \\param  group  EC_GROUP object\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 if group is a valid ec group and 0 otherwise"]
    pub fn EC_GROUP_check(group: *const EC_GROUP, ctx: *mut BN_CTX) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Checks whether the discriminant of the elliptic curve is zero or not\n  \\param  group  EC_GROUP object\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 if the discriminant is not zero and 0 otherwise"]
    pub fn EC_GROUP_check_discriminant(group: *const EC_GROUP, ctx: *mut BN_CTX) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Compares two EC_GROUP objects\n  \\param  a    first EC_GROUP object\n  \\param  b    second EC_GROUP object\n  \\param  ctx  BN_CTX object (optional)\n  \\return 0 if the groups are equal, 1 if not, or -1 on error"]
    pub fn EC_GROUP_cmp(a: *const EC_GROUP, b: *const EC_GROUP, ctx: *mut BN_CTX) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Creates a new EC_GROUP object with the specified parameters defined\n  over GFp (defined by the equation y^2 = x^3 + a*x + b)\n  \\param  p    BIGNUM with the prime number\n  \\param  a    BIGNUM with the parameter a of the equation\n  \\param  b    BIGNUM with the parameter b of the equation\n  \\param  ctx  BN_CTX object (optional)\n  \\return newly created EC_GROUP object with the specified parameters"]
    pub fn EC_GROUP_new_curve_GFp(
        p: *const BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> *mut EC_GROUP;
}
extern "C" {
    #[doc = " Creates a new EC_GROUP object with the specified parameters defined\n  over GF2m (defined by the equation y^2 + x*y = x^3 + a*x^2 + b)\n  \\param  p    BIGNUM with the polynomial defining the underlying field\n  \\param  a    BIGNUM with the parameter a of the equation\n  \\param  b    BIGNUM with the parameter b of the equation\n  \\param  ctx  BN_CTX object (optional)\n  \\return newly created EC_GROUP object with the specified parameters"]
    pub fn EC_GROUP_new_curve_GF2m(
        p: *const BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> *mut EC_GROUP;
}
extern "C" {
    #[doc = " Creates a EC_GROUP object with a curve specified by parameters.\n The parameters may be explicit or a named curve,\n  \\param  params A list of parameters describing the group.\n  \\param  libctx The associated library context or NULL for the default\n                 context\n  \\param  propq  A property query string\n  \\return newly created EC_GROUP object with specified parameters or NULL\n          if an error occurred"]
    pub fn EC_GROUP_new_from_params(
        params: *const OSSL_PARAM,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EC_GROUP;
}
extern "C" {
    #[doc = " Creates a EC_GROUP object with a curve specified by a NID\n  \\param  libctx The associated library context or NULL for the default\n                 context\n  \\param  propq  A property query string\n  \\param  nid    NID of the OID of the curve name\n  \\return newly created EC_GROUP object with specified curve or NULL\n          if an error occurred"]
    pub fn EC_GROUP_new_by_curve_name_ex(
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
        nid: ::libc::c_int,
    ) -> *mut EC_GROUP;
}
extern "C" {
    #[doc = " Creates a EC_GROUP object with a curve specified by a NID. Same as\n EC_GROUP_new_by_curve_name_ex but the libctx and propq are always\n NULL.\n  \\param  nid    NID of the OID of the curve name\n  \\return newly created EC_GROUP object with specified curve or NULL\n          if an error occurred"]
    pub fn EC_GROUP_new_by_curve_name(nid: ::libc::c_int) -> *mut EC_GROUP;
}
extern "C" {
    #[doc = " Creates a new EC_GROUP object from an ECPARAMETERS object\n  \\param  params  pointer to the ECPARAMETERS object\n  \\return newly created EC_GROUP object with specified curve or NULL\n          if an error occurred"]
    pub fn EC_GROUP_new_from_ecparameters(params: *const ECPARAMETERS) -> *mut EC_GROUP;
}
extern "C" {
    #[doc = " Creates an ECPARAMETERS object for the given EC_GROUP object.\n  \\param  group   pointer to the EC_GROUP object\n  \\param  params  pointer to an existing ECPARAMETERS object or NULL\n  \\return pointer to the new ECPARAMETERS object or NULL\n          if an error occurred."]
    pub fn EC_GROUP_get_ecparameters(
        group: *const EC_GROUP,
        params: *mut ECPARAMETERS,
    ) -> *mut ECPARAMETERS;
}
extern "C" {
    #[doc = " Creates a new EC_GROUP object from an ECPKPARAMETERS object\n  \\param  params  pointer to an existing ECPKPARAMETERS object, or NULL\n  \\return newly created EC_GROUP object with specified curve, or NULL\n          if an error occurred"]
    pub fn EC_GROUP_new_from_ecpkparameters(params: *const ECPKPARAMETERS) -> *mut EC_GROUP;
}
extern "C" {
    #[doc = " Creates an ECPKPARAMETERS object for the given EC_GROUP object.\n  \\param  group   pointer to the EC_GROUP object\n  \\param  params  pointer to an existing ECPKPARAMETERS object or NULL\n  \\return pointer to the new ECPKPARAMETERS object or NULL\n          if an error occurred."]
    pub fn EC_GROUP_get_ecpkparameters(
        group: *const EC_GROUP,
        params: *mut ECPKPARAMETERS,
    ) -> *mut ECPKPARAMETERS;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EC_builtin_curve {
    pub nid: ::libc::c_int,
    pub comment: *const ::libc::c_char,
}
extern "C" {
    pub fn EC_get_builtin_curves(r: *mut EC_builtin_curve, nitems: usize) -> usize;
}
extern "C" {
    pub fn EC_curve_nid2nist(nid: ::libc::c_int) -> *const ::libc::c_char;
}
extern "C" {
    pub fn EC_curve_nist2nid(name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_GROUP_check_named_curve(
        group: *const EC_GROUP,
        nist_only: ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Creates a new EC_POINT object for the specified EC_GROUP\n  \\param  group  EC_GROUP the underlying EC_GROUP object\n  \\return newly created EC_POINT object or NULL if an error occurred"]
    pub fn EC_POINT_new(group: *const EC_GROUP) -> *mut EC_POINT;
}
extern "C" {
    #[doc = " Frees a EC_POINT object\n  \\param  point  EC_POINT object to be freed"]
    pub fn EC_POINT_free(point: *mut EC_POINT);
}
extern "C" {
    #[doc = " Clears and frees a EC_POINT object\n  \\param  point  EC_POINT object to be cleared and freed"]
    pub fn EC_POINT_clear_free(point: *mut EC_POINT);
}
extern "C" {
    #[doc = " Copies EC_POINT object\n  \\param  dst  destination EC_POINT object\n  \\param  src  source EC_POINT object\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_copy(dst: *mut EC_POINT, src: *const EC_POINT) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Creates a new EC_POINT object and copies the content of the supplied\n  EC_POINT\n  \\param  src    source EC_POINT object\n  \\param  group  underlying the EC_GROUP object\n  \\return newly created EC_POINT object or NULL if an error occurred"]
    pub fn EC_POINT_dup(src: *const EC_POINT, group: *const EC_GROUP) -> *mut EC_POINT;
}
extern "C" {
    #[doc = " Sets a point to infinity (neutral element)\n  \\param  group  underlying EC_GROUP object\n  \\param  point  EC_POINT to set to infinity\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_set_to_infinity(group: *const EC_GROUP, point: *mut EC_POINT) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Returns the EC_METHOD used in EC_POINT object\n  \\param  point  EC_POINT object\n  \\return the EC_METHOD used"]
    pub fn EC_POINT_method_of(point: *const EC_POINT) -> *const EC_METHOD;
}
extern "C" {
    #[doc = " Sets the jacobian projective coordinates of a EC_POINT over GFp\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM with the x-coordinate\n  \\param  y      BIGNUM with the y-coordinate\n  \\param  z      BIGNUM with the z-coordinate\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_set_Jprojective_coordinates_GFp(
        group: *const EC_GROUP,
        p: *mut EC_POINT,
        x: *const BIGNUM,
        y: *const BIGNUM,
        z: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the jacobian projective coordinates of a EC_POINT over GFp\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM for the x-coordinate\n  \\param  y      BIGNUM for the y-coordinate\n  \\param  z      BIGNUM for the z-coordinate\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_get_Jprojective_coordinates_GFp(
        group: *const EC_GROUP,
        p: *const EC_POINT,
        x: *mut BIGNUM,
        y: *mut BIGNUM,
        z: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Sets the affine coordinates of an EC_POINT\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM with the x-coordinate\n  \\param  y      BIGNUM with the y-coordinate\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_set_affine_coordinates(
        group: *const EC_GROUP,
        p: *mut EC_POINT,
        x: *const BIGNUM,
        y: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the affine coordinates of an EC_POINT.\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM for the x-coordinate\n  \\param  y      BIGNUM for the y-coordinate\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_get_affine_coordinates(
        group: *const EC_GROUP,
        p: *const EC_POINT,
        x: *mut BIGNUM,
        y: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Sets the affine coordinates of an EC_POINT. A synonym of\n  EC_POINT_set_affine_coordinates\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM with the x-coordinate\n  \\param  y      BIGNUM with the y-coordinate\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_set_affine_coordinates_GFp(
        group: *const EC_GROUP,
        p: *mut EC_POINT,
        x: *const BIGNUM,
        y: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the affine coordinates of an EC_POINT. A synonym of\n  EC_POINT_get_affine_coordinates\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM for the x-coordinate\n  \\param  y      BIGNUM for the y-coordinate\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_get_affine_coordinates_GFp(
        group: *const EC_GROUP,
        p: *const EC_POINT,
        x: *mut BIGNUM,
        y: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Sets the x9.62 compressed coordinates of a EC_POINT\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM with x-coordinate\n  \\param  y_bit  integer with the y-Bit (either 0 or 1)\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_set_compressed_coordinates(
        group: *const EC_GROUP,
        p: *mut EC_POINT,
        x: *const BIGNUM,
        y_bit: ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Sets the x9.62 compressed coordinates of a EC_POINT. A synonym of\n  EC_POINT_set_compressed_coordinates\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM with x-coordinate\n  \\param  y_bit  integer with the y-Bit (either 0 or 1)\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_set_compressed_coordinates_GFp(
        group: *const EC_GROUP,
        p: *mut EC_POINT,
        x: *const BIGNUM,
        y_bit: ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Sets the affine coordinates of an EC_POINT. A synonym of\n  EC_POINT_set_affine_coordinates\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM with the x-coordinate\n  \\param  y      BIGNUM with the y-coordinate\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_set_affine_coordinates_GF2m(
        group: *const EC_GROUP,
        p: *mut EC_POINT,
        x: *const BIGNUM,
        y: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Gets the affine coordinates of an EC_POINT. A synonym of\n  EC_POINT_get_affine_coordinates\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM for the x-coordinate\n  \\param  y      BIGNUM for the y-coordinate\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_get_affine_coordinates_GF2m(
        group: *const EC_GROUP,
        p: *const EC_POINT,
        x: *mut BIGNUM,
        y: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Sets the x9.62 compressed coordinates of a EC_POINT. A synonym of\n  EC_POINT_set_compressed_coordinates\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  x      BIGNUM with x-coordinate\n  \\param  y_bit  integer with the y-Bit (either 0 or 1)\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_set_compressed_coordinates_GF2m(
        group: *const EC_GROUP,
        p: *mut EC_POINT,
        x: *const BIGNUM,
        y_bit: ::libc::c_int,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Encodes a EC_POINT object to a octet string\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  form   point conversion form\n  \\param  buf    memory buffer for the result. If NULL the function returns\n                 required buffer size.\n  \\param  len    length of the memory buffer\n  \\param  ctx    BN_CTX object (optional)\n  \\return the length of the encoded octet string or 0 if an error occurred"]
    pub fn EC_POINT_point2oct(
        group: *const EC_GROUP,
        p: *const EC_POINT,
        form: point_conversion_form_t,
        buf: *mut ::libc::c_uchar,
        len: usize,
        ctx: *mut BN_CTX,
    ) -> usize;
}
extern "C" {
    #[doc = " Decodes a EC_POINT from a octet string\n  \\param  group  underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\param  buf    memory buffer with the encoded ec point\n  \\param  len    length of the encoded ec point\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_oct2point(
        group: *const EC_GROUP,
        p: *mut EC_POINT,
        buf: *const ::libc::c_uchar,
        len: usize,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Encodes an EC_POINT object to an allocated octet string\n  \\param  group  underlying EC_GROUP object\n  \\param  point  EC_POINT object\n  \\param  form   point conversion form\n  \\param  pbuf   returns pointer to allocated buffer\n  \\param  ctx    BN_CTX object (optional)\n  \\return the length of the encoded octet string or 0 if an error occurred"]
    pub fn EC_POINT_point2buf(
        group: *const EC_GROUP,
        point: *const EC_POINT,
        form: point_conversion_form_t,
        pbuf: *mut *mut ::libc::c_uchar,
        ctx: *mut BN_CTX,
    ) -> usize;
}
extern "C" {
    pub fn EC_POINT_point2bn(
        arg1: *const EC_GROUP,
        arg2: *const EC_POINT,
        form: point_conversion_form_t,
        arg3: *mut BIGNUM,
        arg4: *mut BN_CTX,
    ) -> *mut BIGNUM;
}
extern "C" {
    pub fn EC_POINT_bn2point(
        arg1: *const EC_GROUP,
        arg2: *const BIGNUM,
        arg3: *mut EC_POINT,
        arg4: *mut BN_CTX,
    ) -> *mut EC_POINT;
}
extern "C" {
    pub fn EC_POINT_point2hex(
        arg1: *const EC_GROUP,
        arg2: *const EC_POINT,
        form: point_conversion_form_t,
        arg3: *mut BN_CTX,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn EC_POINT_hex2point(
        arg1: *const EC_GROUP,
        arg2: *const ::libc::c_char,
        arg3: *mut EC_POINT,
        arg4: *mut BN_CTX,
    ) -> *mut EC_POINT;
}
extern "C" {
    #[doc = " Computes the sum of two EC_POINT\n  \\param  group  underlying EC_GROUP object\n  \\param  r      EC_POINT object for the result (r = a + b)\n  \\param  a      EC_POINT object with the first summand\n  \\param  b      EC_POINT object with the second summand\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_add(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        a: *const EC_POINT,
        b: *const EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Computes the double of a EC_POINT\n  \\param  group  underlying EC_GROUP object\n  \\param  r      EC_POINT object for the result (r = 2 * a)\n  \\param  a      EC_POINT object\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_dbl(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        a: *const EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Computes the inverse of a EC_POINT\n  \\param  group  underlying EC_GROUP object\n  \\param  a      EC_POINT object to be inverted (it's used for the result as well)\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_invert(
        group: *const EC_GROUP,
        a: *mut EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Checks whether the point is the neutral element of the group\n  \\param  group  the underlying EC_GROUP object\n  \\param  p      EC_POINT object\n  \\return 1 if the point is the neutral element and 0 otherwise"]
    pub fn EC_POINT_is_at_infinity(group: *const EC_GROUP, p: *const EC_POINT) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Checks whether the point is on the curve\n  \\param  group  underlying EC_GROUP object\n  \\param  point  EC_POINT object to check\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 if the point is on the curve, 0 if not, or -1 on error"]
    pub fn EC_POINT_is_on_curve(
        group: *const EC_GROUP,
        point: *const EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Compares two EC_POINTs\n  \\param  group  underlying EC_GROUP object\n  \\param  a      first EC_POINT object\n  \\param  b      second EC_POINT object\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 if the points are not equal, 0 if they are, or -1 on error"]
    pub fn EC_POINT_cmp(
        group: *const EC_GROUP,
        a: *const EC_POINT,
        b: *const EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_POINT_make_affine(
        group: *const EC_GROUP,
        point: *mut EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_POINTs_make_affine(
        group: *const EC_GROUP,
        num: usize,
        points: *mut *mut EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Computes r = generator * n + sum_{i=0}^{num-1} p[i] * m[i]\n  \\param  group  underlying EC_GROUP object\n  \\param  r      EC_POINT object for the result\n  \\param  n      BIGNUM with the multiplier for the group generator (optional)\n  \\param  num    number further summands\n  \\param  p      array of size num of EC_POINT objects\n  \\param  m      array of size num of BIGNUM objects\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINTs_mul(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        num: usize,
        p: *mut *const EC_POINT,
        m: *mut *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Computes r = generator * n + q * m\n  \\param  group  underlying EC_GROUP object\n  \\param  r      EC_POINT object for the result\n  \\param  n      BIGNUM with the multiplier for the group generator (optional)\n  \\param  q      EC_POINT object with the first factor of the second summand\n  \\param  m      BIGNUM with the second factor of the second summand\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_POINT_mul(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Stores multiples of generator for faster point multiplication\n  \\param  group  EC_GROUP object\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_GROUP_precompute_mult(group: *mut EC_GROUP, ctx: *mut BN_CTX) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Reports whether a precomputation has been done\n  \\param  group  EC_GROUP object\n  \\return 1 if a pre-computation has been done and 0 otherwise"]
    pub fn EC_GROUP_have_precompute_mult(group: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    pub fn ECPKPARAMETERS_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ECPKPARAMETERS_new() -> *mut ECPKPARAMETERS;
}
extern "C" {
    pub fn ECPKPARAMETERS_free(a: *mut ECPKPARAMETERS);
}
extern "C" {
    pub fn ECPARAMETERS_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn ECPARAMETERS_new() -> *mut ECPARAMETERS;
}
extern "C" {
    pub fn ECPARAMETERS_free(a: *mut ECPARAMETERS);
}
extern "C" {
    pub fn EC_GROUP_get_basis_type(arg1: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_GROUP_get_trinomial_basis(
        arg1: *const EC_GROUP,
        k: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_GROUP_get_pentanomial_basis(
        arg1: *const EC_GROUP,
        k1: *mut ::libc::c_uint,
        k2: *mut ::libc::c_uint,
        k3: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_ECPKParameters(
        arg1: *mut *mut EC_GROUP,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut EC_GROUP;
}
extern "C" {
    pub fn i2d_ECPKParameters(
        arg1: *const EC_GROUP,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ECPKParameters_print(
        bp: *mut BIO,
        x: *const EC_GROUP,
        off: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ECPKParameters_print_fp(
        fp: *mut FILE,
        x: *const EC_GROUP,
        off: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = "  Creates a new EC_KEY object.\n  \\param  ctx  The library context for to use for this EC_KEY. May be NULL in\n               which case the default library context is used.\n  \\return EC_KEY object or NULL if an error occurred."]
    pub fn EC_KEY_new_ex(ctx: *mut OSSL_LIB_CTX, propq: *const ::libc::c_char) -> *mut EC_KEY;
}
extern "C" {
    #[doc = "  Creates a new EC_KEY object. Same as calling EC_KEY_new_ex with a\n  NULL library context\n  \\return EC_KEY object or NULL if an error occurred."]
    pub fn EC_KEY_new() -> *mut EC_KEY;
}
extern "C" {
    pub fn EC_KEY_get_flags(key: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_KEY_set_flags(key: *mut EC_KEY, flags: ::libc::c_int);
}
extern "C" {
    pub fn EC_KEY_clear_flags(key: *mut EC_KEY, flags: ::libc::c_int);
}
extern "C" {
    pub fn EC_KEY_decoded_from_explicit_params(key: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    #[doc = "  Creates a new EC_KEY object using a named curve as underlying\n  EC_GROUP object.\n  \\param  ctx   The library context for to use for this EC_KEY. May be NULL in\n                which case the default library context is used.\n  \\param  propq Any property query string\n  \\param  nid   NID of the named curve.\n  \\return EC_KEY object or NULL if an error occurred."]
    pub fn EC_KEY_new_by_curve_name_ex(
        ctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
        nid: ::libc::c_int,
    ) -> *mut EC_KEY;
}
extern "C" {
    #[doc = "  Creates a new EC_KEY object using a named curve as underlying\n  EC_GROUP object. Same as calling EC_KEY_new_by_curve_name_ex with a NULL\n  library context and property query string.\n  \\param  nid  NID of the named curve.\n  \\return EC_KEY object or NULL if an error occurred."]
    pub fn EC_KEY_new_by_curve_name(nid: ::libc::c_int) -> *mut EC_KEY;
}
extern "C" {
    #[doc = " Frees a EC_KEY object.\n  \\param  key  EC_KEY object to be freed."]
    pub fn EC_KEY_free(key: *mut EC_KEY);
}
extern "C" {
    #[doc = " Copies a EC_KEY object.\n  \\param  dst  destination EC_KEY object\n  \\param  src  src EC_KEY object\n  \\return dst or NULL if an error occurred."]
    pub fn EC_KEY_copy(dst: *mut EC_KEY, src: *const EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    #[doc = " Creates a new EC_KEY object and copies the content from src to it.\n  \\param  src  the source EC_KEY object\n  \\return newly created EC_KEY object or NULL if an error occurred."]
    pub fn EC_KEY_dup(src: *const EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    #[doc = " Increases the internal reference count of a EC_KEY object.\n  \\param  key  EC_KEY object\n  \\return 1 on success and 0 if an error occurred."]
    pub fn EC_KEY_up_ref(key: *mut EC_KEY) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Returns the ENGINE object of a EC_KEY object\n  \\param  eckey  EC_KEY object\n  \\return the ENGINE object (possibly NULL)."]
    pub fn EC_KEY_get0_engine(eckey: *const EC_KEY) -> *mut ENGINE;
}
extern "C" {
    #[doc = " Returns the EC_GROUP object of a EC_KEY object\n  \\param  key  EC_KEY object\n  \\return the EC_GROUP object (possibly NULL)."]
    pub fn EC_KEY_get0_group(key: *const EC_KEY) -> *const EC_GROUP;
}
extern "C" {
    #[doc = " Sets the EC_GROUP of a EC_KEY object.\n  \\param  key    EC_KEY object\n  \\param  group  EC_GROUP to use in the EC_KEY object (note: the EC_KEY\n                 object will use an own copy of the EC_GROUP).\n  \\return 1 on success and 0 if an error occurred."]
    pub fn EC_KEY_set_group(key: *mut EC_KEY, group: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Returns the private key of a EC_KEY object.\n  \\param  key  EC_KEY object\n  \\return a BIGNUM with the private key (possibly NULL)."]
    pub fn EC_KEY_get0_private_key(key: *const EC_KEY) -> *const BIGNUM;
}
extern "C" {
    #[doc = " Sets the private key of a EC_KEY object.\n  \\param  key  EC_KEY object\n  \\param  prv  BIGNUM with the private key (note: the EC_KEY object\n               will use an own copy of the BIGNUM).\n  \\return 1 on success and 0 if an error occurred."]
    pub fn EC_KEY_set_private_key(key: *mut EC_KEY, prv: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Returns the public key of a EC_KEY object.\n  \\param  key  the EC_KEY object\n  \\return a EC_POINT object with the public key (possibly NULL)"]
    pub fn EC_KEY_get0_public_key(key: *const EC_KEY) -> *const EC_POINT;
}
extern "C" {
    #[doc = " Sets the public key of a EC_KEY object.\n  \\param  key  EC_KEY object\n  \\param  pub  EC_POINT object with the public key (note: the EC_KEY object\n               will use an own copy of the EC_POINT object).\n  \\return 1 on success and 0 if an error occurred."]
    pub fn EC_KEY_set_public_key(key: *mut EC_KEY, pub_: *const EC_POINT) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_KEY_get_enc_flags(key: *const EC_KEY) -> ::libc::c_uint;
}
extern "C" {
    pub fn EC_KEY_set_enc_flags(eckey: *mut EC_KEY, flags: ::libc::c_uint);
}
extern "C" {
    pub fn EC_KEY_get_conv_form(key: *const EC_KEY) -> point_conversion_form_t;
}
extern "C" {
    pub fn EC_KEY_set_conv_form(eckey: *mut EC_KEY, cform: point_conversion_form_t);
}
extern "C" {
    pub fn EC_KEY_set_ex_data(
        key: *mut EC_KEY,
        idx: ::libc::c_int,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_KEY_get_ex_data(key: *const EC_KEY, idx: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn EC_KEY_set_asn1_flag(eckey: *mut EC_KEY, asn1_flag: ::libc::c_int);
}
extern "C" {
    #[doc = " Creates a table of pre-computed multiples of the generator to\n  accelerate further EC_KEY operations.\n  \\param  key  EC_KEY object\n  \\param  ctx  BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred."]
    pub fn EC_KEY_precompute_mult(key: *mut EC_KEY, ctx: *mut BN_CTX) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Creates a new ec private (and optional a new public) key.\n  \\param  key  EC_KEY object\n  \\return 1 on success and 0 if an error occurred."]
    pub fn EC_KEY_generate_key(key: *mut EC_KEY) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Verifies that a private and/or public key is valid.\n  \\param  key  the EC_KEY object\n  \\return 1 on success and 0 otherwise."]
    pub fn EC_KEY_check_key(key: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Indicates if an EC_KEY can be used for signing.\n  \\param  eckey  the EC_KEY object\n  \\return 1 if can can sign and 0 otherwise."]
    pub fn EC_KEY_can_sign(eckey: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Sets a public key from affine coordinates performing\n  necessary NIST PKV tests.\n  \\param  key  the EC_KEY object\n  \\param  x    public key x coordinate\n  \\param  y    public key y coordinate\n  \\return 1 on success and 0 otherwise."]
    pub fn EC_KEY_set_public_key_affine_coordinates(
        key: *mut EC_KEY,
        x: *mut BIGNUM,
        y: *mut BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Encodes an EC_KEY public key to an allocated octet string\n  \\param  key    key to encode\n  \\param  form   point conversion form\n  \\param  pbuf   returns pointer to allocated buffer\n  \\param  ctx    BN_CTX object (optional)\n  \\return the length of the encoded octet string or 0 if an error occurred"]
    pub fn EC_KEY_key2buf(
        key: *const EC_KEY,
        form: point_conversion_form_t,
        pbuf: *mut *mut ::libc::c_uchar,
        ctx: *mut BN_CTX,
    ) -> usize;
}
extern "C" {
    #[doc = " Decodes a EC_KEY public key from a octet string\n  \\param  key    key to decode\n  \\param  buf    memory buffer with the encoded ec point\n  \\param  len    length of the encoded ec point\n  \\param  ctx    BN_CTX object (optional)\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_KEY_oct2key(
        key: *mut EC_KEY,
        buf: *const ::libc::c_uchar,
        len: usize,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Decodes an EC_KEY private key from an octet string\n  \\param  key    key to decode\n  \\param  buf    memory buffer with the encoded private key\n  \\param  len    length of the encoded key\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_KEY_oct2priv(
        key: *mut EC_KEY,
        buf: *const ::libc::c_uchar,
        len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Encodes a EC_KEY private key to an octet string\n  \\param  key    key to encode\n  \\param  buf    memory buffer for the result. If NULL the function returns\n                 required buffer size.\n  \\param  len    length of the memory buffer\n  \\return the length of the encoded octet string or 0 if an error occurred"]
    pub fn EC_KEY_priv2oct(key: *const EC_KEY, buf: *mut ::libc::c_uchar, len: usize) -> usize;
}
extern "C" {
    #[doc = " Encodes an EC_KEY private key to an allocated octet string\n  \\param  eckey  key to encode\n  \\param  pbuf   returns pointer to allocated buffer\n  \\return the length of the encoded octet string or 0 if an error occurred"]
    pub fn EC_KEY_priv2buf(eckey: *const EC_KEY, pbuf: *mut *mut ::libc::c_uchar) -> usize;
}
extern "C" {
    #[doc = " Decodes a private key from a memory buffer.\n  \\param  key  a pointer to a EC_KEY object which should be used (or NULL)\n  \\param  in   pointer to memory with the DER encoded private key\n  \\param  len  length of the DER encoded private key\n  \\return the decoded private key or NULL if an error occurred."]
    pub fn d2i_ECPrivateKey(
        key: *mut *mut EC_KEY,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut EC_KEY;
}
extern "C" {
    #[doc = " Encodes a private key object and stores the result in a buffer.\n  \\param  key  the EC_KEY object to encode\n  \\param  out  the buffer for the result (if NULL the function returns number\n               of bytes needed).\n  \\return 1 on success and 0 if an error occurred."]
    pub fn i2d_ECPrivateKey(key: *const EC_KEY, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Decodes ec parameter from a memory buffer.\n  \\param  key  a pointer to a EC_KEY object which should be used (or NULL)\n  \\param  in   pointer to memory with the DER encoded ec parameters\n  \\param  len  length of the DER encoded ec parameters\n  \\return a EC_KEY object with the decoded parameters or NULL if an error\n          occurred."]
    pub fn d2i_ECParameters(
        key: *mut *mut EC_KEY,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut EC_KEY;
}
extern "C" {
    #[doc = " Encodes ec parameter and stores the result in a buffer.\n  \\param  key  the EC_KEY object with ec parameters to encode\n  \\param  out  the buffer for the result (if NULL the function returns number\n               of bytes needed).\n  \\return 1 on success and 0 if an error occurred."]
    pub fn i2d_ECParameters(key: *const EC_KEY, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Decodes an ec public key from a octet string.\n  \\param  key  a pointer to a EC_KEY object which should be used\n  \\param  in   memory buffer with the encoded public key\n  \\param  len  length of the encoded public key\n  \\return EC_KEY object with decoded public key or NULL if an error\n          occurred."]
    pub fn o2i_ECPublicKey(
        key: *mut *mut EC_KEY,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut EC_KEY;
}
extern "C" {
    #[doc = " Encodes an ec public key in an octet string.\n  \\param  key  the EC_KEY object with the public key\n  \\param  out  the buffer for the result (if NULL the function returns number\n               of bytes needed).\n  \\return 1 on success and 0 if an error occurred"]
    pub fn i2o_ECPublicKey(key: *const EC_KEY, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Prints out the ec parameters on human readable form.\n  \\param  bp   BIO object to which the information is printed\n  \\param  key  EC_KEY object\n  \\return 1 on success and 0 if an error occurred"]
    pub fn ECParameters_print(bp: *mut BIO, key: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Prints out the contents of a EC_KEY object\n  \\param  bp   BIO object to which the information is printed\n  \\param  key  EC_KEY object\n  \\param  off  line offset\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_KEY_print(bp: *mut BIO, key: *const EC_KEY, off: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Prints out the ec parameters on human readable form.\n  \\param  fp   file descriptor to which the information is printed\n  \\param  key  EC_KEY object\n  \\return 1 on success and 0 if an error occurred"]
    pub fn ECParameters_print_fp(fp: *mut FILE, key: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Prints out the contents of a EC_KEY object\n  \\param  fp   file descriptor to which the information is printed\n  \\param  key  EC_KEY object\n  \\param  off  line offset\n  \\return 1 on success and 0 if an error occurred"]
    pub fn EC_KEY_print_fp(fp: *mut FILE, key: *const EC_KEY, off: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_KEY_OpenSSL() -> *const EC_KEY_METHOD;
}
extern "C" {
    pub fn EC_KEY_get_default_method() -> *const EC_KEY_METHOD;
}
extern "C" {
    pub fn EC_KEY_set_default_method(meth: *const EC_KEY_METHOD);
}
extern "C" {
    pub fn EC_KEY_get_method(key: *const EC_KEY) -> *const EC_KEY_METHOD;
}
extern "C" {
    pub fn EC_KEY_set_method(key: *mut EC_KEY, meth: *const EC_KEY_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_KEY_new_method(engine: *mut ENGINE) -> *mut EC_KEY;
}
extern "C" {
    #[doc = " The old name for ecdh_KDF_X9_63\n  The ECDH KDF specification has been mistakingly attributed to ANSI X9.62,\n  it is actually specified in ANSI X9.63.\n  This identifier is retained for backwards compatibility"]
    pub fn ECDH_KDF_X9_62(
        out: *mut ::libc::c_uchar,
        outlen: usize,
        Z: *const ::libc::c_uchar,
        Zlen: usize,
        sinfo: *const ::libc::c_uchar,
        sinfolen: usize,
        md: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ECDH_compute_key(
        out: *mut ::libc::c_void,
        outlen: usize,
        pub_key: *const EC_POINT,
        ecdh: *const EC_KEY,
        KDF: ::std::option::Option<
            unsafe extern "C" fn(
                in_: *const ::libc::c_void,
                inlen: usize,
                out: *mut ::libc::c_void,
                outlen: *mut usize,
            ) -> *mut ::libc::c_void,
        >,
    ) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ECDSA_SIG_st {
    _unused: [u8; 0],
}
pub type ECDSA_SIG = ECDSA_SIG_st;
extern "C" {
    #[doc = " Allocates and initialize a ECDSA_SIG structure\n  \\return pointer to a ECDSA_SIG structure or NULL if an error occurred"]
    pub fn ECDSA_SIG_new() -> *mut ECDSA_SIG;
}
extern "C" {
    #[doc = " frees a ECDSA_SIG structure\n  \\param  sig  pointer to the ECDSA_SIG structure"]
    pub fn ECDSA_SIG_free(sig: *mut ECDSA_SIG);
}
extern "C" {
    pub fn d2i_ECDSA_SIG(
        a: *mut *mut ECDSA_SIG,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut ECDSA_SIG;
}
extern "C" {
    pub fn i2d_ECDSA_SIG(a: *const ECDSA_SIG, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Accessor for r and s fields of ECDSA_SIG\n  \\param  sig  pointer to ECDSA_SIG structure\n  \\param  pr   pointer to BIGNUM pointer for r (may be NULL)\n  \\param  ps   pointer to BIGNUM pointer for s (may be NULL)"]
    pub fn ECDSA_SIG_get0(sig: *const ECDSA_SIG, pr: *mut *const BIGNUM, ps: *mut *const BIGNUM);
}
extern "C" {
    #[doc = " Accessor for r field of ECDSA_SIG\n  \\param  sig  pointer to ECDSA_SIG structure"]
    pub fn ECDSA_SIG_get0_r(sig: *const ECDSA_SIG) -> *const BIGNUM;
}
extern "C" {
    #[doc = " Accessor for s field of ECDSA_SIG\n  \\param  sig  pointer to ECDSA_SIG structure"]
    pub fn ECDSA_SIG_get0_s(sig: *const ECDSA_SIG) -> *const BIGNUM;
}
extern "C" {
    #[doc = " Setter for r and s fields of ECDSA_SIG\n  \\param  sig  pointer to ECDSA_SIG structure\n  \\param  r    pointer to BIGNUM for r\n  \\param  s    pointer to BIGNUM for s"]
    pub fn ECDSA_SIG_set0(sig: *mut ECDSA_SIG, r: *mut BIGNUM, s: *mut BIGNUM) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Computes the ECDSA signature of the given hash value using\n  the supplied private key and returns the created signature.\n  \\param  dgst      pointer to the hash value\n  \\param  dgst_len  length of the hash value\n  \\param  eckey     EC_KEY object containing a private EC key\n  \\return pointer to a ECDSA_SIG structure or NULL if an error occurred"]
    pub fn ECDSA_do_sign(
        dgst: *const ::libc::c_uchar,
        dgst_len: ::libc::c_int,
        eckey: *mut EC_KEY,
    ) -> *mut ECDSA_SIG;
}
extern "C" {
    #[doc = " Computes ECDSA signature of a given hash value using the supplied\n  private key (note: sig must point to ECDSA_size(eckey) bytes of memory).\n  \\param  dgst     pointer to the hash value to sign\n  \\param  dgstlen  length of the hash value\n  \\param  kinv     BIGNUM with a pre-computed inverse k (optional)\n  \\param  rp       BIGNUM with a pre-computed rp value (optional),\n                   see ECDSA_sign_setup\n  \\param  eckey    EC_KEY object containing a private EC key\n  \\return pointer to a ECDSA_SIG structure or NULL if an error occurred"]
    pub fn ECDSA_do_sign_ex(
        dgst: *const ::libc::c_uchar,
        dgstlen: ::libc::c_int,
        kinv: *const BIGNUM,
        rp: *const BIGNUM,
        eckey: *mut EC_KEY,
    ) -> *mut ECDSA_SIG;
}
extern "C" {
    #[doc = " Verifies that the supplied signature is a valid ECDSA\n  signature of the supplied hash value using the supplied public key.\n  \\param  dgst      pointer to the hash value\n  \\param  dgst_len  length of the hash value\n  \\param  sig       ECDSA_SIG structure\n  \\param  eckey     EC_KEY object containing a public EC key\n  \\return 1 if the signature is valid, 0 if the signature is invalid\n          and -1 on error"]
    pub fn ECDSA_do_verify(
        dgst: *const ::libc::c_uchar,
        dgst_len: ::libc::c_int,
        sig: *const ECDSA_SIG,
        eckey: *mut EC_KEY,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Precompute parts of the signing operation\n  \\param  eckey  EC_KEY object containing a private EC key\n  \\param  ctx    BN_CTX object (optional)\n  \\param  kinv   BIGNUM pointer for the inverse of k\n  \\param  rp     BIGNUM pointer for x coordinate of k * generator\n  \\return 1 on success and 0 otherwise"]
    pub fn ECDSA_sign_setup(
        eckey: *mut EC_KEY,
        ctx: *mut BN_CTX,
        kinv: *mut *mut BIGNUM,
        rp: *mut *mut BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Computes ECDSA signature of a given hash value using the supplied\n  private key (note: sig must point to ECDSA_size(eckey) bytes of memory).\n  \\param  type     this parameter is ignored\n  \\param  dgst     pointer to the hash value to sign\n  \\param  dgstlen  length of the hash value\n  \\param  sig      memory for the DER encoded created signature\n  \\param  siglen   pointer to the length of the returned signature\n  \\param  eckey    EC_KEY object containing a private EC key\n  \\return 1 on success and 0 otherwise"]
    pub fn ECDSA_sign(
        type_: ::libc::c_int,
        dgst: *const ::libc::c_uchar,
        dgstlen: ::libc::c_int,
        sig: *mut ::libc::c_uchar,
        siglen: *mut ::libc::c_uint,
        eckey: *mut EC_KEY,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Computes ECDSA signature of a given hash value using the supplied\n  private key (note: sig must point to ECDSA_size(eckey) bytes of memory).\n  \\param  type     this parameter is ignored\n  \\param  dgst     pointer to the hash value to sign\n  \\param  dgstlen  length of the hash value\n  \\param  sig      buffer to hold the DER encoded signature\n  \\param  siglen   pointer to the length of the returned signature\n  \\param  kinv     BIGNUM with a pre-computed inverse k (optional)\n  \\param  rp       BIGNUM with a pre-computed rp value (optional),\n                   see ECDSA_sign_setup\n  \\param  eckey    EC_KEY object containing a private EC key\n  \\return 1 on success and 0 otherwise"]
    pub fn ECDSA_sign_ex(
        type_: ::libc::c_int,
        dgst: *const ::libc::c_uchar,
        dgstlen: ::libc::c_int,
        sig: *mut ::libc::c_uchar,
        siglen: *mut ::libc::c_uint,
        kinv: *const BIGNUM,
        rp: *const BIGNUM,
        eckey: *mut EC_KEY,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Verifies that the given signature is valid ECDSA signature\n  of the supplied hash value using the specified public key.\n  \\param  type     this parameter is ignored\n  \\param  dgst     pointer to the hash value\n  \\param  dgstlen  length of the hash value\n  \\param  sig      pointer to the DER encoded signature\n  \\param  siglen   length of the DER encoded signature\n  \\param  eckey    EC_KEY object containing a public EC key\n  \\return 1 if the signature is valid, 0 if the signature is invalid\n          and -1 on error"]
    pub fn ECDSA_verify(
        type_: ::libc::c_int,
        dgst: *const ::libc::c_uchar,
        dgstlen: ::libc::c_int,
        sig: *const ::libc::c_uchar,
        siglen: ::libc::c_int,
        eckey: *mut EC_KEY,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " Returns the maximum length of the DER encoded signature\n  \\param  eckey  EC_KEY object\n  \\return numbers of bytes required for the DER encoded signature"]
    pub fn ECDSA_size(eckey: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EC_KEY_METHOD_new(meth: *const EC_KEY_METHOD) -> *mut EC_KEY_METHOD;
}
extern "C" {
    pub fn EC_KEY_METHOD_free(meth: *mut EC_KEY_METHOD);
}
extern "C" {
    pub fn EC_KEY_METHOD_set_init(
        meth: *mut EC_KEY_METHOD,
        init: ::std::option::Option<unsafe extern "C" fn(key: *mut EC_KEY) -> ::libc::c_int>,
        finish: ::std::option::Option<unsafe extern "C" fn(key: *mut EC_KEY)>,
        copy: ::std::option::Option<
            unsafe extern "C" fn(dest: *mut EC_KEY, src: *const EC_KEY) -> ::libc::c_int,
        >,
        set_group: ::std::option::Option<
            unsafe extern "C" fn(key: *mut EC_KEY, grp: *const EC_GROUP) -> ::libc::c_int,
        >,
        set_private: ::std::option::Option<
            unsafe extern "C" fn(key: *mut EC_KEY, priv_key: *const BIGNUM) -> ::libc::c_int,
        >,
        set_public: ::std::option::Option<
            unsafe extern "C" fn(key: *mut EC_KEY, pub_key: *const EC_POINT) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EC_KEY_METHOD_set_keygen(
        meth: *mut EC_KEY_METHOD,
        keygen: ::std::option::Option<unsafe extern "C" fn(key: *mut EC_KEY) -> ::libc::c_int>,
    );
}
extern "C" {
    pub fn EC_KEY_METHOD_set_compute_key(
        meth: *mut EC_KEY_METHOD,
        ckey: ::std::option::Option<
            unsafe extern "C" fn(
                psec: *mut *mut ::libc::c_uchar,
                pseclen: *mut usize,
                pub_key: *const EC_POINT,
                ecdh: *const EC_KEY,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EC_KEY_METHOD_set_sign(
        meth: *mut EC_KEY_METHOD,
        sign: ::std::option::Option<
            unsafe extern "C" fn(
                type_: ::libc::c_int,
                dgst: *const ::libc::c_uchar,
                dlen: ::libc::c_int,
                sig: *mut ::libc::c_uchar,
                siglen: *mut ::libc::c_uint,
                kinv: *const BIGNUM,
                r: *const BIGNUM,
                eckey: *mut EC_KEY,
            ) -> ::libc::c_int,
        >,
        sign_setup: ::std::option::Option<
            unsafe extern "C" fn(
                eckey: *mut EC_KEY,
                ctx_in: *mut BN_CTX,
                kinvp: *mut *mut BIGNUM,
                rp: *mut *mut BIGNUM,
            ) -> ::libc::c_int,
        >,
        sign_sig: ::std::option::Option<
            unsafe extern "C" fn(
                dgst: *const ::libc::c_uchar,
                dgst_len: ::libc::c_int,
                in_kinv: *const BIGNUM,
                in_r: *const BIGNUM,
                eckey: *mut EC_KEY,
            ) -> *mut ECDSA_SIG,
        >,
    );
}
extern "C" {
    pub fn EC_KEY_METHOD_set_verify(
        meth: *mut EC_KEY_METHOD,
        verify: ::std::option::Option<
            unsafe extern "C" fn(
                type_: ::libc::c_int,
                dgst: *const ::libc::c_uchar,
                dgst_len: ::libc::c_int,
                sigbuf: *const ::libc::c_uchar,
                sig_len: ::libc::c_int,
                eckey: *mut EC_KEY,
            ) -> ::libc::c_int,
        >,
        verify_sig: ::std::option::Option<
            unsafe extern "C" fn(
                dgst: *const ::libc::c_uchar,
                dgst_len: ::libc::c_int,
                sig: *const ECDSA_SIG,
                eckey: *mut EC_KEY,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EC_KEY_METHOD_get_init(
        meth: *const EC_KEY_METHOD,
        pinit: *mut ::std::option::Option<unsafe extern "C" fn(key: *mut EC_KEY) -> ::libc::c_int>,
        pfinish: *mut ::std::option::Option<unsafe extern "C" fn(key: *mut EC_KEY)>,
        pcopy: *mut ::std::option::Option<
            unsafe extern "C" fn(dest: *mut EC_KEY, src: *const EC_KEY) -> ::libc::c_int,
        >,
        pset_group: *mut ::std::option::Option<
            unsafe extern "C" fn(key: *mut EC_KEY, grp: *const EC_GROUP) -> ::libc::c_int,
        >,
        pset_private: *mut ::std::option::Option<
            unsafe extern "C" fn(key: *mut EC_KEY, priv_key: *const BIGNUM) -> ::libc::c_int,
        >,
        pset_public: *mut ::std::option::Option<
            unsafe extern "C" fn(key: *mut EC_KEY, pub_key: *const EC_POINT) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EC_KEY_METHOD_get_keygen(
        meth: *const EC_KEY_METHOD,
        pkeygen: *mut ::std::option::Option<
            unsafe extern "C" fn(key: *mut EC_KEY) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EC_KEY_METHOD_get_compute_key(
        meth: *const EC_KEY_METHOD,
        pck: *mut ::std::option::Option<
            unsafe extern "C" fn(
                psec: *mut *mut ::libc::c_uchar,
                pseclen: *mut usize,
                pub_key: *const EC_POINT,
                ecdh: *const EC_KEY,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EC_KEY_METHOD_get_sign(
        meth: *const EC_KEY_METHOD,
        psign: *mut ::std::option::Option<
            unsafe extern "C" fn(
                type_: ::libc::c_int,
                dgst: *const ::libc::c_uchar,
                dlen: ::libc::c_int,
                sig: *mut ::libc::c_uchar,
                siglen: *mut ::libc::c_uint,
                kinv: *const BIGNUM,
                r: *const BIGNUM,
                eckey: *mut EC_KEY,
            ) -> ::libc::c_int,
        >,
        psign_setup: *mut ::std::option::Option<
            unsafe extern "C" fn(
                eckey: *mut EC_KEY,
                ctx_in: *mut BN_CTX,
                kinvp: *mut *mut BIGNUM,
                rp: *mut *mut BIGNUM,
            ) -> ::libc::c_int,
        >,
        psign_sig: *mut ::std::option::Option<
            unsafe extern "C" fn(
                dgst: *const ::libc::c_uchar,
                dgst_len: ::libc::c_int,
                in_kinv: *const BIGNUM,
                in_r: *const BIGNUM,
                eckey: *mut EC_KEY,
            ) -> *mut ECDSA_SIG,
        >,
    );
}
extern "C" {
    pub fn EC_KEY_METHOD_get_verify(
        meth: *const EC_KEY_METHOD,
        pverify: *mut ::std::option::Option<
            unsafe extern "C" fn(
                type_: ::libc::c_int,
                dgst: *const ::libc::c_uchar,
                dgst_len: ::libc::c_int,
                sigbuf: *const ::libc::c_uchar,
                sig_len: ::libc::c_int,
                eckey: *mut EC_KEY,
            ) -> ::libc::c_int,
        >,
        pverify_sig: *mut ::std::option::Option<
            unsafe extern "C" fn(
                dgst: *const ::libc::c_uchar,
                dgst_len: ::libc::c_int,
                sig: *const ECDSA_SIG,
                eckey: *mut EC_KEY,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_padding(
        ctx: *mut EVP_PKEY_CTX,
        pad_mode: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_rsa_padding(
        ctx: *mut EVP_PKEY_CTX,
        pad_mode: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_pss_saltlen(
        ctx: *mut EVP_PKEY_CTX,
        saltlen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_rsa_pss_saltlen(
        ctx: *mut EVP_PKEY_CTX,
        saltlen: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_keygen_bits(
        ctx: *mut EVP_PKEY_CTX,
        bits: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set1_rsa_keygen_pubexp(
        ctx: *mut EVP_PKEY_CTX,
        pubexp: *mut BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_keygen_primes(
        ctx: *mut EVP_PKEY_CTX,
        primes: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(
        ctx: *mut EVP_PKEY_CTX,
        saltlen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_keygen_pubexp(
        ctx: *mut EVP_PKEY_CTX,
        pubexp: *mut BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_mgf1_md(ctx: *mut EVP_PKEY_CTX, md: *const EVP_MD)
        -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_mgf1_md_name(
        ctx: *mut EVP_PKEY_CTX,
        mdname: *const ::libc::c_char,
        mdprops: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_rsa_mgf1_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *mut *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_rsa_mgf1_md_name(
        ctx: *mut EVP_PKEY_CTX,
        name: *mut ::libc::c_char,
        namelen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name(
        ctx: *mut EVP_PKEY_CTX,
        mdname: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_pss_keygen_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_pss_keygen_md_name(
        ctx: *mut EVP_PKEY_CTX,
        mdname: *const ::libc::c_char,
        mdprops: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_oaep_md(ctx: *mut EVP_PKEY_CTX, md: *const EVP_MD)
        -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_oaep_md_name(
        ctx: *mut EVP_PKEY_CTX,
        mdname: *const ::libc::c_char,
        mdprops: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_rsa_oaep_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *mut *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_rsa_oaep_md_name(
        ctx: *mut EVP_PKEY_CTX,
        name: *mut ::libc::c_char,
        namelen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set0_rsa_oaep_label(
        ctx: *mut EVP_PKEY_CTX,
        label: *mut ::libc::c_void,
        llen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_rsa_oaep_label(
        ctx: *mut EVP_PKEY_CTX,
        label: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_new() -> *mut RSA;
}
extern "C" {
    pub fn RSA_new_method(engine: *mut ENGINE) -> *mut RSA;
}
extern "C" {
    pub fn RSA_bits(rsa: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_size(rsa: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_security_bits(rsa: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_set0_key(
        r: *mut RSA,
        n: *mut BIGNUM,
        e: *mut BIGNUM,
        d: *mut BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_set0_factors(r: *mut RSA, p: *mut BIGNUM, q: *mut BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_set0_crt_params(
        r: *mut RSA,
        dmp1: *mut BIGNUM,
        dmq1: *mut BIGNUM,
        iqmp: *mut BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_set0_multi_prime_params(
        r: *mut RSA,
        primes: *mut *mut BIGNUM,
        exps: *mut *mut BIGNUM,
        coeffs: *mut *mut BIGNUM,
        pnum: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_get0_key(
        r: *const RSA,
        n: *mut *const BIGNUM,
        e: *mut *const BIGNUM,
        d: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn RSA_get0_factors(r: *const RSA, p: *mut *const BIGNUM, q: *mut *const BIGNUM);
}
extern "C" {
    pub fn RSA_get_multi_prime_extra_count(r: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_get0_multi_prime_factors(r: *const RSA, primes: *mut *const BIGNUM)
        -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_get0_crt_params(
        r: *const RSA,
        dmp1: *mut *const BIGNUM,
        dmq1: *mut *const BIGNUM,
        iqmp: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn RSA_get0_multi_prime_crt_params(
        r: *const RSA,
        exps: *mut *const BIGNUM,
        coeffs: *mut *const BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_get0_n(d: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_e(d: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_d(d: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_p(d: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_q(d: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_dmp1(r: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_dmq1(r: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_iqmp(r: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_pss_params(r: *const RSA) -> *const RSA_PSS_PARAMS;
}
extern "C" {
    pub fn RSA_clear_flags(r: *mut RSA, flags: ::libc::c_int);
}
extern "C" {
    pub fn RSA_test_flags(r: *const RSA, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_set_flags(r: *mut RSA, flags: ::libc::c_int);
}
extern "C" {
    pub fn RSA_get_version(r: *mut RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_get0_engine(r: *const RSA) -> *mut ENGINE;
}
extern "C" {
    pub fn RSA_generate_key(
        bits: ::libc::c_int,
        e: ::libc::c_ulong,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::libc::c_int,
                arg2: ::libc::c_int,
                arg3: *mut ::libc::c_void,
            ),
        >,
        cb_arg: *mut ::libc::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn RSA_generate_key_ex(
        rsa: *mut RSA,
        bits: ::libc::c_int,
        e: *mut BIGNUM,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_generate_multi_prime_key(
        rsa: *mut RSA,
        bits: ::libc::c_int,
        primes: ::libc::c_int,
        e: *mut BIGNUM,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_X931_derive_ex(
        rsa: *mut RSA,
        p1: *mut BIGNUM,
        p2: *mut BIGNUM,
        q1: *mut BIGNUM,
        q2: *mut BIGNUM,
        Xp1: *const BIGNUM,
        Xp2: *const BIGNUM,
        Xp: *const BIGNUM,
        Xq1: *const BIGNUM,
        Xq2: *const BIGNUM,
        Xq: *const BIGNUM,
        e: *const BIGNUM,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_X931_generate_key_ex(
        rsa: *mut RSA,
        bits: ::libc::c_int,
        e: *const BIGNUM,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_check_key(arg1: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_check_key_ex(arg1: *const RSA, cb: *mut BN_GENCB) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_public_encrypt(
        flen: ::libc::c_int,
        from: *const ::libc::c_uchar,
        to: *mut ::libc::c_uchar,
        rsa: *mut RSA,
        padding: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_private_encrypt(
        flen: ::libc::c_int,
        from: *const ::libc::c_uchar,
        to: *mut ::libc::c_uchar,
        rsa: *mut RSA,
        padding: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_public_decrypt(
        flen: ::libc::c_int,
        from: *const ::libc::c_uchar,
        to: *mut ::libc::c_uchar,
        rsa: *mut RSA,
        padding: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_private_decrypt(
        flen: ::libc::c_int,
        from: *const ::libc::c_uchar,
        to: *mut ::libc::c_uchar,
        rsa: *mut RSA,
        padding: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_free(r: *mut RSA);
}
extern "C" {
    pub fn RSA_up_ref(r: *mut RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_flags(r: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_set_default_method(meth: *const RSA_METHOD);
}
extern "C" {
    pub fn RSA_get_default_method() -> *const RSA_METHOD;
}
extern "C" {
    pub fn RSA_null_method() -> *const RSA_METHOD;
}
extern "C" {
    pub fn RSA_get_method(rsa: *const RSA) -> *const RSA_METHOD;
}
extern "C" {
    pub fn RSA_set_method(rsa: *mut RSA, meth: *const RSA_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_PKCS1_OpenSSL() -> *const RSA_METHOD;
}
extern "C" {
    pub fn d2i_RSAPublicKey(
        a: *mut *mut RSA,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPublicKey(a: *const RSA, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn RSAPublicKey_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn d2i_RSAPrivateKey(
        a: *mut *mut RSA,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPrivateKey(a: *const RSA, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn RSAPrivateKey_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn RSA_pkey_ctx_ctrl(
        ctx: *mut EVP_PKEY_CTX,
        optype: ::libc::c_int,
        cmd: ::libc::c_int,
        p1: ::libc::c_int,
        p2: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsa_pss_params_st {
    pub hashAlgorithm: *mut X509_ALGOR,
    pub maskGenAlgorithm: *mut X509_ALGOR,
    pub saltLength: *mut ASN1_INTEGER,
    pub trailerField: *mut ASN1_INTEGER,
    pub maskHash: *mut X509_ALGOR,
}
extern "C" {
    pub fn RSA_PSS_PARAMS_new() -> *mut RSA_PSS_PARAMS;
}
extern "C" {
    pub fn RSA_PSS_PARAMS_free(a: *mut RSA_PSS_PARAMS);
}
extern "C" {
    pub fn d2i_RSA_PSS_PARAMS(
        a: *mut *mut RSA_PSS_PARAMS,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut RSA_PSS_PARAMS;
}
extern "C" {
    pub fn i2d_RSA_PSS_PARAMS(
        a: *const RSA_PSS_PARAMS,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_PSS_PARAMS_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn RSA_PSS_PARAMS_dup(a: *const RSA_PSS_PARAMS) -> *mut RSA_PSS_PARAMS;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsa_oaep_params_st {
    pub hashFunc: *mut X509_ALGOR,
    pub maskGenFunc: *mut X509_ALGOR,
    pub pSourceFunc: *mut X509_ALGOR,
    pub maskHash: *mut X509_ALGOR,
}
pub type RSA_OAEP_PARAMS = rsa_oaep_params_st;
extern "C" {
    pub fn RSA_OAEP_PARAMS_new() -> *mut RSA_OAEP_PARAMS;
}
extern "C" {
    pub fn RSA_OAEP_PARAMS_free(a: *mut RSA_OAEP_PARAMS);
}
extern "C" {
    pub fn d2i_RSA_OAEP_PARAMS(
        a: *mut *mut RSA_OAEP_PARAMS,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut RSA_OAEP_PARAMS;
}
extern "C" {
    pub fn i2d_RSA_OAEP_PARAMS(
        a: *const RSA_OAEP_PARAMS,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_OAEP_PARAMS_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn RSA_print_fp(fp: *mut FILE, r: *const RSA, offset: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_print(bp: *mut BIO, r: *const RSA, offset: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_sign(
        type_: ::libc::c_int,
        m: *const ::libc::c_uchar,
        m_length: ::libc::c_uint,
        sigret: *mut ::libc::c_uchar,
        siglen: *mut ::libc::c_uint,
        rsa: *mut RSA,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_verify(
        type_: ::libc::c_int,
        m: *const ::libc::c_uchar,
        m_length: ::libc::c_uint,
        sigbuf: *const ::libc::c_uchar,
        siglen: ::libc::c_uint,
        rsa: *mut RSA,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_sign_ASN1_OCTET_STRING(
        type_: ::libc::c_int,
        m: *const ::libc::c_uchar,
        m_length: ::libc::c_uint,
        sigret: *mut ::libc::c_uchar,
        siglen: *mut ::libc::c_uint,
        rsa: *mut RSA,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_verify_ASN1_OCTET_STRING(
        type_: ::libc::c_int,
        m: *const ::libc::c_uchar,
        m_length: ::libc::c_uint,
        sigbuf: *mut ::libc::c_uchar,
        siglen: ::libc::c_uint,
        rsa: *mut RSA,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_blinding_on(rsa: *mut RSA, ctx: *mut BN_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_blinding_off(rsa: *mut RSA);
}
extern "C" {
    pub fn RSA_setup_blinding(rsa: *mut RSA, ctx: *mut BN_CTX) -> *mut BN_BLINDING;
}
extern "C" {
    pub fn RSA_padding_add_PKCS1_type_1(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        f: *const ::libc::c_uchar,
        fl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_check_PKCS1_type_1(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        f: *const ::libc::c_uchar,
        fl: ::libc::c_int,
        rsa_len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_add_PKCS1_type_2(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        f: *const ::libc::c_uchar,
        fl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_check_PKCS1_type_2(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        f: *const ::libc::c_uchar,
        fl: ::libc::c_int,
        rsa_len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS1_MGF1(
        mask: *mut ::libc::c_uchar,
        len: ::libc::c_long,
        seed: *const ::libc::c_uchar,
        seedlen: ::libc::c_long,
        dgst: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_add_PKCS1_OAEP(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        f: *const ::libc::c_uchar,
        fl: ::libc::c_int,
        p: *const ::libc::c_uchar,
        pl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_check_PKCS1_OAEP(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        f: *const ::libc::c_uchar,
        fl: ::libc::c_int,
        rsa_len: ::libc::c_int,
        p: *const ::libc::c_uchar,
        pl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_add_PKCS1_OAEP_mgf1(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        from: *const ::libc::c_uchar,
        flen: ::libc::c_int,
        param: *const ::libc::c_uchar,
        plen: ::libc::c_int,
        md: *const EVP_MD,
        mgf1md: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_check_PKCS1_OAEP_mgf1(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        from: *const ::libc::c_uchar,
        flen: ::libc::c_int,
        num: ::libc::c_int,
        param: *const ::libc::c_uchar,
        plen: ::libc::c_int,
        md: *const EVP_MD,
        mgf1md: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_add_none(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        f: *const ::libc::c_uchar,
        fl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_check_none(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        f: *const ::libc::c_uchar,
        fl: ::libc::c_int,
        rsa_len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_add_X931(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        f: *const ::libc::c_uchar,
        fl: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_check_X931(
        to: *mut ::libc::c_uchar,
        tlen: ::libc::c_int,
        f: *const ::libc::c_uchar,
        fl: ::libc::c_int,
        rsa_len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_X931_hash_id(nid: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_verify_PKCS1_PSS(
        rsa: *mut RSA,
        mHash: *const ::libc::c_uchar,
        Hash: *const EVP_MD,
        EM: *const ::libc::c_uchar,
        sLen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_add_PKCS1_PSS(
        rsa: *mut RSA,
        EM: *mut ::libc::c_uchar,
        mHash: *const ::libc::c_uchar,
        Hash: *const EVP_MD,
        sLen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_verify_PKCS1_PSS_mgf1(
        rsa: *mut RSA,
        mHash: *const ::libc::c_uchar,
        Hash: *const EVP_MD,
        mgf1Hash: *const EVP_MD,
        EM: *const ::libc::c_uchar,
        sLen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_padding_add_PKCS1_PSS_mgf1(
        rsa: *mut RSA,
        EM: *mut ::libc::c_uchar,
        mHash: *const ::libc::c_uchar,
        Hash: *const EVP_MD,
        mgf1Hash: *const EVP_MD,
        sLen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_set_ex_data(
        r: *mut RSA,
        idx: ::libc::c_int,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_get_ex_data(r: *const RSA, idx: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn RSAPublicKey_dup(a: *const RSA) -> *mut RSA;
}
extern "C" {
    pub fn RSAPrivateKey_dup(a: *const RSA) -> *mut RSA;
}
extern "C" {
    pub fn RSA_meth_new(name: *const ::libc::c_char, flags: ::libc::c_int) -> *mut RSA_METHOD;
}
extern "C" {
    pub fn RSA_meth_free(meth: *mut RSA_METHOD);
}
extern "C" {
    pub fn RSA_meth_dup(meth: *const RSA_METHOD) -> *mut RSA_METHOD;
}
extern "C" {
    pub fn RSA_meth_get0_name(meth: *const RSA_METHOD) -> *const ::libc::c_char;
}
extern "C" {
    pub fn RSA_meth_set1_name(meth: *mut RSA_METHOD, name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_flags(meth: *const RSA_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_set_flags(meth: *mut RSA_METHOD, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get0_app_data(meth: *const RSA_METHOD) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn RSA_meth_set0_app_data(
        meth: *mut RSA_METHOD,
        app_data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_pub_enc(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            meth: ::libc::c_int,
            arg1: *const ::libc::c_uchar,
            arg2: *mut ::libc::c_uchar,
            arg3: *mut RSA,
            arg4: ::libc::c_int,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn RSA_meth_set_pub_enc(
        rsa: *mut RSA_METHOD,
        pub_enc: ::std::option::Option<
            unsafe extern "C" fn(
                flen: ::libc::c_int,
                from: *const ::libc::c_uchar,
                to: *mut ::libc::c_uchar,
                rsa: *mut RSA,
                padding: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_pub_dec(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            meth: ::libc::c_int,
            arg1: *const ::libc::c_uchar,
            arg2: *mut ::libc::c_uchar,
            arg3: *mut RSA,
            arg4: ::libc::c_int,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn RSA_meth_set_pub_dec(
        rsa: *mut RSA_METHOD,
        pub_dec: ::std::option::Option<
            unsafe extern "C" fn(
                flen: ::libc::c_int,
                from: *const ::libc::c_uchar,
                to: *mut ::libc::c_uchar,
                rsa: *mut RSA,
                padding: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_priv_enc(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            meth: ::libc::c_int,
            arg1: *const ::libc::c_uchar,
            arg2: *mut ::libc::c_uchar,
            arg3: *mut RSA,
            arg4: ::libc::c_int,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn RSA_meth_set_priv_enc(
        rsa: *mut RSA_METHOD,
        priv_enc: ::std::option::Option<
            unsafe extern "C" fn(
                flen: ::libc::c_int,
                from: *const ::libc::c_uchar,
                to: *mut ::libc::c_uchar,
                rsa: *mut RSA,
                padding: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_priv_dec(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            meth: ::libc::c_int,
            arg1: *const ::libc::c_uchar,
            arg2: *mut ::libc::c_uchar,
            arg3: *mut RSA,
            arg4: ::libc::c_int,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn RSA_meth_set_priv_dec(
        rsa: *mut RSA_METHOD,
        priv_dec: ::std::option::Option<
            unsafe extern "C" fn(
                flen: ::libc::c_int,
                from: *const ::libc::c_uchar,
                to: *mut ::libc::c_uchar,
                rsa: *mut RSA,
                padding: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_mod_exp(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            meth: *mut BIGNUM,
            arg1: *const BIGNUM,
            arg2: *mut RSA,
            arg3: *mut BN_CTX,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn RSA_meth_set_mod_exp(
        rsa: *mut RSA_METHOD,
        mod_exp: ::std::option::Option<
            unsafe extern "C" fn(
                r0: *mut BIGNUM,
                i: *const BIGNUM,
                rsa: *mut RSA,
                ctx: *mut BN_CTX,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_bn_mod_exp(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            meth: *mut BIGNUM,
            arg1: *const BIGNUM,
            arg2: *const BIGNUM,
            arg3: *const BIGNUM,
            arg4: *mut BN_CTX,
            arg5: *mut BN_MONT_CTX,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn RSA_meth_set_bn_mod_exp(
        rsa: *mut RSA_METHOD,
        bn_mod_exp: ::std::option::Option<
            unsafe extern "C" fn(
                r: *mut BIGNUM,
                a: *const BIGNUM,
                p: *const BIGNUM,
                m: *const BIGNUM,
                ctx: *mut BN_CTX,
                m_ctx: *mut BN_MONT_CTX,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_init(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(meth: *mut RSA) -> ::libc::c_int>;
}
extern "C" {
    pub fn RSA_meth_set_init(
        rsa: *mut RSA_METHOD,
        init: ::std::option::Option<unsafe extern "C" fn(rsa: *mut RSA) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_finish(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(meth: *mut RSA) -> ::libc::c_int>;
}
extern "C" {
    pub fn RSA_meth_set_finish(
        rsa: *mut RSA_METHOD,
        finish: ::std::option::Option<unsafe extern "C" fn(rsa: *mut RSA) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_sign(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            meth: ::libc::c_int,
            arg1: *const ::libc::c_uchar,
            arg2: ::libc::c_uint,
            arg3: *mut ::libc::c_uchar,
            arg4: *mut ::libc::c_uint,
            arg5: *const RSA,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn RSA_meth_set_sign(
        rsa: *mut RSA_METHOD,
        sign: ::std::option::Option<
            unsafe extern "C" fn(
                type_: ::libc::c_int,
                m: *const ::libc::c_uchar,
                m_length: ::libc::c_uint,
                sigret: *mut ::libc::c_uchar,
                siglen: *mut ::libc::c_uint,
                rsa: *const RSA,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_verify(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            meth: ::libc::c_int,
            arg1: *const ::libc::c_uchar,
            arg2: ::libc::c_uint,
            arg3: *const ::libc::c_uchar,
            arg4: ::libc::c_uint,
            arg5: *const RSA,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn RSA_meth_set_verify(
        rsa: *mut RSA_METHOD,
        verify: ::std::option::Option<
            unsafe extern "C" fn(
                dtype: ::libc::c_int,
                m: *const ::libc::c_uchar,
                m_length: ::libc::c_uint,
                sigbuf: *const ::libc::c_uchar,
                siglen: ::libc::c_uint,
                rsa: *const RSA,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_keygen(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            meth: *mut RSA,
            arg1: ::libc::c_int,
            arg2: *mut BIGNUM,
            arg3: *mut BN_GENCB,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn RSA_meth_set_keygen(
        rsa: *mut RSA_METHOD,
        keygen: ::std::option::Option<
            unsafe extern "C" fn(
                rsa: *mut RSA,
                bits: ::libc::c_int,
                e: *mut BIGNUM,
                cb: *mut BN_GENCB,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RSA_meth_get_multi_prime_keygen(
        meth: *const RSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            meth: *mut RSA,
            arg1: ::libc::c_int,
            arg2: ::libc::c_int,
            arg3: *mut BIGNUM,
            arg4: *mut BN_GENCB,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn RSA_meth_set_multi_prime_keygen(
        meth: *mut RSA_METHOD,
        keygen: ::std::option::Option<
            unsafe extern "C" fn(
                rsa: *mut RSA,
                bits: ::libc::c_int,
                primes: ::libc::c_int,
                e: *mut BIGNUM,
                cb: *mut BN_GENCB,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dsa_paramgen_bits(
        ctx: *mut EVP_PKEY_CTX,
        nbits: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dsa_paramgen_q_bits(
        ctx: *mut EVP_PKEY_CTX,
        qbits: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dsa_paramgen_md_props(
        ctx: *mut EVP_PKEY_CTX,
        md_name: *const ::libc::c_char,
        md_properties: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dsa_paramgen_gindex(
        ctx: *mut EVP_PKEY_CTX,
        gindex: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dsa_paramgen_type(
        ctx: *mut EVP_PKEY_CTX,
        name: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dsa_paramgen_seed(
        ctx: *mut EVP_PKEY_CTX,
        seed: *const ::libc::c_uchar,
        seedlen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dsa_paramgen_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_paramgen_type(
        ctx: *mut EVP_PKEY_CTX,
        typ: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_paramgen_gindex(
        ctx: *mut EVP_PKEY_CTX,
        gindex: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_paramgen_seed(
        ctx: *mut EVP_PKEY_CTX,
        seed: *const ::libc::c_uchar,
        seedlen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_paramgen_prime_len(
        ctx: *mut EVP_PKEY_CTX,
        pbits: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_paramgen_subprime_len(
        ctx: *mut EVP_PKEY_CTX,
        qlen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_paramgen_generator(
        ctx: *mut EVP_PKEY_CTX,
        gen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_nid(ctx: *mut EVP_PKEY_CTX, nid: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_rfc5114(ctx: *mut EVP_PKEY_CTX, gen: ::libc::c_int)
        -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dhx_rfc5114(
        ctx: *mut EVP_PKEY_CTX,
        gen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_pad(ctx: *mut EVP_PKEY_CTX, pad: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_kdf_type(
        ctx: *mut EVP_PKEY_CTX,
        kdf: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_dh_kdf_type(ctx: *mut EVP_PKEY_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set0_dh_kdf_oid(
        ctx: *mut EVP_PKEY_CTX,
        oid: *mut ASN1_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_dh_kdf_oid(
        ctx: *mut EVP_PKEY_CTX,
        oid: *mut *mut ASN1_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_kdf_md(ctx: *mut EVP_PKEY_CTX, md: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_dh_kdf_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *mut *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_dh_kdf_outlen(
        ctx: *mut EVP_PKEY_CTX,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_dh_kdf_outlen(
        ctx: *mut EVP_PKEY_CTX,
        len: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set0_dh_kdf_ukm(
        ctx: *mut EVP_PKEY_CTX,
        ukm: *mut ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_dh_kdf_ukm(
        ctx: *mut EVP_PKEY_CTX,
        ukm: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DHparams_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn DHparams_dup(a: *const DH) -> *mut DH;
}
extern "C" {
    pub fn DH_OpenSSL() -> *const DH_METHOD;
}
extern "C" {
    pub fn DH_set_default_method(meth: *const DH_METHOD);
}
extern "C" {
    pub fn DH_get_default_method() -> *const DH_METHOD;
}
extern "C" {
    pub fn DH_set_method(dh: *mut DH, meth: *const DH_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_new_method(engine: *mut ENGINE) -> *mut DH;
}
extern "C" {
    pub fn DH_new() -> *mut DH;
}
extern "C" {
    pub fn DH_free(dh: *mut DH);
}
extern "C" {
    pub fn DH_up_ref(dh: *mut DH) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_bits(dh: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_size(dh: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_security_bits(dh: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_set_ex_data(
        d: *mut DH,
        idx: ::libc::c_int,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_get_ex_data(d: *const DH, idx: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn DH_generate_parameters_ex(
        dh: *mut DH,
        prime_len: ::libc::c_int,
        generator: ::libc::c_int,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_check_params_ex(dh: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_check_ex(dh: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_check_pub_key_ex(dh: *const DH, pub_key: *const BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_check_params(dh: *const DH, ret: *mut ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_check(dh: *const DH, codes: *mut ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_check_pub_key(
        dh: *const DH,
        pub_key: *const BIGNUM,
        codes: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_generate_key(dh: *mut DH) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_compute_key(
        key: *mut ::libc::c_uchar,
        pub_key: *const BIGNUM,
        dh: *mut DH,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_compute_key_padded(
        key: *mut ::libc::c_uchar,
        pub_key: *const BIGNUM,
        dh: *mut DH,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_DHparams(
        a: *mut *mut DH,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut DH;
}
extern "C" {
    pub fn i2d_DHparams(a: *const DH, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_DHxparams(
        a: *mut *mut DH,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut DH;
}
extern "C" {
    pub fn i2d_DHxparams(a: *const DH, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn DHparams_print_fp(fp: *mut FILE, x: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn DHparams_print(bp: *mut BIO, x: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_get_1024_160() -> *mut DH;
}
extern "C" {
    pub fn DH_get_2048_224() -> *mut DH;
}
extern "C" {
    pub fn DH_get_2048_256() -> *mut DH;
}
extern "C" {
    pub fn DH_new_by_nid(nid: ::libc::c_int) -> *mut DH;
}
extern "C" {
    pub fn DH_get_nid(dh: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_KDF_X9_42(
        out: *mut ::libc::c_uchar,
        outlen: usize,
        Z: *const ::libc::c_uchar,
        Zlen: usize,
        key_oid: *mut ASN1_OBJECT,
        ukm: *const ::libc::c_uchar,
        ukmlen: usize,
        md: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_get0_pqg(
        dh: *const DH,
        p: *mut *const BIGNUM,
        q: *mut *const BIGNUM,
        g: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn DH_set0_pqg(
        dh: *mut DH,
        p: *mut BIGNUM,
        q: *mut BIGNUM,
        g: *mut BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_get0_key(dh: *const DH, pub_key: *mut *const BIGNUM, priv_key: *mut *const BIGNUM);
}
extern "C" {
    pub fn DH_set0_key(dh: *mut DH, pub_key: *mut BIGNUM, priv_key: *mut BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_get0_p(dh: *const DH) -> *const BIGNUM;
}
extern "C" {
    pub fn DH_get0_q(dh: *const DH) -> *const BIGNUM;
}
extern "C" {
    pub fn DH_get0_g(dh: *const DH) -> *const BIGNUM;
}
extern "C" {
    pub fn DH_get0_priv_key(dh: *const DH) -> *const BIGNUM;
}
extern "C" {
    pub fn DH_get0_pub_key(dh: *const DH) -> *const BIGNUM;
}
extern "C" {
    pub fn DH_clear_flags(dh: *mut DH, flags: ::libc::c_int);
}
extern "C" {
    pub fn DH_test_flags(dh: *const DH, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_set_flags(dh: *mut DH, flags: ::libc::c_int);
}
extern "C" {
    pub fn DH_get0_engine(d: *mut DH) -> *mut ENGINE;
}
extern "C" {
    pub fn DH_get_length(dh: *const DH) -> ::libc::c_long;
}
extern "C" {
    pub fn DH_set_length(dh: *mut DH, length: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_meth_new(name: *const ::libc::c_char, flags: ::libc::c_int) -> *mut DH_METHOD;
}
extern "C" {
    pub fn DH_meth_free(dhm: *mut DH_METHOD);
}
extern "C" {
    pub fn DH_meth_dup(dhm: *const DH_METHOD) -> *mut DH_METHOD;
}
extern "C" {
    pub fn DH_meth_get0_name(dhm: *const DH_METHOD) -> *const ::libc::c_char;
}
extern "C" {
    pub fn DH_meth_set1_name(dhm: *mut DH_METHOD, name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_meth_get_flags(dhm: *const DH_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_meth_set_flags(dhm: *mut DH_METHOD, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_meth_get0_app_data(dhm: *const DH_METHOD) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn DH_meth_set0_app_data(
        dhm: *mut DH_METHOD,
        app_data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_meth_get_generate_key(
        dhm: *const DH_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(dhm: *mut DH) -> ::libc::c_int>;
}
extern "C" {
    pub fn DH_meth_set_generate_key(
        dhm: *mut DH_METHOD,
        generate_key: ::std::option::Option<unsafe extern "C" fn(arg1: *mut DH) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_meth_get_compute_key(
        dhm: *const DH_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            dhm: *mut ::libc::c_uchar,
            arg1: *const BIGNUM,
            arg2: *mut DH,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn DH_meth_set_compute_key(
        dhm: *mut DH_METHOD,
        compute_key: ::std::option::Option<
            unsafe extern "C" fn(
                key: *mut ::libc::c_uchar,
                pub_key: *const BIGNUM,
                dh: *mut DH,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_meth_get_bn_mod_exp(
        dhm: *const DH_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            dhm: *const DH,
            arg1: *mut BIGNUM,
            arg2: *const BIGNUM,
            arg3: *const BIGNUM,
            arg4: *const BIGNUM,
            arg5: *mut BN_CTX,
            arg6: *mut BN_MONT_CTX,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn DH_meth_set_bn_mod_exp(
        dhm: *mut DH_METHOD,
        bn_mod_exp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const DH,
                arg2: *mut BIGNUM,
                arg3: *const BIGNUM,
                arg4: *const BIGNUM,
                arg5: *const BIGNUM,
                arg6: *mut BN_CTX,
                arg7: *mut BN_MONT_CTX,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_meth_get_init(
        dhm: *const DH_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(dhm: *mut DH) -> ::libc::c_int>;
}
extern "C" {
    pub fn DH_meth_set_init(
        dhm: *mut DH_METHOD,
        init: ::std::option::Option<unsafe extern "C" fn(arg1: *mut DH) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_meth_get_finish(
        dhm: *const DH_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(dhm: *mut DH) -> ::libc::c_int>;
}
extern "C" {
    pub fn DH_meth_set_finish(
        dhm: *mut DH_METHOD,
        finish: ::std::option::Option<unsafe extern "C" fn(arg1: *mut DH) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_meth_get_generate_params(
        dhm: *const DH_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            dhm: *mut DH,
            arg1: ::libc::c_int,
            arg2: ::libc::c_int,
            arg3: *mut BN_GENCB,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn DH_meth_set_generate_params(
        dhm: *mut DH_METHOD,
        generate_params: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut DH,
                arg2: ::libc::c_int,
                arg3: ::libc::c_int,
                arg4: *mut BN_GENCB,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DH_generate_parameters(
        prime_len: ::libc::c_int,
        generator: ::libc::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::libc::c_int,
                arg2: ::libc::c_int,
                arg3: *mut ::libc::c_void,
            ),
        >,
        cb_arg: *mut ::libc::c_void,
    ) -> *mut DH;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DSA_SIG_st {
    _unused: [u8; 0],
}
pub type DSA_SIG = DSA_SIG_st;
extern "C" {
    pub fn DSA_SIG_new() -> *mut DSA_SIG;
}
extern "C" {
    pub fn DSA_SIG_free(a: *mut DSA_SIG);
}
extern "C" {
    pub fn d2i_DSA_SIG(
        a: *mut *mut DSA_SIG,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut DSA_SIG;
}
extern "C" {
    pub fn i2d_DSA_SIG(a: *const DSA_SIG, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_SIG_get0(sig: *const DSA_SIG, pr: *mut *const BIGNUM, ps: *mut *const BIGNUM);
}
extern "C" {
    pub fn DSA_SIG_set0(sig: *mut DSA_SIG, r: *mut BIGNUM, s: *mut BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn DSAparams_dup(a: *const DSA) -> *mut DSA;
}
extern "C" {
    pub fn DSA_do_sign(
        dgst: *const ::libc::c_uchar,
        dlen: ::libc::c_int,
        dsa: *mut DSA,
    ) -> *mut DSA_SIG;
}
extern "C" {
    pub fn DSA_do_verify(
        dgst: *const ::libc::c_uchar,
        dgst_len: ::libc::c_int,
        sig: *mut DSA_SIG,
        dsa: *mut DSA,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_OpenSSL() -> *const DSA_METHOD;
}
extern "C" {
    pub fn DSA_set_default_method(arg1: *const DSA_METHOD);
}
extern "C" {
    pub fn DSA_get_default_method() -> *const DSA_METHOD;
}
extern "C" {
    pub fn DSA_set_method(dsa: *mut DSA, arg1: *const DSA_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_get_method(d: *mut DSA) -> *const DSA_METHOD;
}
extern "C" {
    pub fn DSA_new() -> *mut DSA;
}
extern "C" {
    pub fn DSA_new_method(engine: *mut ENGINE) -> *mut DSA;
}
extern "C" {
    pub fn DSA_free(r: *mut DSA);
}
extern "C" {
    pub fn DSA_up_ref(r: *mut DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_size(arg1: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_bits(d: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_security_bits(d: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_sign_setup(
        dsa: *mut DSA,
        ctx_in: *mut BN_CTX,
        kinvp: *mut *mut BIGNUM,
        rp: *mut *mut BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_sign(
        type_: ::libc::c_int,
        dgst: *const ::libc::c_uchar,
        dlen: ::libc::c_int,
        sig: *mut ::libc::c_uchar,
        siglen: *mut ::libc::c_uint,
        dsa: *mut DSA,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_verify(
        type_: ::libc::c_int,
        dgst: *const ::libc::c_uchar,
        dgst_len: ::libc::c_int,
        sigbuf: *const ::libc::c_uchar,
        siglen: ::libc::c_int,
        dsa: *mut DSA,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_set_ex_data(
        d: *mut DSA,
        idx: ::libc::c_int,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_get_ex_data(d: *const DSA, idx: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn d2i_DSAPublicKey(
        a: *mut *mut DSA,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSAPublicKey(a: *const DSA, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_DSAPrivateKey(
        a: *mut *mut DSA,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSAPrivateKey(a: *const DSA, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_DSAparams(
        a: *mut *mut DSA,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSAparams(a: *const DSA, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_generate_parameters(
        bits: ::libc::c_int,
        seed: *mut ::libc::c_uchar,
        seed_len: ::libc::c_int,
        counter_ret: *mut ::libc::c_int,
        h_ret: *mut ::libc::c_ulong,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::libc::c_int,
                arg2: ::libc::c_int,
                arg3: *mut ::libc::c_void,
            ),
        >,
        cb_arg: *mut ::libc::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn DSA_generate_parameters_ex(
        dsa: *mut DSA,
        bits: ::libc::c_int,
        seed: *const ::libc::c_uchar,
        seed_len: ::libc::c_int,
        counter_ret: *mut ::libc::c_int,
        h_ret: *mut ::libc::c_ulong,
        cb: *mut BN_GENCB,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_generate_key(a: *mut DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn DSAparams_print(bp: *mut BIO, x: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_print(bp: *mut BIO, x: *const DSA, off: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn DSAparams_print_fp(fp: *mut FILE, x: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_print_fp(bp: *mut FILE, x: *const DSA, off: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_dup_DH(r: *const DSA) -> *mut DH;
}
extern "C" {
    pub fn DSA_get0_pqg(
        d: *const DSA,
        p: *mut *const BIGNUM,
        q: *mut *const BIGNUM,
        g: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn DSA_set0_pqg(
        d: *mut DSA,
        p: *mut BIGNUM,
        q: *mut BIGNUM,
        g: *mut BIGNUM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_get0_key(d: *const DSA, pub_key: *mut *const BIGNUM, priv_key: *mut *const BIGNUM);
}
extern "C" {
    pub fn DSA_set0_key(d: *mut DSA, pub_key: *mut BIGNUM, priv_key: *mut BIGNUM) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_get0_p(d: *const DSA) -> *const BIGNUM;
}
extern "C" {
    pub fn DSA_get0_q(d: *const DSA) -> *const BIGNUM;
}
extern "C" {
    pub fn DSA_get0_g(d: *const DSA) -> *const BIGNUM;
}
extern "C" {
    pub fn DSA_get0_pub_key(d: *const DSA) -> *const BIGNUM;
}
extern "C" {
    pub fn DSA_get0_priv_key(d: *const DSA) -> *const BIGNUM;
}
extern "C" {
    pub fn DSA_clear_flags(d: *mut DSA, flags: ::libc::c_int);
}
extern "C" {
    pub fn DSA_test_flags(d: *const DSA, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_set_flags(d: *mut DSA, flags: ::libc::c_int);
}
extern "C" {
    pub fn DSA_get0_engine(d: *mut DSA) -> *mut ENGINE;
}
extern "C" {
    pub fn DSA_meth_new(name: *const ::libc::c_char, flags: ::libc::c_int) -> *mut DSA_METHOD;
}
extern "C" {
    pub fn DSA_meth_free(dsam: *mut DSA_METHOD);
}
extern "C" {
    pub fn DSA_meth_dup(dsam: *const DSA_METHOD) -> *mut DSA_METHOD;
}
extern "C" {
    pub fn DSA_meth_get0_name(dsam: *const DSA_METHOD) -> *const ::libc::c_char;
}
extern "C" {
    pub fn DSA_meth_set1_name(dsam: *mut DSA_METHOD, name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get_flags(dsam: *const DSA_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_set_flags(dsam: *mut DSA_METHOD, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get0_app_data(dsam: *const DSA_METHOD) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn DSA_meth_set0_app_data(
        dsam: *mut DSA_METHOD,
        app_data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get_sign(
        dsam: *const DSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            dsam: *const ::libc::c_uchar,
            arg1: ::libc::c_int,
            arg2: *mut DSA,
        ) -> *mut DSA_SIG,
    >;
}
extern "C" {
    pub fn DSA_meth_set_sign(
        dsam: *mut DSA_METHOD,
        sign: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::libc::c_uchar,
                arg2: ::libc::c_int,
                arg3: *mut DSA,
            ) -> *mut DSA_SIG,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get_sign_setup(
        dsam: *const DSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            dsam: *mut DSA,
            arg1: *mut BN_CTX,
            arg2: *mut *mut BIGNUM,
            arg3: *mut *mut BIGNUM,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn DSA_meth_set_sign_setup(
        dsam: *mut DSA_METHOD,
        sign_setup: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut DSA,
                arg2: *mut BN_CTX,
                arg3: *mut *mut BIGNUM,
                arg4: *mut *mut BIGNUM,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get_verify(
        dsam: *const DSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            dsam: *const ::libc::c_uchar,
            arg1: ::libc::c_int,
            arg2: *mut DSA_SIG,
            arg3: *mut DSA,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn DSA_meth_set_verify(
        dsam: *mut DSA_METHOD,
        verify: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::libc::c_uchar,
                arg2: ::libc::c_int,
                arg3: *mut DSA_SIG,
                arg4: *mut DSA,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get_mod_exp(
        dsam: *const DSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            dsam: *mut DSA,
            arg1: *mut BIGNUM,
            arg2: *const BIGNUM,
            arg3: *const BIGNUM,
            arg4: *const BIGNUM,
            arg5: *const BIGNUM,
            arg6: *const BIGNUM,
            arg7: *mut BN_CTX,
            arg8: *mut BN_MONT_CTX,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn DSA_meth_set_mod_exp(
        dsam: *mut DSA_METHOD,
        mod_exp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut DSA,
                arg2: *mut BIGNUM,
                arg3: *const BIGNUM,
                arg4: *const BIGNUM,
                arg5: *const BIGNUM,
                arg6: *const BIGNUM,
                arg7: *const BIGNUM,
                arg8: *mut BN_CTX,
                arg9: *mut BN_MONT_CTX,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get_bn_mod_exp(
        dsam: *const DSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            dsam: *mut DSA,
            arg1: *mut BIGNUM,
            arg2: *const BIGNUM,
            arg3: *const BIGNUM,
            arg4: *const BIGNUM,
            arg5: *mut BN_CTX,
            arg6: *mut BN_MONT_CTX,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn DSA_meth_set_bn_mod_exp(
        dsam: *mut DSA_METHOD,
        bn_mod_exp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut DSA,
                arg2: *mut BIGNUM,
                arg3: *const BIGNUM,
                arg4: *const BIGNUM,
                arg5: *const BIGNUM,
                arg6: *mut BN_CTX,
                arg7: *mut BN_MONT_CTX,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get_init(
        dsam: *const DSA_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(dsam: *mut DSA) -> ::libc::c_int>;
}
extern "C" {
    pub fn DSA_meth_set_init(
        dsam: *mut DSA_METHOD,
        init: ::std::option::Option<unsafe extern "C" fn(arg1: *mut DSA) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get_finish(
        dsam: *const DSA_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(dsam: *mut DSA) -> ::libc::c_int>;
}
extern "C" {
    pub fn DSA_meth_set_finish(
        dsam: *mut DSA_METHOD,
        finish: ::std::option::Option<unsafe extern "C" fn(arg1: *mut DSA) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get_paramgen(
        dsam: *const DSA_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            dsam: *mut DSA,
            arg1: ::libc::c_int,
            arg2: *const ::libc::c_uchar,
            arg3: ::libc::c_int,
            arg4: *mut ::libc::c_int,
            arg5: *mut ::libc::c_ulong,
            arg6: *mut BN_GENCB,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn DSA_meth_set_paramgen(
        dsam: *mut DSA_METHOD,
        paramgen: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut DSA,
                arg2: ::libc::c_int,
                arg3: *const ::libc::c_uchar,
                arg4: ::libc::c_int,
                arg5: *mut ::libc::c_int,
                arg6: *mut ::libc::c_ulong,
                arg7: *mut BN_GENCB,
            ) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn DSA_meth_get_keygen(
        dsam: *const DSA_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(dsam: *mut DSA) -> ::libc::c_int>;
}
extern "C" {
    pub fn DSA_meth_set_keygen(
        dsam: *mut DSA_METHOD,
        keygen: ::std::option::Option<unsafe extern "C" fn(arg1: *mut DSA) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SHAstate_st {
    pub h0: ::libc::c_uint,
    pub h1: ::libc::c_uint,
    pub h2: ::libc::c_uint,
    pub h3: ::libc::c_uint,
    pub h4: ::libc::c_uint,
    pub Nl: ::libc::c_uint,
    pub Nh: ::libc::c_uint,
    pub data: [::libc::c_uint; 16usize],
    pub num: ::libc::c_uint,
}
pub type SHA_CTX = SHAstate_st;
extern "C" {
    pub fn SHA1_Init(c: *mut SHA_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA1_Update(c: *mut SHA_CTX, data: *const ::libc::c_void, len: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA1_Final(md: *mut ::libc::c_uchar, c: *mut SHA_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA1_Transform(c: *mut SHA_CTX, data: *const ::libc::c_uchar);
}
extern "C" {
    pub fn SHA1(
        d: *const ::libc::c_uchar,
        n: usize,
        md: *mut ::libc::c_uchar,
    ) -> *mut ::libc::c_uchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SHA256state_st {
    pub h: [::libc::c_uint; 8usize],
    pub Nl: ::libc::c_uint,
    pub Nh: ::libc::c_uint,
    pub data: [::libc::c_uint; 16usize],
    pub num: ::libc::c_uint,
    pub md_len: ::libc::c_uint,
}
pub type SHA256_CTX = SHA256state_st;
extern "C" {
    pub fn SHA224_Init(c: *mut SHA256_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA224_Update(
        c: *mut SHA256_CTX,
        data: *const ::libc::c_void,
        len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA224_Final(md: *mut ::libc::c_uchar, c: *mut SHA256_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA256_Init(c: *mut SHA256_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA256_Update(
        c: *mut SHA256_CTX,
        data: *const ::libc::c_void,
        len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA256_Final(md: *mut ::libc::c_uchar, c: *mut SHA256_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA256_Transform(c: *mut SHA256_CTX, data: *const ::libc::c_uchar);
}
extern "C" {
    pub fn SHA224(
        d: *const ::libc::c_uchar,
        n: usize,
        md: *mut ::libc::c_uchar,
    ) -> *mut ::libc::c_uchar;
}
extern "C" {
    pub fn SHA256(
        d: *const ::libc::c_uchar,
        n: usize,
        md: *mut ::libc::c_uchar,
    ) -> *mut ::libc::c_uchar;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SHA512state_st {
    pub h: [::libc::c_ulonglong; 8usize],
    pub Nl: ::libc::c_ulonglong,
    pub Nh: ::libc::c_ulonglong,
    pub u: SHA512state_st__bindgen_ty_1,
    pub num: ::libc::c_uint,
    pub md_len: ::libc::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SHA512state_st__bindgen_ty_1 {
    pub d: [::libc::c_ulonglong; 16usize],
    pub p: [::libc::c_uchar; 128usize],
}
pub type SHA512_CTX = SHA512state_st;
extern "C" {
    pub fn SHA384_Init(c: *mut SHA512_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA384_Update(
        c: *mut SHA512_CTX,
        data: *const ::libc::c_void,
        len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA384_Final(md: *mut ::libc::c_uchar, c: *mut SHA512_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA512_Init(c: *mut SHA512_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA512_Update(
        c: *mut SHA512_CTX,
        data: *const ::libc::c_void,
        len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA512_Final(md: *mut ::libc::c_uchar, c: *mut SHA512_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn SHA512_Transform(c: *mut SHA512_CTX, data: *const ::libc::c_uchar);
}
extern "C" {
    pub fn SHA384(
        d: *const ::libc::c_uchar,
        n: usize,
        md: *mut ::libc::c_uchar,
    ) -> *mut ::libc::c_uchar;
}
extern "C" {
    pub fn SHA512(
        d: *const ::libc::c_uchar,
        n: usize,
        md: *mut ::libc::c_uchar,
    ) -> *mut ::libc::c_uchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_NAME {
    _unused: [u8; 0],
}
pub type sk_X509_NAME_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const X509_NAME, b: *const *const X509_NAME) -> ::libc::c_int,
>;
pub type sk_X509_NAME_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut X509_NAME)>;
pub type sk_X509_NAME_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_NAME) -> *mut X509_NAME>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509 {
    _unused: [u8; 0],
}
pub type sk_X509_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const X509, b: *const *const X509) -> ::libc::c_int,
>;
pub type sk_X509_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut X509)>;
pub type sk_X509_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509) -> *mut X509>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_REVOKED {
    _unused: [u8; 0],
}
pub type sk_X509_REVOKED_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const X509_REVOKED,
        b: *const *const X509_REVOKED,
    ) -> ::libc::c_int,
>;
pub type sk_X509_REVOKED_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut X509_REVOKED)>;
pub type sk_X509_REVOKED_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_REVOKED) -> *mut X509_REVOKED>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_CRL {
    _unused: [u8; 0],
}
pub type sk_X509_CRL_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const X509_CRL, b: *const *const X509_CRL) -> ::libc::c_int,
>;
pub type sk_X509_CRL_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut X509_CRL)>;
pub type sk_X509_CRL_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_CRL) -> *mut X509_CRL>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_algor_st {
    pub algorithm: *mut ASN1_OBJECT,
    pub parameter: *mut ASN1_TYPE,
}
pub type X509_ALGORS = stack_st_X509_ALGOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_val_st {
    pub notBefore: *mut ASN1_TIME,
    pub notAfter: *mut ASN1_TIME,
}
pub type X509_VAL = X509_val_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_sig_st {
    _unused: [u8; 0],
}
pub type X509_SIG = X509_sig_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_name_entry_st {
    _unused: [u8; 0],
}
pub type X509_NAME_ENTRY = X509_name_entry_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_NAME_ENTRY {
    _unused: [u8; 0],
}
pub type sk_X509_NAME_ENTRY_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const X509_NAME_ENTRY,
        b: *const *const X509_NAME_ENTRY,
    ) -> ::libc::c_int,
>;
pub type sk_X509_NAME_ENTRY_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut X509_NAME_ENTRY)>;
pub type sk_X509_NAME_ENTRY_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_NAME_ENTRY) -> *mut X509_NAME_ENTRY>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_extension_st {
    _unused: [u8; 0],
}
pub type X509_EXTENSION = X509_extension_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_EXTENSION {
    _unused: [u8; 0],
}
pub type sk_X509_EXTENSION_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const X509_EXTENSION,
        b: *const *const X509_EXTENSION,
    ) -> ::libc::c_int,
>;
pub type sk_X509_EXTENSION_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut X509_EXTENSION)>;
pub type sk_X509_EXTENSION_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_EXTENSION) -> *mut X509_EXTENSION>;
pub type X509_EXTENSIONS = stack_st_X509_EXTENSION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_attributes_st {
    _unused: [u8; 0],
}
pub type X509_ATTRIBUTE = x509_attributes_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_ATTRIBUTE {
    _unused: [u8; 0],
}
pub type sk_X509_ATTRIBUTE_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const X509_ATTRIBUTE,
        b: *const *const X509_ATTRIBUTE,
    ) -> ::libc::c_int,
>;
pub type sk_X509_ATTRIBUTE_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut X509_ATTRIBUTE)>;
pub type sk_X509_ATTRIBUTE_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_ATTRIBUTE) -> *mut X509_ATTRIBUTE>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_req_info_st {
    _unused: [u8; 0],
}
pub type X509_REQ_INFO = X509_req_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_req_st {
    _unused: [u8; 0],
}
pub type X509_REQ = X509_req_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_cert_aux_st {
    _unused: [u8; 0],
}
pub type X509_CERT_AUX = x509_cert_aux_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_cinf_st {
    _unused: [u8; 0],
}
pub type X509_CINF = x509_cinf_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_crl_info_st {
    _unused: [u8; 0],
}
pub type X509_CRL_INFO = X509_crl_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct private_key_st {
    pub version: ::libc::c_int,
    pub enc_algor: *mut X509_ALGOR,
    pub enc_pkey: *mut ASN1_OCTET_STRING,
    pub dec_pkey: *mut EVP_PKEY,
    pub key_length: ::libc::c_int,
    pub key_data: *mut ::libc::c_char,
    pub key_free: ::libc::c_int,
    pub cipher: EVP_CIPHER_INFO,
}
pub type X509_PKEY = private_key_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_info_st {
    pub x509: *mut X509,
    pub crl: *mut X509_CRL,
    pub x_pkey: *mut X509_PKEY,
    pub enc_cipher: EVP_CIPHER_INFO,
    pub enc_len: ::libc::c_int,
    pub enc_data: *mut ::libc::c_char,
}
pub type X509_INFO = X509_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_INFO {
    _unused: [u8; 0],
}
pub type sk_X509_INFO_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const X509_INFO, b: *const *const X509_INFO) -> ::libc::c_int,
>;
pub type sk_X509_INFO_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut X509_INFO)>;
pub type sk_X509_INFO_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_INFO) -> *mut X509_INFO>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Netscape_spkac_st {
    pub pubkey: *mut X509_PUBKEY,
    pub challenge: *mut ASN1_IA5STRING,
}
pub type NETSCAPE_SPKAC = Netscape_spkac_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Netscape_spki_st {
    pub spkac: *mut NETSCAPE_SPKAC,
    pub sig_algor: X509_ALGOR,
    pub signature: *mut ASN1_BIT_STRING,
}
pub type NETSCAPE_SPKI = Netscape_spki_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Netscape_certificate_sequence {
    pub type_: *mut ASN1_OBJECT,
    pub certs: *mut stack_st_X509,
}
pub type NETSCAPE_CERT_SEQUENCE = Netscape_certificate_sequence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PBEPARAM_st {
    pub salt: *mut ASN1_OCTET_STRING,
    pub iter: *mut ASN1_INTEGER,
}
pub type PBEPARAM = PBEPARAM_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PBE2PARAM_st {
    pub keyfunc: *mut X509_ALGOR,
    pub encryption: *mut X509_ALGOR,
}
pub type PBE2PARAM = PBE2PARAM_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PBKDF2PARAM_st {
    pub salt: *mut ASN1_TYPE,
    pub iter: *mut ASN1_INTEGER,
    pub keylength: *mut ASN1_INTEGER,
    pub prf: *mut X509_ALGOR,
}
pub type PBKDF2PARAM = PBKDF2PARAM_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCRYPT_PARAMS_st {
    pub salt: *mut ASN1_OCTET_STRING,
    pub costParameter: *mut ASN1_INTEGER,
    pub blockSize: *mut ASN1_INTEGER,
    pub parallelizationParameter: *mut ASN1_INTEGER,
    pub keyLength: *mut ASN1_INTEGER,
}
pub type SCRYPT_PARAMS = SCRYPT_PARAMS_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lhash_node_st {
    _unused: [u8; 0],
}
pub type OPENSSL_LH_NODE = lhash_node_st;
pub type OPENSSL_LH_COMPFUNC = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void) -> ::libc::c_int,
>;
pub type OPENSSL_LH_HASHFUNC =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::libc::c_void) -> ::libc::c_ulong>;
pub type OPENSSL_LH_DOALL_FUNC =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void)>;
pub type OPENSSL_LH_DOALL_FUNCARG = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::libc::c_void, arg2: *mut ::libc::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lhash_st {
    _unused: [u8; 0],
}
pub type OPENSSL_LHASH = lhash_st;
extern "C" {
    pub fn OPENSSL_LH_error(lh: *mut OPENSSL_LHASH) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_LH_new(h: OPENSSL_LH_HASHFUNC, c: OPENSSL_LH_COMPFUNC) -> *mut OPENSSL_LHASH;
}
extern "C" {
    pub fn OPENSSL_LH_free(lh: *mut OPENSSL_LHASH);
}
extern "C" {
    pub fn OPENSSL_LH_flush(lh: *mut OPENSSL_LHASH);
}
extern "C" {
    pub fn OPENSSL_LH_insert(
        lh: *mut OPENSSL_LHASH,
        data: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn OPENSSL_LH_delete(
        lh: *mut OPENSSL_LHASH,
        data: *const ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn OPENSSL_LH_retrieve(
        lh: *mut OPENSSL_LHASH,
        data: *const ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn OPENSSL_LH_doall(lh: *mut OPENSSL_LHASH, func: OPENSSL_LH_DOALL_FUNC);
}
extern "C" {
    pub fn OPENSSL_LH_doall_arg(
        lh: *mut OPENSSL_LHASH,
        func: OPENSSL_LH_DOALL_FUNCARG,
        arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn OPENSSL_LH_strhash(c: *const ::libc::c_char) -> ::libc::c_ulong;
}
extern "C" {
    pub fn OPENSSL_LH_num_items(lh: *const OPENSSL_LHASH) -> ::libc::c_ulong;
}
extern "C" {
    pub fn OPENSSL_LH_get_down_load(lh: *const OPENSSL_LHASH) -> ::libc::c_ulong;
}
extern "C" {
    pub fn OPENSSL_LH_set_down_load(lh: *mut OPENSSL_LHASH, down_load: ::libc::c_ulong);
}
extern "C" {
    pub fn OPENSSL_LH_stats(lh: *const OPENSSL_LHASH, fp: *mut FILE);
}
extern "C" {
    pub fn OPENSSL_LH_node_stats(lh: *const OPENSSL_LHASH, fp: *mut FILE);
}
extern "C" {
    pub fn OPENSSL_LH_node_usage_stats(lh: *const OPENSSL_LHASH, fp: *mut FILE);
}
extern "C" {
    pub fn OPENSSL_LH_stats_bio(lh: *const OPENSSL_LHASH, out: *mut BIO);
}
extern "C" {
    pub fn OPENSSL_LH_node_stats_bio(lh: *const OPENSSL_LHASH, out: *mut BIO);
}
extern "C" {
    pub fn OPENSSL_LH_node_usage_stats_bio(lh: *const OPENSSL_LHASH, out: *mut BIO);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lhash_st_OPENSSL_STRING {
    pub dummy: lhash_st_OPENSSL_STRING_lh_OPENSSL_STRING_dummy,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lhash_st_OPENSSL_STRING_lh_OPENSSL_STRING_dummy {
    pub d1: *mut ::libc::c_void,
    pub d2: ::libc::c_ulong,
    pub d3: ::libc::c_int,
}
pub type lh_OPENSSL_STRING_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const OPENSSL_STRING, b: *const OPENSSL_STRING) -> ::libc::c_int,
>;
pub type lh_OPENSSL_STRING_hashfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const OPENSSL_STRING) -> ::libc::c_ulong>;
pub type lh_OPENSSL_STRING_doallfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut OPENSSL_STRING)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lhash_st_OPENSSL_CSTRING {
    pub dummy: lhash_st_OPENSSL_CSTRING_lh_OPENSSL_CSTRING_dummy,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lhash_st_OPENSSL_CSTRING_lh_OPENSSL_CSTRING_dummy {
    pub d1: *mut ::libc::c_void,
    pub d2: ::libc::c_ulong,
    pub d3: ::libc::c_int,
}
pub type lh_OPENSSL_CSTRING_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const OPENSSL_CSTRING, b: *const OPENSSL_CSTRING) -> ::libc::c_int,
>;
pub type lh_OPENSSL_CSTRING_hashfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const OPENSSL_CSTRING) -> ::libc::c_ulong>;
pub type lh_OPENSSL_CSTRING_doallfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut OPENSSL_CSTRING)>;
pub const X509_LOOKUP_TYPE_X509_LU_NONE: X509_LOOKUP_TYPE = 0;
pub const X509_LOOKUP_TYPE_X509_LU_X509: X509_LOOKUP_TYPE = 1;
pub const X509_LOOKUP_TYPE_X509_LU_CRL: X509_LOOKUP_TYPE = 2;
pub type X509_LOOKUP_TYPE = ::libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_LOOKUP {
    _unused: [u8; 0],
}
pub type sk_X509_LOOKUP_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const X509_LOOKUP,
        b: *const *const X509_LOOKUP,
    ) -> ::libc::c_int,
>;
pub type sk_X509_LOOKUP_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut X509_LOOKUP)>;
pub type sk_X509_LOOKUP_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_LOOKUP) -> *mut X509_LOOKUP>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_OBJECT {
    _unused: [u8; 0],
}
pub type sk_X509_OBJECT_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const X509_OBJECT,
        b: *const *const X509_OBJECT,
    ) -> ::libc::c_int,
>;
pub type sk_X509_OBJECT_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut X509_OBJECT)>;
pub type sk_X509_OBJECT_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_OBJECT) -> *mut X509_OBJECT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_VERIFY_PARAM {
    _unused: [u8; 0],
}
pub type sk_X509_VERIFY_PARAM_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const X509_VERIFY_PARAM,
        b: *const *const X509_VERIFY_PARAM,
    ) -> ::libc::c_int,
>;
pub type sk_X509_VERIFY_PARAM_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut X509_VERIFY_PARAM)>;
pub type sk_X509_VERIFY_PARAM_copyfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const X509_VERIFY_PARAM) -> *mut X509_VERIFY_PARAM,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_trust_st {
    pub trust: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub check_trust: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut x509_trust_st,
            arg2: *mut X509,
            arg3: ::libc::c_int,
        ) -> ::libc::c_int,
    >,
    pub name: *mut ::libc::c_char,
    pub arg1: ::libc::c_int,
    pub arg2: *mut ::libc::c_void,
}
pub type X509_TRUST = x509_trust_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_TRUST {
    _unused: [u8; 0],
}
pub type sk_X509_TRUST_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const X509_TRUST, b: *const *const X509_TRUST) -> ::libc::c_int,
>;
pub type sk_X509_TRUST_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut X509_TRUST)>;
pub type sk_X509_TRUST_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const X509_TRUST) -> *mut X509_TRUST>;
extern "C" {
    pub fn X509_TRUST_set(t: *mut ::libc::c_int, trust: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_TRUST_get_count() -> ::libc::c_int;
}
extern "C" {
    pub fn X509_TRUST_get0(idx: ::libc::c_int) -> *mut X509_TRUST;
}
extern "C" {
    pub fn X509_TRUST_get_by_id(id: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_TRUST_add(
        id: ::libc::c_int,
        flags: ::libc::c_int,
        ck: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut X509_TRUST,
                arg2: *mut X509,
                arg3: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
        name: *const ::libc::c_char,
        arg1: ::libc::c_int,
        arg2: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_TRUST_cleanup();
}
extern "C" {
    pub fn X509_TRUST_get_flags(xp: *const X509_TRUST) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_TRUST_get0_name(xp: *const X509_TRUST) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn X509_TRUST_get_trust(xp: *const X509_TRUST) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_trusted(x: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_add1_trust_object(x: *mut X509, obj: *const ASN1_OBJECT) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_add1_reject_object(x: *mut X509, obj: *const ASN1_OBJECT) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_trust_clear(x: *mut X509);
}
extern "C" {
    pub fn X509_reject_clear(x: *mut X509);
}
extern "C" {
    pub fn X509_get0_trust_objects(x: *mut X509) -> *mut stack_st_ASN1_OBJECT;
}
extern "C" {
    pub fn X509_get0_reject_objects(x: *mut X509) -> *mut stack_st_ASN1_OBJECT;
}
extern "C" {
    pub fn X509_TRUST_set_default(
        trust: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::libc::c_int,
                arg2: *mut X509,
                arg3: ::libc::c_int,
            ) -> ::libc::c_int,
        >,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            trust: ::libc::c_int,
            arg1: *mut X509,
            arg2: ::libc::c_int,
        ) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn X509_check_trust(x: *mut X509, id: ::libc::c_int, flags: ::libc::c_int)
        -> ::libc::c_int;
}
extern "C" {
    pub fn X509_verify_cert(ctx: *mut X509_STORE_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_verify(ctx: *mut X509_STORE_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_build_chain(
        target: *mut X509,
        certs: *mut stack_st_X509,
        store: *mut X509_STORE,
        with_self_signed: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_set_depth(store: *mut X509_STORE, depth: ::libc::c_int) -> ::libc::c_int;
}
pub type X509_STORE_CTX_verify_cb = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::libc::c_int, arg2: *mut X509_STORE_CTX) -> ::libc::c_int,
>;
extern "C" {
    pub fn X509_STORE_CTX_print_verify_cb(
        ok: ::libc::c_int,
        ctx: *mut X509_STORE_CTX,
    ) -> ::libc::c_int;
}
pub type X509_STORE_CTX_verify_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_STORE_CTX) -> ::libc::c_int>;
pub type X509_STORE_CTX_get_issuer_fn = ::std::option::Option<
    unsafe extern "C" fn(
        issuer: *mut *mut X509,
        ctx: *mut X509_STORE_CTX,
        x: *mut X509,
    ) -> ::libc::c_int,
>;
pub type X509_STORE_CTX_check_issued_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_STORE_CTX,
        x: *mut X509,
        issuer: *mut X509,
    ) -> ::libc::c_int,
>;
pub type X509_STORE_CTX_check_revocation_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_STORE_CTX) -> ::libc::c_int>;
pub type X509_STORE_CTX_get_crl_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_STORE_CTX,
        crl: *mut *mut X509_CRL,
        x: *mut X509,
    ) -> ::libc::c_int,
>;
pub type X509_STORE_CTX_check_crl_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut X509_STORE_CTX, crl: *mut X509_CRL) -> ::libc::c_int,
>;
pub type X509_STORE_CTX_cert_crl_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_STORE_CTX,
        crl: *mut X509_CRL,
        x: *mut X509,
    ) -> ::libc::c_int,
>;
pub type X509_STORE_CTX_check_policy_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_STORE_CTX) -> ::libc::c_int>;
pub type X509_STORE_CTX_lookup_certs_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut X509_STORE_CTX, nm: *const X509_NAME) -> *mut stack_st_X509,
>;
pub type X509_STORE_CTX_lookup_crls_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *const X509_STORE_CTX,
        nm: *const X509_NAME,
    ) -> *mut stack_st_X509_CRL,
>;
pub type X509_STORE_CTX_cleanup_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_STORE_CTX) -> ::libc::c_int>;
extern "C" {
    pub fn X509_STORE_CTX_set_depth(ctx: *mut X509_STORE_CTX, depth: ::libc::c_int);
}
extern "C" {
    pub fn X509_OBJECT_idx_by_subject(
        h: *mut stack_st_X509_OBJECT,
        type_: X509_LOOKUP_TYPE,
        name: *const X509_NAME,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_OBJECT_retrieve_by_subject(
        h: *mut stack_st_X509_OBJECT,
        type_: X509_LOOKUP_TYPE,
        name: *const X509_NAME,
    ) -> *mut X509_OBJECT;
}
extern "C" {
    pub fn X509_OBJECT_retrieve_match(
        h: *mut stack_st_X509_OBJECT,
        x: *mut X509_OBJECT,
    ) -> *mut X509_OBJECT;
}
extern "C" {
    pub fn X509_OBJECT_up_ref_count(a: *mut X509_OBJECT) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_OBJECT_new() -> *mut X509_OBJECT;
}
extern "C" {
    pub fn X509_OBJECT_free(a: *mut X509_OBJECT);
}
extern "C" {
    pub fn X509_OBJECT_get_type(a: *const X509_OBJECT) -> X509_LOOKUP_TYPE;
}
extern "C" {
    pub fn X509_OBJECT_get0_X509(a: *const X509_OBJECT) -> *mut X509;
}
extern "C" {
    pub fn X509_OBJECT_set1_X509(a: *mut X509_OBJECT, obj: *mut X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_OBJECT_get0_X509_CRL(a: *const X509_OBJECT) -> *mut X509_CRL;
}
extern "C" {
    pub fn X509_OBJECT_set1_X509_CRL(a: *mut X509_OBJECT, obj: *mut X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_new() -> *mut X509_STORE;
}
extern "C" {
    pub fn X509_STORE_free(v: *mut X509_STORE);
}
extern "C" {
    pub fn X509_STORE_lock(ctx: *mut X509_STORE) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_unlock(ctx: *mut X509_STORE) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_up_ref(v: *mut X509_STORE) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_get0_objects(v: *const X509_STORE) -> *mut stack_st_X509_OBJECT;
}
extern "C" {
    pub fn X509_STORE_get1_all_certs(st: *mut X509_STORE) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_CTX_get1_certs(
        st: *mut X509_STORE_CTX,
        nm: *const X509_NAME,
    ) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_CTX_get1_crls(
        st: *const X509_STORE_CTX,
        nm: *const X509_NAME,
    ) -> *mut stack_st_X509_CRL;
}
extern "C" {
    pub fn X509_STORE_set_flags(ctx: *mut X509_STORE, flags: ::libc::c_ulong) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_set_purpose(ctx: *mut X509_STORE, purpose: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_set_trust(ctx: *mut X509_STORE, trust: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_set1_param(
        ctx: *mut X509_STORE,
        pm: *const X509_VERIFY_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_get0_param(ctx: *const X509_STORE) -> *mut X509_VERIFY_PARAM;
}
extern "C" {
    pub fn X509_STORE_set_verify(ctx: *mut X509_STORE, verify: X509_STORE_CTX_verify_fn);
}
extern "C" {
    pub fn X509_STORE_CTX_set_verify(ctx: *mut X509_STORE_CTX, verify: X509_STORE_CTX_verify_fn);
}
extern "C" {
    pub fn X509_STORE_get_verify(ctx: *const X509_STORE) -> X509_STORE_CTX_verify_fn;
}
extern "C" {
    pub fn X509_STORE_set_verify_cb(ctx: *mut X509_STORE, verify_cb: X509_STORE_CTX_verify_cb);
}
extern "C" {
    pub fn X509_STORE_get_verify_cb(ctx: *const X509_STORE) -> X509_STORE_CTX_verify_cb;
}
extern "C" {
    pub fn X509_STORE_set_get_issuer(
        ctx: *mut X509_STORE,
        get_issuer: X509_STORE_CTX_get_issuer_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_get_issuer(ctx: *const X509_STORE) -> X509_STORE_CTX_get_issuer_fn;
}
extern "C" {
    pub fn X509_STORE_set_check_issued(
        ctx: *mut X509_STORE,
        check_issued: X509_STORE_CTX_check_issued_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_check_issued(ctx: *const X509_STORE) -> X509_STORE_CTX_check_issued_fn;
}
extern "C" {
    pub fn X509_STORE_set_check_revocation(
        ctx: *mut X509_STORE,
        check_revocation: X509_STORE_CTX_check_revocation_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_check_revocation(
        ctx: *const X509_STORE,
    ) -> X509_STORE_CTX_check_revocation_fn;
}
extern "C" {
    pub fn X509_STORE_set_get_crl(ctx: *mut X509_STORE, get_crl: X509_STORE_CTX_get_crl_fn);
}
extern "C" {
    pub fn X509_STORE_get_get_crl(ctx: *const X509_STORE) -> X509_STORE_CTX_get_crl_fn;
}
extern "C" {
    pub fn X509_STORE_set_check_crl(ctx: *mut X509_STORE, check_crl: X509_STORE_CTX_check_crl_fn);
}
extern "C" {
    pub fn X509_STORE_get_check_crl(ctx: *const X509_STORE) -> X509_STORE_CTX_check_crl_fn;
}
extern "C" {
    pub fn X509_STORE_set_cert_crl(ctx: *mut X509_STORE, cert_crl: X509_STORE_CTX_cert_crl_fn);
}
extern "C" {
    pub fn X509_STORE_get_cert_crl(ctx: *const X509_STORE) -> X509_STORE_CTX_cert_crl_fn;
}
extern "C" {
    pub fn X509_STORE_set_check_policy(
        ctx: *mut X509_STORE,
        check_policy: X509_STORE_CTX_check_policy_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_check_policy(ctx: *const X509_STORE) -> X509_STORE_CTX_check_policy_fn;
}
extern "C" {
    pub fn X509_STORE_set_lookup_certs(
        ctx: *mut X509_STORE,
        lookup_certs: X509_STORE_CTX_lookup_certs_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_lookup_certs(ctx: *const X509_STORE) -> X509_STORE_CTX_lookup_certs_fn;
}
extern "C" {
    pub fn X509_STORE_set_lookup_crls(
        ctx: *mut X509_STORE,
        lookup_crls: X509_STORE_CTX_lookup_crls_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_lookup_crls(ctx: *const X509_STORE) -> X509_STORE_CTX_lookup_crls_fn;
}
extern "C" {
    pub fn X509_STORE_set_cleanup(ctx: *mut X509_STORE, cleanup: X509_STORE_CTX_cleanup_fn);
}
extern "C" {
    pub fn X509_STORE_get_cleanup(ctx: *const X509_STORE) -> X509_STORE_CTX_cleanup_fn;
}
extern "C" {
    pub fn X509_STORE_set_ex_data(
        ctx: *mut X509_STORE,
        idx: ::libc::c_int,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_get_ex_data(
        ctx: *const X509_STORE,
        idx: ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn X509_STORE_CTX_new_ex(
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut X509_STORE_CTX;
}
extern "C" {
    pub fn X509_STORE_CTX_new() -> *mut X509_STORE_CTX;
}
extern "C" {
    pub fn X509_STORE_CTX_get1_issuer(
        issuer: *mut *mut X509,
        ctx: *mut X509_STORE_CTX,
        x: *mut X509,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_free(ctx: *mut X509_STORE_CTX);
}
extern "C" {
    pub fn X509_STORE_CTX_init(
        ctx: *mut X509_STORE_CTX,
        trust_store: *mut X509_STORE,
        target: *mut X509,
        untrusted: *mut stack_st_X509,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set0_trusted_stack(ctx: *mut X509_STORE_CTX, sk: *mut stack_st_X509);
}
extern "C" {
    pub fn X509_STORE_CTX_cleanup(ctx: *mut X509_STORE_CTX);
}
extern "C" {
    pub fn X509_STORE_CTX_get0_store(ctx: *const X509_STORE_CTX) -> *mut X509_STORE;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_cert(ctx: *const X509_STORE_CTX) -> *mut X509;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_untrusted(ctx: *const X509_STORE_CTX) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_CTX_set0_untrusted(ctx: *mut X509_STORE_CTX, sk: *mut stack_st_X509);
}
extern "C" {
    pub fn X509_STORE_CTX_set_verify_cb(ctx: *mut X509_STORE_CTX, verify: X509_STORE_CTX_verify_cb);
}
extern "C" {
    pub fn X509_STORE_CTX_get_verify_cb(ctx: *const X509_STORE_CTX) -> X509_STORE_CTX_verify_cb;
}
extern "C" {
    pub fn X509_STORE_CTX_get_verify(ctx: *const X509_STORE_CTX) -> X509_STORE_CTX_verify_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_get_get_issuer(
        ctx: *const X509_STORE_CTX,
    ) -> X509_STORE_CTX_get_issuer_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_get_check_issued(
        ctx: *const X509_STORE_CTX,
    ) -> X509_STORE_CTX_check_issued_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_get_check_revocation(
        ctx: *const X509_STORE_CTX,
    ) -> X509_STORE_CTX_check_revocation_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_get_get_crl(ctx: *const X509_STORE_CTX) -> X509_STORE_CTX_get_crl_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_get_check_crl(ctx: *const X509_STORE_CTX) -> X509_STORE_CTX_check_crl_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_get_cert_crl(ctx: *const X509_STORE_CTX) -> X509_STORE_CTX_cert_crl_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_get_check_policy(
        ctx: *const X509_STORE_CTX,
    ) -> X509_STORE_CTX_check_policy_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_get_lookup_certs(
        ctx: *const X509_STORE_CTX,
    ) -> X509_STORE_CTX_lookup_certs_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_get_lookup_crls(
        ctx: *const X509_STORE_CTX,
    ) -> X509_STORE_CTX_lookup_crls_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_get_cleanup(ctx: *const X509_STORE_CTX) -> X509_STORE_CTX_cleanup_fn;
}
extern "C" {
    pub fn X509_STORE_add_lookup(
        v: *mut X509_STORE,
        m: *mut X509_LOOKUP_METHOD,
    ) -> *mut X509_LOOKUP;
}
extern "C" {
    pub fn X509_LOOKUP_hash_dir() -> *mut X509_LOOKUP_METHOD;
}
extern "C" {
    pub fn X509_LOOKUP_file() -> *mut X509_LOOKUP_METHOD;
}
extern "C" {
    pub fn X509_LOOKUP_store() -> *mut X509_LOOKUP_METHOD;
}
pub type X509_LOOKUP_ctrl_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_LOOKUP,
        cmd: ::libc::c_int,
        argc: *const ::libc::c_char,
        argl: ::libc::c_long,
        ret: *mut *mut ::libc::c_char,
    ) -> ::libc::c_int,
>;
pub type X509_LOOKUP_ctrl_ex_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_LOOKUP,
        cmd: ::libc::c_int,
        argc: *const ::libc::c_char,
        argl: ::libc::c_long,
        ret: *mut *mut ::libc::c_char,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int,
>;
pub type X509_LOOKUP_get_by_subject_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_LOOKUP,
        type_: X509_LOOKUP_TYPE,
        name: *const X509_NAME,
        ret: *mut X509_OBJECT,
    ) -> ::libc::c_int,
>;
pub type X509_LOOKUP_get_by_subject_ex_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_LOOKUP,
        type_: X509_LOOKUP_TYPE,
        name: *const X509_NAME,
        ret: *mut X509_OBJECT,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int,
>;
pub type X509_LOOKUP_get_by_issuer_serial_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_LOOKUP,
        type_: X509_LOOKUP_TYPE,
        name: *const X509_NAME,
        serial: *const ASN1_INTEGER,
        ret: *mut X509_OBJECT,
    ) -> ::libc::c_int,
>;
pub type X509_LOOKUP_get_by_fingerprint_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_LOOKUP,
        type_: X509_LOOKUP_TYPE,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
        ret: *mut X509_OBJECT,
    ) -> ::libc::c_int,
>;
pub type X509_LOOKUP_get_by_alias_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_LOOKUP,
        type_: X509_LOOKUP_TYPE,
        str_: *const ::libc::c_char,
        len: ::libc::c_int,
        ret: *mut X509_OBJECT,
    ) -> ::libc::c_int,
>;
extern "C" {
    pub fn X509_LOOKUP_meth_new(name: *const ::libc::c_char) -> *mut X509_LOOKUP_METHOD;
}
extern "C" {
    pub fn X509_LOOKUP_meth_free(method: *mut X509_LOOKUP_METHOD);
}
extern "C" {
    pub fn X509_LOOKUP_meth_set_new_item(
        method: *mut X509_LOOKUP_METHOD,
        new_item: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut X509_LOOKUP) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_meth_get_new_item(
        method: *const X509_LOOKUP_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(method: *mut X509_LOOKUP) -> ::libc::c_int>;
}
extern "C" {
    pub fn X509_LOOKUP_meth_set_free(
        method: *mut X509_LOOKUP_METHOD,
        free_fn: ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_LOOKUP)>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_meth_get_free(
        method: *const X509_LOOKUP_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(method: *mut X509_LOOKUP)>;
}
extern "C" {
    pub fn X509_LOOKUP_meth_set_init(
        method: *mut X509_LOOKUP_METHOD,
        init: ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_LOOKUP) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_meth_get_init(
        method: *const X509_LOOKUP_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(method: *mut X509_LOOKUP) -> ::libc::c_int>;
}
extern "C" {
    pub fn X509_LOOKUP_meth_set_shutdown(
        method: *mut X509_LOOKUP_METHOD,
        shutdown: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut X509_LOOKUP) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_meth_get_shutdown(
        method: *const X509_LOOKUP_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(method: *mut X509_LOOKUP) -> ::libc::c_int>;
}
extern "C" {
    pub fn X509_LOOKUP_meth_set_ctrl(
        method: *mut X509_LOOKUP_METHOD,
        ctrl_fn: X509_LOOKUP_ctrl_fn,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_meth_get_ctrl(method: *const X509_LOOKUP_METHOD) -> X509_LOOKUP_ctrl_fn;
}
extern "C" {
    pub fn X509_LOOKUP_meth_set_get_by_subject(
        method: *mut X509_LOOKUP_METHOD,
        fn_: X509_LOOKUP_get_by_subject_fn,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_meth_get_get_by_subject(
        method: *const X509_LOOKUP_METHOD,
    ) -> X509_LOOKUP_get_by_subject_fn;
}
extern "C" {
    pub fn X509_LOOKUP_meth_set_get_by_issuer_serial(
        method: *mut X509_LOOKUP_METHOD,
        fn_: X509_LOOKUP_get_by_issuer_serial_fn,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_meth_get_get_by_issuer_serial(
        method: *const X509_LOOKUP_METHOD,
    ) -> X509_LOOKUP_get_by_issuer_serial_fn;
}
extern "C" {
    pub fn X509_LOOKUP_meth_set_get_by_fingerprint(
        method: *mut X509_LOOKUP_METHOD,
        fn_: X509_LOOKUP_get_by_fingerprint_fn,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_meth_get_get_by_fingerprint(
        method: *const X509_LOOKUP_METHOD,
    ) -> X509_LOOKUP_get_by_fingerprint_fn;
}
extern "C" {
    pub fn X509_LOOKUP_meth_set_get_by_alias(
        method: *mut X509_LOOKUP_METHOD,
        fn_: X509_LOOKUP_get_by_alias_fn,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_meth_get_get_by_alias(
        method: *const X509_LOOKUP_METHOD,
    ) -> X509_LOOKUP_get_by_alias_fn;
}
extern "C" {
    pub fn X509_STORE_add_cert(ctx: *mut X509_STORE, x: *mut X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_add_crl(ctx: *mut X509_STORE, x: *mut X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_get_by_subject(
        vs: *const X509_STORE_CTX,
        type_: X509_LOOKUP_TYPE,
        name: *const X509_NAME,
        ret: *mut X509_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_get_obj_by_subject(
        vs: *mut X509_STORE_CTX,
        type_: X509_LOOKUP_TYPE,
        name: *const X509_NAME,
    ) -> *mut X509_OBJECT;
}
extern "C" {
    pub fn X509_LOOKUP_ctrl(
        ctx: *mut X509_LOOKUP,
        cmd: ::libc::c_int,
        argc: *const ::libc::c_char,
        argl: ::libc::c_long,
        ret: *mut *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_ctrl_ex(
        ctx: *mut X509_LOOKUP,
        cmd: ::libc::c_int,
        argc: *const ::libc::c_char,
        argl: ::libc::c_long,
        ret: *mut *mut ::libc::c_char,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_load_cert_file(
        ctx: *mut X509_LOOKUP,
        file: *const ::libc::c_char,
        type_: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_load_cert_file_ex(
        ctx: *mut X509_LOOKUP,
        file: *const ::libc::c_char,
        type_: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_load_crl_file(
        ctx: *mut X509_LOOKUP,
        file: *const ::libc::c_char,
        type_: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_load_cert_crl_file(
        ctx: *mut X509_LOOKUP,
        file: *const ::libc::c_char,
        type_: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_load_cert_crl_file_ex(
        ctx: *mut X509_LOOKUP,
        file: *const ::libc::c_char,
        type_: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_new(method: *mut X509_LOOKUP_METHOD) -> *mut X509_LOOKUP;
}
extern "C" {
    pub fn X509_LOOKUP_free(ctx: *mut X509_LOOKUP);
}
extern "C" {
    pub fn X509_LOOKUP_init(ctx: *mut X509_LOOKUP) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_by_subject(
        ctx: *mut X509_LOOKUP,
        type_: X509_LOOKUP_TYPE,
        name: *const X509_NAME,
        ret: *mut X509_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_by_subject_ex(
        ctx: *mut X509_LOOKUP,
        type_: X509_LOOKUP_TYPE,
        name: *const X509_NAME,
        ret: *mut X509_OBJECT,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_by_issuer_serial(
        ctx: *mut X509_LOOKUP,
        type_: X509_LOOKUP_TYPE,
        name: *const X509_NAME,
        serial: *const ASN1_INTEGER,
        ret: *mut X509_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_by_fingerprint(
        ctx: *mut X509_LOOKUP,
        type_: X509_LOOKUP_TYPE,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
        ret: *mut X509_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_by_alias(
        ctx: *mut X509_LOOKUP,
        type_: X509_LOOKUP_TYPE,
        str_: *const ::libc::c_char,
        len: ::libc::c_int,
        ret: *mut X509_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_set_method_data(
        ctx: *mut X509_LOOKUP,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_get_method_data(ctx: *const X509_LOOKUP) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn X509_LOOKUP_get_store(ctx: *const X509_LOOKUP) -> *mut X509_STORE;
}
extern "C" {
    pub fn X509_LOOKUP_shutdown(ctx: *mut X509_LOOKUP) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_load_file(ctx: *mut X509_STORE, file: *const ::libc::c_char)
        -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_load_path(ctx: *mut X509_STORE, path: *const ::libc::c_char)
        -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_load_store(
        ctx: *mut X509_STORE,
        store: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_load_locations(
        ctx: *mut X509_STORE,
        file: *const ::libc::c_char,
        dir: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_set_default_paths(ctx: *mut X509_STORE) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_load_file_ex(
        ctx: *mut X509_STORE,
        file: *const ::libc::c_char,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_load_store_ex(
        ctx: *mut X509_STORE,
        store: *const ::libc::c_char,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_load_locations_ex(
        ctx: *mut X509_STORE,
        file: *const ::libc::c_char,
        dir: *const ::libc::c_char,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_set_default_paths_ex(
        ctx: *mut X509_STORE,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set_ex_data(
        ctx: *mut X509_STORE_CTX,
        idx: ::libc::c_int,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_get_ex_data(
        ctx: *const X509_STORE_CTX,
        idx: ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn X509_STORE_CTX_get_error(ctx: *const X509_STORE_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set_error(ctx: *mut X509_STORE_CTX, s: ::libc::c_int);
}
extern "C" {
    pub fn X509_STORE_CTX_get_error_depth(ctx: *const X509_STORE_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set_error_depth(ctx: *mut X509_STORE_CTX, depth: ::libc::c_int);
}
extern "C" {
    pub fn X509_STORE_CTX_get_current_cert(ctx: *const X509_STORE_CTX) -> *mut X509;
}
extern "C" {
    pub fn X509_STORE_CTX_set_current_cert(ctx: *mut X509_STORE_CTX, x: *mut X509);
}
extern "C" {
    pub fn X509_STORE_CTX_get0_current_issuer(ctx: *const X509_STORE_CTX) -> *mut X509;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_current_crl(ctx: *const X509_STORE_CTX) -> *mut X509_CRL;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_parent_ctx(ctx: *const X509_STORE_CTX) -> *mut X509_STORE_CTX;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_chain(ctx: *const X509_STORE_CTX) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_CTX_get1_chain(ctx: *const X509_STORE_CTX) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_CTX_set_cert(ctx: *mut X509_STORE_CTX, target: *mut X509);
}
extern "C" {
    pub fn X509_STORE_CTX_set0_verified_chain(c: *mut X509_STORE_CTX, sk: *mut stack_st_X509);
}
extern "C" {
    pub fn X509_STORE_CTX_set0_crls(ctx: *mut X509_STORE_CTX, sk: *mut stack_st_X509_CRL);
}
extern "C" {
    pub fn X509_STORE_CTX_set_purpose(
        ctx: *mut X509_STORE_CTX,
        purpose: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set_trust(
        ctx: *mut X509_STORE_CTX,
        trust: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_purpose_inherit(
        ctx: *mut X509_STORE_CTX,
        def_purpose: ::libc::c_int,
        purpose: ::libc::c_int,
        trust: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set_flags(ctx: *mut X509_STORE_CTX, flags: ::libc::c_ulong);
}
extern "C" {
    pub fn X509_STORE_CTX_set_time(ctx: *mut X509_STORE_CTX, flags: ::libc::c_ulong, t: time_t);
}
extern "C" {
    pub fn X509_STORE_CTX_get0_policy_tree(ctx: *const X509_STORE_CTX) -> *mut X509_POLICY_TREE;
}
extern "C" {
    pub fn X509_STORE_CTX_get_explicit_policy(ctx: *const X509_STORE_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_get_num_untrusted(ctx: *const X509_STORE_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_param(ctx: *const X509_STORE_CTX) -> *mut X509_VERIFY_PARAM;
}
extern "C" {
    pub fn X509_STORE_CTX_set0_param(ctx: *mut X509_STORE_CTX, param: *mut X509_VERIFY_PARAM);
}
extern "C" {
    pub fn X509_STORE_CTX_set_default(
        ctx: *mut X509_STORE_CTX,
        name: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set0_dane(ctx: *mut X509_STORE_CTX, dane: *mut SSL_DANE);
}
extern "C" {
    pub fn X509_VERIFY_PARAM_new() -> *mut X509_VERIFY_PARAM;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_free(param: *mut X509_VERIFY_PARAM);
}
extern "C" {
    pub fn X509_VERIFY_PARAM_inherit(
        to: *mut X509_VERIFY_PARAM,
        from: *const X509_VERIFY_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1(
        to: *mut X509_VERIFY_PARAM,
        from: *const X509_VERIFY_PARAM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_name(
        param: *mut X509_VERIFY_PARAM,
        name: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_flags(
        param: *mut X509_VERIFY_PARAM,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_clear_flags(
        param: *mut X509_VERIFY_PARAM,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get_flags(param: *const X509_VERIFY_PARAM) -> ::libc::c_ulong;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_purpose(
        param: *mut X509_VERIFY_PARAM,
        purpose: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_trust(
        param: *mut X509_VERIFY_PARAM,
        trust: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_depth(param: *mut X509_VERIFY_PARAM, depth: ::libc::c_int);
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_auth_level(
        param: *mut X509_VERIFY_PARAM,
        auth_level: ::libc::c_int,
    );
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get_time(param: *const X509_VERIFY_PARAM) -> time_t;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_time(param: *mut X509_VERIFY_PARAM, t: time_t);
}
extern "C" {
    pub fn X509_VERIFY_PARAM_add0_policy(
        param: *mut X509_VERIFY_PARAM,
        policy: *mut ASN1_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_policies(
        param: *mut X509_VERIFY_PARAM,
        policies: *mut stack_st_ASN1_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_inh_flags(
        param: *mut X509_VERIFY_PARAM,
        flags: u32,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get_inh_flags(param: *const X509_VERIFY_PARAM) -> u32;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get0_host(
        param: *mut X509_VERIFY_PARAM,
        idx: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_host(
        param: *mut X509_VERIFY_PARAM,
        name: *const ::libc::c_char,
        namelen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_add1_host(
        param: *mut X509_VERIFY_PARAM,
        name: *const ::libc::c_char,
        namelen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_hostflags(param: *mut X509_VERIFY_PARAM, flags: ::libc::c_uint);
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get_hostflags(param: *const X509_VERIFY_PARAM) -> ::libc::c_uint;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get0_peername(param: *const X509_VERIFY_PARAM) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_move_peername(
        arg1: *mut X509_VERIFY_PARAM,
        arg2: *mut X509_VERIFY_PARAM,
    );
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get0_email(param: *mut X509_VERIFY_PARAM) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_email(
        param: *mut X509_VERIFY_PARAM,
        email: *const ::libc::c_char,
        emaillen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get1_ip_asc(param: *mut X509_VERIFY_PARAM) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_ip(
        param: *mut X509_VERIFY_PARAM,
        ip: *const ::libc::c_uchar,
        iplen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_ip_asc(
        param: *mut X509_VERIFY_PARAM,
        ipasc: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get_depth(param: *const X509_VERIFY_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get_auth_level(param: *const X509_VERIFY_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get0_name(param: *const X509_VERIFY_PARAM) -> *const ::libc::c_char;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_add0_table(param: *mut X509_VERIFY_PARAM) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get_count() -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get0(id: ::libc::c_int) -> *const X509_VERIFY_PARAM;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_lookup(name: *const ::libc::c_char) -> *const X509_VERIFY_PARAM;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_table_cleanup();
}
extern "C" {
    pub fn X509_policy_check(
        ptree: *mut *mut X509_POLICY_TREE,
        pexplicit_policy: *mut ::libc::c_int,
        certs: *mut stack_st_X509,
        policy_oids: *mut stack_st_ASN1_OBJECT,
        flags: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_policy_tree_free(tree: *mut X509_POLICY_TREE);
}
extern "C" {
    pub fn X509_policy_tree_level_count(tree: *const X509_POLICY_TREE) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_policy_tree_get0_level(
        tree: *const X509_POLICY_TREE,
        i: ::libc::c_int,
    ) -> *mut X509_POLICY_LEVEL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_POLICY_NODE {
    _unused: [u8; 0],
}
extern "C" {
    pub fn X509_policy_tree_get0_policies(
        tree: *const X509_POLICY_TREE,
    ) -> *mut stack_st_X509_POLICY_NODE;
}
extern "C" {
    pub fn X509_policy_tree_get0_user_policies(
        tree: *const X509_POLICY_TREE,
    ) -> *mut stack_st_X509_POLICY_NODE;
}
extern "C" {
    pub fn X509_policy_level_node_count(level: *mut X509_POLICY_LEVEL) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_policy_level_get0_node(
        level: *const X509_POLICY_LEVEL,
        i: ::libc::c_int,
    ) -> *mut X509_POLICY_NODE;
}
extern "C" {
    pub fn X509_policy_node_get0_policy(node: *const X509_POLICY_NODE) -> *const ASN1_OBJECT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_POLICYQUALINFO {
    _unused: [u8; 0],
}
extern "C" {
    pub fn X509_policy_node_get0_qualifiers(
        node: *const X509_POLICY_NODE,
    ) -> *mut stack_st_POLICYQUALINFO;
}
extern "C" {
    pub fn X509_policy_node_get0_parent(node: *const X509_POLICY_NODE) -> *const X509_POLICY_NODE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PKCS7_CTX_st {
    pub libctx: *mut OSSL_LIB_CTX,
    pub propq: *mut ::libc::c_char,
}
pub type PKCS7_CTX = PKCS7_CTX_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs7_issuer_and_serial_st {
    pub issuer: *mut X509_NAME,
    pub serial: *mut ASN1_INTEGER,
}
pub type PKCS7_ISSUER_AND_SERIAL = pkcs7_issuer_and_serial_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs7_signer_info_st {
    pub version: *mut ASN1_INTEGER,
    pub issuer_and_serial: *mut PKCS7_ISSUER_AND_SERIAL,
    pub digest_alg: *mut X509_ALGOR,
    pub auth_attr: *mut stack_st_X509_ATTRIBUTE,
    pub digest_enc_alg: *mut X509_ALGOR,
    pub enc_digest: *mut ASN1_OCTET_STRING,
    pub unauth_attr: *mut stack_st_X509_ATTRIBUTE,
    pub pkey: *mut EVP_PKEY,
    pub ctx: *const PKCS7_CTX,
}
pub type PKCS7_SIGNER_INFO = pkcs7_signer_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_PKCS7_SIGNER_INFO {
    _unused: [u8; 0],
}
pub type sk_PKCS7_SIGNER_INFO_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const PKCS7_SIGNER_INFO,
        b: *const *const PKCS7_SIGNER_INFO,
    ) -> ::libc::c_int,
>;
pub type sk_PKCS7_SIGNER_INFO_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut PKCS7_SIGNER_INFO)>;
pub type sk_PKCS7_SIGNER_INFO_copyfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const PKCS7_SIGNER_INFO) -> *mut PKCS7_SIGNER_INFO,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs7_recip_info_st {
    pub version: *mut ASN1_INTEGER,
    pub issuer_and_serial: *mut PKCS7_ISSUER_AND_SERIAL,
    pub key_enc_algor: *mut X509_ALGOR,
    pub enc_key: *mut ASN1_OCTET_STRING,
    pub cert: *mut X509,
    pub ctx: *const PKCS7_CTX,
}
pub type PKCS7_RECIP_INFO = pkcs7_recip_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_PKCS7_RECIP_INFO {
    _unused: [u8; 0],
}
pub type sk_PKCS7_RECIP_INFO_compfunc = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const *const PKCS7_RECIP_INFO,
        b: *const *const PKCS7_RECIP_INFO,
    ) -> ::libc::c_int,
>;
pub type sk_PKCS7_RECIP_INFO_freefunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut PKCS7_RECIP_INFO)>;
pub type sk_PKCS7_RECIP_INFO_copyfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const PKCS7_RECIP_INFO) -> *mut PKCS7_RECIP_INFO,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs7_signed_st {
    pub version: *mut ASN1_INTEGER,
    pub md_algs: *mut stack_st_X509_ALGOR,
    pub cert: *mut stack_st_X509,
    pub crl: *mut stack_st_X509_CRL,
    pub signer_info: *mut stack_st_PKCS7_SIGNER_INFO,
    pub contents: *mut pkcs7_st,
}
pub type PKCS7_SIGNED = pkcs7_signed_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs7_enc_content_st {
    pub content_type: *mut ASN1_OBJECT,
    pub algorithm: *mut X509_ALGOR,
    pub enc_data: *mut ASN1_OCTET_STRING,
    pub cipher: *const EVP_CIPHER,
    pub ctx: *const PKCS7_CTX,
}
pub type PKCS7_ENC_CONTENT = pkcs7_enc_content_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs7_enveloped_st {
    pub version: *mut ASN1_INTEGER,
    pub recipientinfo: *mut stack_st_PKCS7_RECIP_INFO,
    pub enc_data: *mut PKCS7_ENC_CONTENT,
}
pub type PKCS7_ENVELOPE = pkcs7_enveloped_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs7_signedandenveloped_st {
    pub version: *mut ASN1_INTEGER,
    pub md_algs: *mut stack_st_X509_ALGOR,
    pub cert: *mut stack_st_X509,
    pub crl: *mut stack_st_X509_CRL,
    pub signer_info: *mut stack_st_PKCS7_SIGNER_INFO,
    pub enc_data: *mut PKCS7_ENC_CONTENT,
    pub recipientinfo: *mut stack_st_PKCS7_RECIP_INFO,
}
pub type PKCS7_SIGN_ENVELOPE = pkcs7_signedandenveloped_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs7_digest_st {
    pub version: *mut ASN1_INTEGER,
    pub md: *mut X509_ALGOR,
    pub contents: *mut pkcs7_st,
    pub digest: *mut ASN1_OCTET_STRING,
}
pub type PKCS7_DIGEST = pkcs7_digest_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs7_encrypted_st {
    pub version: *mut ASN1_INTEGER,
    pub enc_data: *mut PKCS7_ENC_CONTENT,
}
pub type PKCS7_ENCRYPT = pkcs7_encrypted_st;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pkcs7_st {
    pub asn1: *mut ::libc::c_uchar,
    pub length: ::libc::c_long,
    pub state: ::libc::c_int,
    pub detached: ::libc::c_int,
    pub type_: *mut ASN1_OBJECT,
    pub d: pkcs7_st__bindgen_ty_1,
    pub ctx: PKCS7_CTX,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pkcs7_st__bindgen_ty_1 {
    pub ptr: *mut ::libc::c_char,
    pub data: *mut ASN1_OCTET_STRING,
    pub sign: *mut PKCS7_SIGNED,
    pub enveloped: *mut PKCS7_ENVELOPE,
    pub signed_and_enveloped: *mut PKCS7_SIGN_ENVELOPE,
    pub digest: *mut PKCS7_DIGEST,
    pub encrypted: *mut PKCS7_ENCRYPT,
    pub other: *mut ASN1_TYPE,
}
pub type PKCS7 = pkcs7_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_PKCS7 {
    _unused: [u8; 0],
}
pub type sk_PKCS7_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const PKCS7, b: *const *const PKCS7) -> ::libc::c_int,
>;
pub type sk_PKCS7_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut PKCS7)>;
pub type sk_PKCS7_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const PKCS7) -> *mut PKCS7>;
extern "C" {
    pub fn PKCS7_ISSUER_AND_SERIAL_new() -> *mut PKCS7_ISSUER_AND_SERIAL;
}
extern "C" {
    pub fn PKCS7_ISSUER_AND_SERIAL_free(a: *mut PKCS7_ISSUER_AND_SERIAL);
}
extern "C" {
    pub fn d2i_PKCS7_ISSUER_AND_SERIAL(
        a: *mut *mut PKCS7_ISSUER_AND_SERIAL,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS7_ISSUER_AND_SERIAL;
}
extern "C" {
    pub fn i2d_PKCS7_ISSUER_AND_SERIAL(
        a: *const PKCS7_ISSUER_AND_SERIAL,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_ISSUER_AND_SERIAL_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_ISSUER_AND_SERIAL_digest(
        data: *mut PKCS7_ISSUER_AND_SERIAL,
        type_: *const EVP_MD,
        md: *mut ::libc::c_uchar,
        len: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PKCS7_fp(fp: *mut FILE, p7: *mut *mut PKCS7) -> *mut PKCS7;
}
extern "C" {
    pub fn i2d_PKCS7_fp(fp: *mut FILE, p7: *const PKCS7) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_dup(a: *const PKCS7) -> *mut PKCS7;
}
extern "C" {
    pub fn d2i_PKCS7_bio(bp: *mut BIO, p7: *mut *mut PKCS7) -> *mut PKCS7;
}
extern "C" {
    pub fn i2d_PKCS7_bio(bp: *mut BIO, p7: *const PKCS7) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_PKCS7_bio_stream(
        out: *mut BIO,
        p7: *mut PKCS7,
        in_: *mut BIO,
        flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_bio_PKCS7_stream(
        out: *mut BIO,
        p7: *mut PKCS7,
        in_: *mut BIO,
        flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_SIGNER_INFO_new() -> *mut PKCS7_SIGNER_INFO;
}
extern "C" {
    pub fn PKCS7_SIGNER_INFO_free(a: *mut PKCS7_SIGNER_INFO);
}
extern "C" {
    pub fn d2i_PKCS7_SIGNER_INFO(
        a: *mut *mut PKCS7_SIGNER_INFO,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS7_SIGNER_INFO;
}
extern "C" {
    pub fn i2d_PKCS7_SIGNER_INFO(
        a: *const PKCS7_SIGNER_INFO,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_SIGNER_INFO_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_RECIP_INFO_new() -> *mut PKCS7_RECIP_INFO;
}
extern "C" {
    pub fn PKCS7_RECIP_INFO_free(a: *mut PKCS7_RECIP_INFO);
}
extern "C" {
    pub fn d2i_PKCS7_RECIP_INFO(
        a: *mut *mut PKCS7_RECIP_INFO,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS7_RECIP_INFO;
}
extern "C" {
    pub fn i2d_PKCS7_RECIP_INFO(
        a: *const PKCS7_RECIP_INFO,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_RECIP_INFO_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_SIGNED_new() -> *mut PKCS7_SIGNED;
}
extern "C" {
    pub fn PKCS7_SIGNED_free(a: *mut PKCS7_SIGNED);
}
extern "C" {
    pub fn d2i_PKCS7_SIGNED(
        a: *mut *mut PKCS7_SIGNED,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS7_SIGNED;
}
extern "C" {
    pub fn i2d_PKCS7_SIGNED(
        a: *const PKCS7_SIGNED,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_SIGNED_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_ENC_CONTENT_new() -> *mut PKCS7_ENC_CONTENT;
}
extern "C" {
    pub fn PKCS7_ENC_CONTENT_free(a: *mut PKCS7_ENC_CONTENT);
}
extern "C" {
    pub fn d2i_PKCS7_ENC_CONTENT(
        a: *mut *mut PKCS7_ENC_CONTENT,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS7_ENC_CONTENT;
}
extern "C" {
    pub fn i2d_PKCS7_ENC_CONTENT(
        a: *const PKCS7_ENC_CONTENT,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_ENC_CONTENT_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_ENVELOPE_new() -> *mut PKCS7_ENVELOPE;
}
extern "C" {
    pub fn PKCS7_ENVELOPE_free(a: *mut PKCS7_ENVELOPE);
}
extern "C" {
    pub fn d2i_PKCS7_ENVELOPE(
        a: *mut *mut PKCS7_ENVELOPE,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS7_ENVELOPE;
}
extern "C" {
    pub fn i2d_PKCS7_ENVELOPE(
        a: *const PKCS7_ENVELOPE,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_ENVELOPE_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_SIGN_ENVELOPE_new() -> *mut PKCS7_SIGN_ENVELOPE;
}
extern "C" {
    pub fn PKCS7_SIGN_ENVELOPE_free(a: *mut PKCS7_SIGN_ENVELOPE);
}
extern "C" {
    pub fn d2i_PKCS7_SIGN_ENVELOPE(
        a: *mut *mut PKCS7_SIGN_ENVELOPE,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS7_SIGN_ENVELOPE;
}
extern "C" {
    pub fn i2d_PKCS7_SIGN_ENVELOPE(
        a: *const PKCS7_SIGN_ENVELOPE,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_SIGN_ENVELOPE_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_DIGEST_new() -> *mut PKCS7_DIGEST;
}
extern "C" {
    pub fn PKCS7_DIGEST_free(a: *mut PKCS7_DIGEST);
}
extern "C" {
    pub fn d2i_PKCS7_DIGEST(
        a: *mut *mut PKCS7_DIGEST,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS7_DIGEST;
}
extern "C" {
    pub fn i2d_PKCS7_DIGEST(
        a: *const PKCS7_DIGEST,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_DIGEST_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_ENCRYPT_new() -> *mut PKCS7_ENCRYPT;
}
extern "C" {
    pub fn PKCS7_ENCRYPT_free(a: *mut PKCS7_ENCRYPT);
}
extern "C" {
    pub fn d2i_PKCS7_ENCRYPT(
        a: *mut *mut PKCS7_ENCRYPT,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS7_ENCRYPT;
}
extern "C" {
    pub fn i2d_PKCS7_ENCRYPT(
        a: *const PKCS7_ENCRYPT,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_ENCRYPT_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_new() -> *mut PKCS7;
}
extern "C" {
    pub fn PKCS7_free(a: *mut PKCS7);
}
extern "C" {
    pub fn d2i_PKCS7(
        a: *mut *mut PKCS7,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS7;
}
extern "C" {
    pub fn i2d_PKCS7(a: *const PKCS7, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_new_ex(libctx: *mut OSSL_LIB_CTX, propq: *const ::libc::c_char) -> *mut PKCS7;
}
extern "C" {
    pub fn PKCS7_ATTR_SIGN_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS7_ATTR_VERIFY_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn i2d_PKCS7_NDEF(a: *const PKCS7, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_print_ctx(
        out: *mut BIO,
        x: *const PKCS7,
        indent: ::libc::c_int,
        pctx: *const ASN1_PCTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_ctrl(
        p7: *mut PKCS7,
        cmd: ::libc::c_int,
        larg: ::libc::c_long,
        parg: *mut ::libc::c_char,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn PKCS7_type_is_other(p7: *mut PKCS7) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_set_type(p7: *mut PKCS7, type_: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_set0_type_other(
        p7: *mut PKCS7,
        type_: ::libc::c_int,
        other: *mut ASN1_TYPE,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_set_content(p7: *mut PKCS7, p7_data: *mut PKCS7) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_SIGNER_INFO_set(
        p7i: *mut PKCS7_SIGNER_INFO,
        x509: *mut X509,
        pkey: *mut EVP_PKEY,
        dgst: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_SIGNER_INFO_sign(si: *mut PKCS7_SIGNER_INFO) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_add_signer(p7: *mut PKCS7, p7i: *mut PKCS7_SIGNER_INFO) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_add_certificate(p7: *mut PKCS7, x509: *mut X509) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_add_crl(p7: *mut PKCS7, x509: *mut X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_content_new(p7: *mut PKCS7, nid: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_dataVerify(
        cert_store: *mut X509_STORE,
        ctx: *mut X509_STORE_CTX,
        bio: *mut BIO,
        p7: *mut PKCS7,
        si: *mut PKCS7_SIGNER_INFO,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_signatureVerify(
        bio: *mut BIO,
        p7: *mut PKCS7,
        si: *mut PKCS7_SIGNER_INFO,
        x509: *mut X509,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_dataInit(p7: *mut PKCS7, bio: *mut BIO) -> *mut BIO;
}
extern "C" {
    pub fn PKCS7_dataFinal(p7: *mut PKCS7, bio: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_dataDecode(
        p7: *mut PKCS7,
        pkey: *mut EVP_PKEY,
        in_bio: *mut BIO,
        pcert: *mut X509,
    ) -> *mut BIO;
}
extern "C" {
    pub fn PKCS7_add_signature(
        p7: *mut PKCS7,
        x509: *mut X509,
        pkey: *mut EVP_PKEY,
        dgst: *const EVP_MD,
    ) -> *mut PKCS7_SIGNER_INFO;
}
extern "C" {
    pub fn PKCS7_cert_from_signer_info(p7: *mut PKCS7, si: *mut PKCS7_SIGNER_INFO) -> *mut X509;
}
extern "C" {
    pub fn PKCS7_set_digest(p7: *mut PKCS7, md: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_get_signer_info(p7: *mut PKCS7) -> *mut stack_st_PKCS7_SIGNER_INFO;
}
extern "C" {
    pub fn PKCS7_add_recipient(p7: *mut PKCS7, x509: *mut X509) -> *mut PKCS7_RECIP_INFO;
}
extern "C" {
    pub fn PKCS7_SIGNER_INFO_get0_algs(
        si: *mut PKCS7_SIGNER_INFO,
        pk: *mut *mut EVP_PKEY,
        pdig: *mut *mut X509_ALGOR,
        psig: *mut *mut X509_ALGOR,
    );
}
extern "C" {
    pub fn PKCS7_RECIP_INFO_get0_alg(ri: *mut PKCS7_RECIP_INFO, penc: *mut *mut X509_ALGOR);
}
extern "C" {
    pub fn PKCS7_add_recipient_info(p7: *mut PKCS7, ri: *mut PKCS7_RECIP_INFO) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_RECIP_INFO_set(p7i: *mut PKCS7_RECIP_INFO, x509: *mut X509) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_set_cipher(p7: *mut PKCS7, cipher: *const EVP_CIPHER) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_stream(boundary: *mut *mut *mut ::libc::c_uchar, p7: *mut PKCS7) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_get_issuer_and_serial(
        p7: *mut PKCS7,
        idx: ::libc::c_int,
    ) -> *mut PKCS7_ISSUER_AND_SERIAL;
}
extern "C" {
    pub fn PKCS7_get_octet_string(p7: *mut PKCS7) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn PKCS7_digest_from_attributes(sk: *mut stack_st_X509_ATTRIBUTE)
        -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn PKCS7_add_signed_attribute(
        p7si: *mut PKCS7_SIGNER_INFO,
        nid: ::libc::c_int,
        type_: ::libc::c_int,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_add_attribute(
        p7si: *mut PKCS7_SIGNER_INFO,
        nid: ::libc::c_int,
        atrtype: ::libc::c_int,
        value: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_get_attribute(si: *const PKCS7_SIGNER_INFO, nid: ::libc::c_int) -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn PKCS7_get_signed_attribute(
        si: *const PKCS7_SIGNER_INFO,
        nid: ::libc::c_int,
    ) -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn PKCS7_set_signed_attributes(
        p7si: *mut PKCS7_SIGNER_INFO,
        sk: *mut stack_st_X509_ATTRIBUTE,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_set_attributes(
        p7si: *mut PKCS7_SIGNER_INFO,
        sk: *mut stack_st_X509_ATTRIBUTE,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_sign(
        signcert: *mut X509,
        pkey: *mut EVP_PKEY,
        certs: *mut stack_st_X509,
        data: *mut BIO,
        flags: ::libc::c_int,
    ) -> *mut PKCS7;
}
extern "C" {
    pub fn PKCS7_sign_ex(
        signcert: *mut X509,
        pkey: *mut EVP_PKEY,
        certs: *mut stack_st_X509,
        data: *mut BIO,
        flags: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut PKCS7;
}
extern "C" {
    pub fn PKCS7_sign_add_signer(
        p7: *mut PKCS7,
        signcert: *mut X509,
        pkey: *mut EVP_PKEY,
        md: *const EVP_MD,
        flags: ::libc::c_int,
    ) -> *mut PKCS7_SIGNER_INFO;
}
extern "C" {
    pub fn PKCS7_final(p7: *mut PKCS7, data: *mut BIO, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_verify(
        p7: *mut PKCS7,
        certs: *mut stack_st_X509,
        store: *mut X509_STORE,
        indata: *mut BIO,
        out: *mut BIO,
        flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_get0_signers(
        p7: *mut PKCS7,
        certs: *mut stack_st_X509,
        flags: ::libc::c_int,
    ) -> *mut stack_st_X509;
}
extern "C" {
    pub fn PKCS7_encrypt(
        certs: *mut stack_st_X509,
        in_: *mut BIO,
        cipher: *const EVP_CIPHER,
        flags: ::libc::c_int,
    ) -> *mut PKCS7;
}
extern "C" {
    pub fn PKCS7_encrypt_ex(
        certs: *mut stack_st_X509,
        in_: *mut BIO,
        cipher: *const EVP_CIPHER,
        flags: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut PKCS7;
}
extern "C" {
    pub fn PKCS7_decrypt(
        p7: *mut PKCS7,
        pkey: *mut EVP_PKEY,
        cert: *mut X509,
        data: *mut BIO,
        flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_add_attrib_smimecap(
        si: *mut PKCS7_SIGNER_INFO,
        cap: *mut stack_st_X509_ALGOR,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_get_smimecap(si: *mut PKCS7_SIGNER_INFO) -> *mut stack_st_X509_ALGOR;
}
extern "C" {
    pub fn PKCS7_simple_smimecap(
        sk: *mut stack_st_X509_ALGOR,
        nid: ::libc::c_int,
        arg: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_add_attrib_content_type(
        si: *mut PKCS7_SIGNER_INFO,
        coid: *mut ASN1_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_add0_attrib_signing_time(
        si: *mut PKCS7_SIGNER_INFO,
        t: *mut ASN1_TIME,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS7_add1_attrib_digest(
        si: *mut PKCS7_SIGNER_INFO,
        md: *const ::libc::c_uchar,
        mdlen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn SMIME_write_PKCS7(
        bio: *mut BIO,
        p7: *mut PKCS7,
        data: *mut BIO,
        flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn SMIME_read_PKCS7_ex(
        bio: *mut BIO,
        bcont: *mut *mut BIO,
        p7: *mut *mut PKCS7,
    ) -> *mut PKCS7;
}
extern "C" {
    pub fn SMIME_read_PKCS7(bio: *mut BIO, bcont: *mut *mut BIO) -> *mut PKCS7;
}
extern "C" {
    pub fn BIO_new_PKCS7(out: *mut BIO, p7: *mut PKCS7) -> *mut BIO;
}
extern "C" {
    pub fn X509_CRL_set_default_method(meth: *const X509_CRL_METHOD);
}
extern "C" {
    pub fn X509_CRL_METHOD_new(
        crl_init: ::std::option::Option<unsafe extern "C" fn(crl: *mut X509_CRL) -> ::libc::c_int>,
        crl_free: ::std::option::Option<unsafe extern "C" fn(crl: *mut X509_CRL) -> ::libc::c_int>,
        crl_lookup: ::std::option::Option<
            unsafe extern "C" fn(
                crl: *mut X509_CRL,
                ret: *mut *mut X509_REVOKED,
                serial: *const ASN1_INTEGER,
                issuer: *const X509_NAME,
            ) -> ::libc::c_int,
        >,
        crl_verify: ::std::option::Option<
            unsafe extern "C" fn(crl: *mut X509_CRL, pk: *mut EVP_PKEY) -> ::libc::c_int,
        >,
    ) -> *mut X509_CRL_METHOD;
}
extern "C" {
    pub fn X509_CRL_METHOD_free(m: *mut X509_CRL_METHOD);
}
extern "C" {
    pub fn X509_CRL_set_meth_data(crl: *mut X509_CRL, dat: *mut ::libc::c_void);
}
extern "C" {
    pub fn X509_CRL_get_meth_data(crl: *mut X509_CRL) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn X509_verify_cert_error_string(n: ::libc::c_long) -> *const ::libc::c_char;
}
extern "C" {
    pub fn X509_verify(a: *mut X509, r: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_self_signed(cert: *mut X509, verify_signature: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_verify_ex(
        a: *mut X509_REQ,
        r: *mut EVP_PKEY,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_verify(a: *mut X509_REQ, r: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_verify(a: *mut X509_CRL, r: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn NETSCAPE_SPKI_verify(a: *mut NETSCAPE_SPKI, r: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn NETSCAPE_SPKI_b64_decode(
        str_: *const ::libc::c_char,
        len: ::libc::c_int,
    ) -> *mut NETSCAPE_SPKI;
}
extern "C" {
    pub fn NETSCAPE_SPKI_b64_encode(x: *mut NETSCAPE_SPKI) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn NETSCAPE_SPKI_get_pubkey(x: *mut NETSCAPE_SPKI) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn NETSCAPE_SPKI_set_pubkey(x: *mut NETSCAPE_SPKI, pkey: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn NETSCAPE_SPKI_print(out: *mut BIO, spki: *mut NETSCAPE_SPKI) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_signature_dump(
        bp: *mut BIO,
        sig: *const ASN1_STRING,
        indent: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_signature_print(
        bp: *mut BIO,
        alg: *const X509_ALGOR,
        sig: *const ASN1_STRING,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_sign(x: *mut X509, pkey: *mut EVP_PKEY, md: *const EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_sign_ctx(x: *mut X509, ctx: *mut EVP_MD_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_sign(x: *mut X509_REQ, pkey: *mut EVP_PKEY, md: *const EVP_MD)
        -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_sign_ctx(x: *mut X509_REQ, ctx: *mut EVP_MD_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_sign(x: *mut X509_CRL, pkey: *mut EVP_PKEY, md: *const EVP_MD)
        -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_sign_ctx(x: *mut X509_CRL, ctx: *mut EVP_MD_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn NETSCAPE_SPKI_sign(
        x: *mut NETSCAPE_SPKI,
        pkey: *mut EVP_PKEY,
        md: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_pubkey_digest(
        data: *const X509,
        type_: *const EVP_MD,
        md: *mut ::libc::c_uchar,
        len: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_digest(
        data: *const X509,
        type_: *const EVP_MD,
        md: *mut ::libc::c_uchar,
        len: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_digest_sig(
        cert: *const X509,
        md_used: *mut *mut EVP_MD,
        md_is_fallback: *mut ::libc::c_int,
    ) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn X509_CRL_digest(
        data: *const X509_CRL,
        type_: *const EVP_MD,
        md: *mut ::libc::c_uchar,
        len: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_digest(
        data: *const X509_REQ,
        type_: *const EVP_MD,
        md: *mut ::libc::c_uchar,
        len: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_digest(
        data: *const X509_NAME,
        type_: *const EVP_MD,
        md: *mut ::libc::c_uchar,
        len: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_load_http(
        url: *const ::libc::c_char,
        bio: *mut BIO,
        rbio: *mut BIO,
        timeout: ::libc::c_int,
    ) -> *mut X509;
}
extern "C" {
    pub fn X509_CRL_load_http(
        url: *const ::libc::c_char,
        bio: *mut BIO,
        rbio: *mut BIO,
        timeout: ::libc::c_int,
    ) -> *mut X509_CRL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CONF_VALUE {
    pub section: *mut ::libc::c_char,
    pub name: *mut ::libc::c_char,
    pub value: *mut ::libc::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_CONF_VALUE {
    _unused: [u8; 0],
}
pub type sk_CONF_VALUE_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const CONF_VALUE, b: *const *const CONF_VALUE) -> ::libc::c_int,
>;
pub type sk_CONF_VALUE_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut CONF_VALUE)>;
pub type sk_CONF_VALUE_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const CONF_VALUE) -> *mut CONF_VALUE>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lhash_st_CONF_VALUE {
    pub dummy: lhash_st_CONF_VALUE_lh_CONF_VALUE_dummy,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lhash_st_CONF_VALUE_lh_CONF_VALUE_dummy {
    pub d1: *mut ::libc::c_void,
    pub d2: ::libc::c_ulong,
    pub d3: ::libc::c_int,
}
pub type lh_CONF_VALUE_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const CONF_VALUE, b: *const CONF_VALUE) -> ::libc::c_int,
>;
pub type lh_CONF_VALUE_hashfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const CONF_VALUE) -> ::libc::c_ulong>;
pub type lh_CONF_VALUE_doallfunc = ::std::option::Option<unsafe extern "C" fn(a: *mut CONF_VALUE)>;
pub type CONF_METHOD = conf_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct conf_method_st {
    pub name: *const ::libc::c_char,
    pub create: ::std::option::Option<unsafe extern "C" fn(meth: *mut CONF_METHOD) -> *mut CONF>,
    pub init: ::std::option::Option<unsafe extern "C" fn(conf: *mut CONF) -> ::libc::c_int>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(conf: *mut CONF) -> ::libc::c_int>,
    pub destroy_data: ::std::option::Option<unsafe extern "C" fn(conf: *mut CONF) -> ::libc::c_int>,
    pub load_bio: ::std::option::Option<
        unsafe extern "C" fn(
            conf: *mut CONF,
            bp: *mut BIO,
            eline: *mut ::libc::c_long,
        ) -> ::libc::c_int,
    >,
    pub dump: ::std::option::Option<
        unsafe extern "C" fn(conf: *const CONF, bp: *mut BIO) -> ::libc::c_int,
    >,
    pub is_number: ::std::option::Option<
        unsafe extern "C" fn(conf: *const CONF, c: ::libc::c_char) -> ::libc::c_int,
    >,
    pub to_int: ::std::option::Option<
        unsafe extern "C" fn(conf: *const CONF, c: ::libc::c_char) -> ::libc::c_int,
    >,
    pub load: ::std::option::Option<
        unsafe extern "C" fn(
            conf: *mut CONF,
            name: *const ::libc::c_char,
            eline: *mut ::libc::c_long,
        ) -> ::libc::c_int,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct conf_st {
    pub meth: *mut CONF_METHOD,
    pub meth_data: *mut ::libc::c_void,
    pub data: *mut lhash_st_CONF_VALUE,
    pub flag_dollarid: ::libc::c_int,
    pub flag_abspath: ::libc::c_int,
    pub includedir: *mut ::libc::c_char,
    pub libctx: *mut OSSL_LIB_CTX,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct conf_imodule_st {
    _unused: [u8; 0],
}
pub type CONF_IMODULE = conf_imodule_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct conf_module_st {
    _unused: [u8; 0],
}
pub type CONF_MODULE = conf_module_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_CONF_MODULE {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_CONF_IMODULE {
    _unused: [u8; 0],
}
pub type conf_init_func = ::std::option::Option<
    unsafe extern "C" fn(md: *mut CONF_IMODULE, cnf: *const CONF) -> ::libc::c_int,
>;
pub type conf_finish_func = ::std::option::Option<unsafe extern "C" fn(md: *mut CONF_IMODULE)>;
extern "C" {
    pub fn CONF_set_default_method(meth: *mut CONF_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn CONF_set_nconf(conf: *mut CONF, hash: *mut lhash_st_CONF_VALUE);
}
extern "C" {
    pub fn CONF_load(
        conf: *mut lhash_st_CONF_VALUE,
        file: *const ::libc::c_char,
        eline: *mut ::libc::c_long,
    ) -> *mut lhash_st_CONF_VALUE;
}
extern "C" {
    pub fn CONF_load_fp(
        conf: *mut lhash_st_CONF_VALUE,
        fp: *mut FILE,
        eline: *mut ::libc::c_long,
    ) -> *mut lhash_st_CONF_VALUE;
}
extern "C" {
    pub fn CONF_load_bio(
        conf: *mut lhash_st_CONF_VALUE,
        bp: *mut BIO,
        eline: *mut ::libc::c_long,
    ) -> *mut lhash_st_CONF_VALUE;
}
extern "C" {
    pub fn CONF_get_section(
        conf: *mut lhash_st_CONF_VALUE,
        section: *const ::libc::c_char,
    ) -> *mut stack_st_CONF_VALUE;
}
extern "C" {
    pub fn CONF_get_string(
        conf: *mut lhash_st_CONF_VALUE,
        group: *const ::libc::c_char,
        name: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn CONF_get_number(
        conf: *mut lhash_st_CONF_VALUE,
        group: *const ::libc::c_char,
        name: *const ::libc::c_char,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn CONF_free(conf: *mut lhash_st_CONF_VALUE);
}
extern "C" {
    pub fn CONF_dump_fp(conf: *mut lhash_st_CONF_VALUE, out: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn CONF_dump_bio(conf: *mut lhash_st_CONF_VALUE, out: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_config(config_name: *const ::libc::c_char);
}
extern "C" {
    pub fn NCONF_new_ex(libctx: *mut OSSL_LIB_CTX, meth: *mut CONF_METHOD) -> *mut CONF;
}
extern "C" {
    pub fn NCONF_get0_libctx(conf: *const CONF) -> *mut OSSL_LIB_CTX;
}
extern "C" {
    pub fn NCONF_new(meth: *mut CONF_METHOD) -> *mut CONF;
}
extern "C" {
    pub fn NCONF_default() -> *mut CONF_METHOD;
}
extern "C" {
    pub fn NCONF_WIN32() -> *mut CONF_METHOD;
}
extern "C" {
    pub fn NCONF_free(conf: *mut CONF);
}
extern "C" {
    pub fn NCONF_free_data(conf: *mut CONF);
}
extern "C" {
    pub fn NCONF_load(
        conf: *mut CONF,
        file: *const ::libc::c_char,
        eline: *mut ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn NCONF_load_fp(
        conf: *mut CONF,
        fp: *mut FILE,
        eline: *mut ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn NCONF_load_bio(
        conf: *mut CONF,
        bp: *mut BIO,
        eline: *mut ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn NCONF_get_section_names(conf: *const CONF) -> *mut stack_st_OPENSSL_CSTRING;
}
extern "C" {
    pub fn NCONF_get_section(
        conf: *const CONF,
        section: *const ::libc::c_char,
    ) -> *mut stack_st_CONF_VALUE;
}
extern "C" {
    pub fn NCONF_get_string(
        conf: *const CONF,
        group: *const ::libc::c_char,
        name: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn NCONF_get_number_e(
        conf: *const CONF,
        group: *const ::libc::c_char,
        name: *const ::libc::c_char,
        result: *mut ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn NCONF_dump_fp(conf: *const CONF, out: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn NCONF_dump_bio(conf: *const CONF, out: *mut BIO) -> ::libc::c_int;
}
extern "C" {
    pub fn CONF_modules_load(
        cnf: *const CONF,
        appname: *const ::libc::c_char,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CONF_modules_load_file_ex(
        libctx: *mut OSSL_LIB_CTX,
        filename: *const ::libc::c_char,
        appname: *const ::libc::c_char,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CONF_modules_load_file(
        filename: *const ::libc::c_char,
        appname: *const ::libc::c_char,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CONF_modules_unload(all: ::libc::c_int);
}
extern "C" {
    pub fn CONF_modules_finish();
}
extern "C" {
    pub fn CONF_module_add(
        name: *const ::libc::c_char,
        ifunc: conf_init_func,
        ffunc: conf_finish_func,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn CONF_imodule_get_name(md: *const CONF_IMODULE) -> *const ::libc::c_char;
}
extern "C" {
    pub fn CONF_imodule_get_value(md: *const CONF_IMODULE) -> *const ::libc::c_char;
}
extern "C" {
    pub fn CONF_imodule_get_usr_data(md: *const CONF_IMODULE) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn CONF_imodule_set_usr_data(md: *mut CONF_IMODULE, usr_data: *mut ::libc::c_void);
}
extern "C" {
    pub fn CONF_imodule_get_module(md: *const CONF_IMODULE) -> *mut CONF_MODULE;
}
extern "C" {
    pub fn CONF_imodule_get_flags(md: *const CONF_IMODULE) -> ::libc::c_ulong;
}
extern "C" {
    pub fn CONF_imodule_set_flags(md: *mut CONF_IMODULE, flags: ::libc::c_ulong);
}
extern "C" {
    pub fn CONF_module_get_usr_data(pmod: *mut CONF_MODULE) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn CONF_module_set_usr_data(pmod: *mut CONF_MODULE, usr_data: *mut ::libc::c_void);
}
extern "C" {
    pub fn CONF_get1_default_config_file() -> *mut ::libc::c_char;
}
extern "C" {
    pub fn CONF_parse_list(
        list: *const ::libc::c_char,
        sep: ::libc::c_int,
        nospc: ::libc::c_int,
        list_cb: ::std::option::Option<
            unsafe extern "C" fn(
                elem: *const ::libc::c_char,
                len: ::libc::c_int,
                usr: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OPENSSL_load_builtin_modules();
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_new(
        wbio: *mut BIO,
        rbio: *mut BIO,
        buf_size: ::libc::c_int,
    ) -> *mut OSSL_HTTP_REQ_CTX;
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_free(rctx: *mut OSSL_HTTP_REQ_CTX);
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_set_request_line(
        rctx: *mut OSSL_HTTP_REQ_CTX,
        method_POST: ::libc::c_int,
        server: *const ::libc::c_char,
        port: *const ::libc::c_char,
        path: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_add1_header(
        rctx: *mut OSSL_HTTP_REQ_CTX,
        name: *const ::libc::c_char,
        value: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_set_expected(
        rctx: *mut OSSL_HTTP_REQ_CTX,
        content_type: *const ::libc::c_char,
        asn1: ::libc::c_int,
        timeout: ::libc::c_int,
        keep_alive: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_set1_req(
        rctx: *mut OSSL_HTTP_REQ_CTX,
        content_type: *const ::libc::c_char,
        it: *const ASN1_ITEM,
        req: *const ASN1_VALUE,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_nbio(rctx: *mut OSSL_HTTP_REQ_CTX) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_nbio_d2i(
        rctx: *mut OSSL_HTTP_REQ_CTX,
        pval: *mut *mut ASN1_VALUE,
        it: *const ASN1_ITEM,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_exchange(rctx: *mut OSSL_HTTP_REQ_CTX) -> *mut BIO;
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_get0_mem_bio(rctx: *const OSSL_HTTP_REQ_CTX) -> *mut BIO;
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_get_resp_len(rctx: *const OSSL_HTTP_REQ_CTX) -> usize;
}
extern "C" {
    pub fn OSSL_HTTP_REQ_CTX_set_max_response_length(
        rctx: *mut OSSL_HTTP_REQ_CTX,
        len: ::libc::c_ulong,
    );
}
extern "C" {
    pub fn OSSL_HTTP_is_alive(rctx: *const OSSL_HTTP_REQ_CTX) -> ::libc::c_int;
}
pub type OSSL_HTTP_bio_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        bio: *mut BIO,
        arg: *mut ::libc::c_void,
        connect: ::libc::c_int,
        detail: ::libc::c_int,
    ) -> *mut BIO,
>;
extern "C" {
    pub fn OSSL_HTTP_open(
        server: *const ::libc::c_char,
        port: *const ::libc::c_char,
        proxy: *const ::libc::c_char,
        no_proxy: *const ::libc::c_char,
        use_ssl: ::libc::c_int,
        bio: *mut BIO,
        rbio: *mut BIO,
        bio_update_fn: OSSL_HTTP_bio_cb_t,
        arg: *mut ::libc::c_void,
        buf_size: ::libc::c_int,
        overall_timeout: ::libc::c_int,
    ) -> *mut OSSL_HTTP_REQ_CTX;
}
extern "C" {
    pub fn OSSL_HTTP_proxy_connect(
        bio: *mut BIO,
        server: *const ::libc::c_char,
        port: *const ::libc::c_char,
        proxyuser: *const ::libc::c_char,
        proxypass: *const ::libc::c_char,
        timeout: ::libc::c_int,
        bio_err: *mut BIO,
        prog: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_HTTP_set1_request(
        rctx: *mut OSSL_HTTP_REQ_CTX,
        path: *const ::libc::c_char,
        headers: *const stack_st_CONF_VALUE,
        content_type: *const ::libc::c_char,
        req: *mut BIO,
        expected_content_type: *const ::libc::c_char,
        expect_asn1: ::libc::c_int,
        max_resp_len: usize,
        timeout: ::libc::c_int,
        keep_alive: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_HTTP_exchange(
        rctx: *mut OSSL_HTTP_REQ_CTX,
        redirection_url: *mut *mut ::libc::c_char,
    ) -> *mut BIO;
}
extern "C" {
    pub fn OSSL_HTTP_get(
        url: *const ::libc::c_char,
        proxy: *const ::libc::c_char,
        no_proxy: *const ::libc::c_char,
        bio: *mut BIO,
        rbio: *mut BIO,
        bio_update_fn: OSSL_HTTP_bio_cb_t,
        arg: *mut ::libc::c_void,
        buf_size: ::libc::c_int,
        headers: *const stack_st_CONF_VALUE,
        expected_content_type: *const ::libc::c_char,
        expect_asn1: ::libc::c_int,
        max_resp_len: usize,
        timeout: ::libc::c_int,
    ) -> *mut BIO;
}
extern "C" {
    pub fn OSSL_HTTP_transfer(
        prctx: *mut *mut OSSL_HTTP_REQ_CTX,
        server: *const ::libc::c_char,
        port: *const ::libc::c_char,
        path: *const ::libc::c_char,
        use_ssl: ::libc::c_int,
        proxy: *const ::libc::c_char,
        no_proxy: *const ::libc::c_char,
        bio: *mut BIO,
        rbio: *mut BIO,
        bio_update_fn: OSSL_HTTP_bio_cb_t,
        arg: *mut ::libc::c_void,
        buf_size: ::libc::c_int,
        headers: *const stack_st_CONF_VALUE,
        content_type: *const ::libc::c_char,
        req: *mut BIO,
        expected_content_type: *const ::libc::c_char,
        expect_asn1: ::libc::c_int,
        max_resp_len: usize,
        timeout: ::libc::c_int,
        keep_alive: ::libc::c_int,
    ) -> *mut BIO;
}
extern "C" {
    pub fn OSSL_HTTP_close(rctx: *mut OSSL_HTTP_REQ_CTX, ok: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_parse_url(
        url: *const ::libc::c_char,
        pscheme: *mut *mut ::libc::c_char,
        puser: *mut *mut ::libc::c_char,
        phost: *mut *mut ::libc::c_char,
        pport: *mut *mut ::libc::c_char,
        pport_num: *mut ::libc::c_int,
        ppath: *mut *mut ::libc::c_char,
        pquery: *mut *mut ::libc::c_char,
        pfrag: *mut *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_HTTP_parse_url(
        url: *const ::libc::c_char,
        pssl: *mut ::libc::c_int,
        puser: *mut *mut ::libc::c_char,
        phost: *mut *mut ::libc::c_char,
        pport: *mut *mut ::libc::c_char,
        pport_num: *mut ::libc::c_int,
        ppath: *mut *mut ::libc::c_char,
        pquery: *mut *mut ::libc::c_char,
        pfrag: *mut *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn OSSL_HTTP_adapt_proxy(
        proxy: *const ::libc::c_char,
        no_proxy: *const ::libc::c_char,
        server: *const ::libc::c_char,
        use_ssl: ::libc::c_int,
    ) -> *const ::libc::c_char;
}
extern "C" {
    pub fn d2i_X509_fp(fp: *mut FILE, x509: *mut *mut X509) -> *mut X509;
}
extern "C" {
    pub fn i2d_X509_fp(fp: *mut FILE, x509: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_X509_CRL_fp(fp: *mut FILE, crl: *mut *mut X509_CRL) -> *mut X509_CRL;
}
extern "C" {
    pub fn i2d_X509_CRL_fp(fp: *mut FILE, crl: *const X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_X509_REQ_fp(fp: *mut FILE, req: *mut *mut X509_REQ) -> *mut X509_REQ;
}
extern "C" {
    pub fn i2d_X509_REQ_fp(fp: *mut FILE, req: *const X509_REQ) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_RSAPrivateKey_fp(fp: *mut FILE, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPrivateKey_fp(fp: *mut FILE, rsa: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_RSAPublicKey_fp(fp: *mut FILE, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPublicKey_fp(fp: *mut FILE, rsa: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_RSA_PUBKEY_fp(fp: *mut FILE, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSA_PUBKEY_fp(fp: *mut FILE, rsa: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_DSA_PUBKEY_fp(fp: *mut FILE, dsa: *mut *mut DSA) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSA_PUBKEY_fp(fp: *mut FILE, dsa: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_DSAPrivateKey_fp(fp: *mut FILE, dsa: *mut *mut DSA) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSAPrivateKey_fp(fp: *mut FILE, dsa: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_EC_PUBKEY_fp(fp: *mut FILE, eckey: *mut *mut EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_EC_PUBKEY_fp(fp: *mut FILE, eckey: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_ECPrivateKey_fp(fp: *mut FILE, eckey: *mut *mut EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_ECPrivateKey_fp(fp: *mut FILE, eckey: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PKCS8_fp(fp: *mut FILE, p8: *mut *mut X509_SIG) -> *mut X509_SIG;
}
extern "C" {
    pub fn i2d_PKCS8_fp(fp: *mut FILE, p8: *const X509_SIG) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_X509_PUBKEY_fp(fp: *mut FILE, xpk: *mut *mut X509_PUBKEY) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn i2d_X509_PUBKEY_fp(fp: *mut FILE, xpk: *const X509_PUBKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PKCS8_PRIV_KEY_INFO_fp(
        fp: *mut FILE,
        p8inf: *mut *mut PKCS8_PRIV_KEY_INFO,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn i2d_PKCS8_PRIV_KEY_INFO_fp(
        fp: *mut FILE,
        p8inf: *const PKCS8_PRIV_KEY_INFO,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKeyInfo_fp(fp: *mut FILE, key: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_PrivateKey_fp(fp: *mut FILE, pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PrivateKey_ex_fp(
        fp: *mut FILE,
        a: *mut *mut EVP_PKEY,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_PrivateKey_fp(fp: *mut FILE, a: *mut *mut EVP_PKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_PUBKEY_fp(fp: *mut FILE, pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PUBKEY_fp(fp: *mut FILE, a: *mut *mut EVP_PKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_X509_bio(bp: *mut BIO, x509: *mut *mut X509) -> *mut X509;
}
extern "C" {
    pub fn i2d_X509_bio(bp: *mut BIO, x509: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_X509_CRL_bio(bp: *mut BIO, crl: *mut *mut X509_CRL) -> *mut X509_CRL;
}
extern "C" {
    pub fn i2d_X509_CRL_bio(bp: *mut BIO, crl: *const X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_X509_REQ_bio(bp: *mut BIO, req: *mut *mut X509_REQ) -> *mut X509_REQ;
}
extern "C" {
    pub fn i2d_X509_REQ_bio(bp: *mut BIO, req: *const X509_REQ) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_RSAPrivateKey_bio(bp: *mut BIO, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPrivateKey_bio(bp: *mut BIO, rsa: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_RSAPublicKey_bio(bp: *mut BIO, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPublicKey_bio(bp: *mut BIO, rsa: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_RSA_PUBKEY_bio(bp: *mut BIO, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSA_PUBKEY_bio(bp: *mut BIO, rsa: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_DSA_PUBKEY_bio(bp: *mut BIO, dsa: *mut *mut DSA) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSA_PUBKEY_bio(bp: *mut BIO, dsa: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_DSAPrivateKey_bio(bp: *mut BIO, dsa: *mut *mut DSA) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSAPrivateKey_bio(bp: *mut BIO, dsa: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_EC_PUBKEY_bio(bp: *mut BIO, eckey: *mut *mut EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_EC_PUBKEY_bio(bp: *mut BIO, eckey: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_ECPrivateKey_bio(bp: *mut BIO, eckey: *mut *mut EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_ECPrivateKey_bio(bp: *mut BIO, eckey: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PKCS8_bio(bp: *mut BIO, p8: *mut *mut X509_SIG) -> *mut X509_SIG;
}
extern "C" {
    pub fn i2d_PKCS8_bio(bp: *mut BIO, p8: *const X509_SIG) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_X509_PUBKEY_bio(bp: *mut BIO, xpk: *mut *mut X509_PUBKEY) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn i2d_X509_PUBKEY_bio(bp: *mut BIO, xpk: *const X509_PUBKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PKCS8_PRIV_KEY_INFO_bio(
        bp: *mut BIO,
        p8inf: *mut *mut PKCS8_PRIV_KEY_INFO,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn i2d_PKCS8_PRIV_KEY_INFO_bio(
        bp: *mut BIO,
        p8inf: *const PKCS8_PRIV_KEY_INFO,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKeyInfo_bio(bp: *mut BIO, key: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_PrivateKey_bio(bp: *mut BIO, pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PrivateKey_ex_bio(
        bp: *mut BIO,
        a: *mut *mut EVP_PKEY,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_PrivateKey_bio(bp: *mut BIO, a: *mut *mut EVP_PKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_PUBKEY_bio(bp: *mut BIO, pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PUBKEY_bio(bp: *mut BIO, a: *mut *mut EVP_PKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn X509_dup(a: *const X509) -> *mut X509;
}
extern "C" {
    pub fn X509_ALGOR_dup(a: *const X509_ALGOR) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn X509_ATTRIBUTE_dup(a: *const X509_ATTRIBUTE) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_CRL_dup(a: *const X509_CRL) -> *mut X509_CRL;
}
extern "C" {
    pub fn X509_EXTENSION_dup(a: *const X509_EXTENSION) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_PUBKEY_dup(a: *const X509_PUBKEY) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn X509_REQ_dup(a: *const X509_REQ) -> *mut X509_REQ;
}
extern "C" {
    pub fn X509_REVOKED_dup(a: *const X509_REVOKED) -> *mut X509_REVOKED;
}
extern "C" {
    pub fn X509_ALGOR_set0(
        alg: *mut X509_ALGOR,
        aobj: *mut ASN1_OBJECT,
        ptype: ::libc::c_int,
        pval: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_ALGOR_get0(
        paobj: *mut *const ASN1_OBJECT,
        pptype: *mut ::libc::c_int,
        ppval: *mut *const ::libc::c_void,
        algor: *const X509_ALGOR,
    );
}
extern "C" {
    pub fn X509_ALGOR_set_md(alg: *mut X509_ALGOR, md: *const EVP_MD);
}
extern "C" {
    pub fn X509_ALGOR_cmp(a: *const X509_ALGOR, b: *const X509_ALGOR) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_ALGOR_copy(dest: *mut X509_ALGOR, src: *const X509_ALGOR) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_dup(a: *const X509_NAME) -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_NAME_ENTRY_dup(a: *const X509_NAME_ENTRY) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_cmp_time(s: *const ASN1_TIME, t: *mut time_t) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_cmp_current_time(s: *const ASN1_TIME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_cmp_timeframe(
        vpm: *const X509_VERIFY_PARAM,
        start: *const ASN1_TIME,
        end: *const ASN1_TIME,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_time_adj(s: *mut ASN1_TIME, adj: ::libc::c_long, t: *mut time_t) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_time_adj_ex(
        s: *mut ASN1_TIME,
        offset_day: ::libc::c_int,
        offset_sec: ::libc::c_long,
        t: *mut time_t,
    ) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_gmtime_adj(s: *mut ASN1_TIME, adj: ::libc::c_long) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_get_default_cert_area() -> *const ::libc::c_char;
}
extern "C" {
    pub fn X509_get_default_cert_dir() -> *const ::libc::c_char;
}
extern "C" {
    pub fn X509_get_default_cert_file() -> *const ::libc::c_char;
}
extern "C" {
    pub fn X509_get_default_cert_dir_env() -> *const ::libc::c_char;
}
extern "C" {
    pub fn X509_get_default_cert_file_env() -> *const ::libc::c_char;
}
extern "C" {
    pub fn X509_get_default_private_dir() -> *const ::libc::c_char;
}
extern "C" {
    pub fn X509_to_X509_REQ(x: *mut X509, pkey: *mut EVP_PKEY, md: *const EVP_MD) -> *mut X509_REQ;
}
extern "C" {
    pub fn X509_REQ_to_X509(
        r: *mut X509_REQ,
        days: ::libc::c_int,
        pkey: *mut EVP_PKEY,
    ) -> *mut X509;
}
extern "C" {
    pub fn X509_ALGOR_new() -> *mut X509_ALGOR;
}
extern "C" {
    pub fn X509_ALGOR_free(a: *mut X509_ALGOR);
}
extern "C" {
    pub fn d2i_X509_ALGOR(
        a: *mut *mut X509_ALGOR,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn i2d_X509_ALGOR(a: *const X509_ALGOR, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_ALGOR_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn d2i_X509_ALGORS(
        a: *mut *mut X509_ALGORS,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_ALGORS;
}
extern "C" {
    pub fn i2d_X509_ALGORS(a: *const X509_ALGORS, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_ALGORS_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_VAL_new() -> *mut X509_VAL;
}
extern "C" {
    pub fn X509_VAL_free(a: *mut X509_VAL);
}
extern "C" {
    pub fn d2i_X509_VAL(
        a: *mut *mut X509_VAL,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_VAL;
}
extern "C" {
    pub fn i2d_X509_VAL(a: *const X509_VAL, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_VAL_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_PUBKEY_new() -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn X509_PUBKEY_free(a: *mut X509_PUBKEY);
}
extern "C" {
    pub fn d2i_X509_PUBKEY(
        a: *mut *mut X509_PUBKEY,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn i2d_X509_PUBKEY(a: *const X509_PUBKEY, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_PUBKEY_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_PUBKEY_new_ex(
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn X509_PUBKEY_set(x: *mut *mut X509_PUBKEY, pkey: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_PUBKEY_get0(key: *const X509_PUBKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn X509_PUBKEY_get(key: *const X509_PUBKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn X509_get_pubkey_parameters(
        pkey: *mut EVP_PKEY,
        chain: *mut stack_st_X509,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_pathlen(x: *mut X509) -> ::libc::c_long;
}
extern "C" {
    pub fn d2i_PUBKEY(
        a: *mut *mut EVP_PKEY,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_PUBKEY(a: *const EVP_PKEY, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PUBKEY_ex(
        a: *mut *mut EVP_PKEY,
        pp: *mut *const ::libc::c_uchar,
        length: ::libc::c_long,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_RSA_PUBKEY(
        a: *mut *mut RSA,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSA_PUBKEY(a: *const RSA, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_DSA_PUBKEY(
        a: *mut *mut DSA,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSA_PUBKEY(a: *const DSA, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_EC_PUBKEY(
        a: *mut *mut EC_KEY,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_EC_PUBKEY(a: *const EC_KEY, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_SIG_new() -> *mut X509_SIG;
}
extern "C" {
    pub fn X509_SIG_free(a: *mut X509_SIG);
}
extern "C" {
    pub fn d2i_X509_SIG(
        a: *mut *mut X509_SIG,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_SIG;
}
extern "C" {
    pub fn i2d_X509_SIG(a: *const X509_SIG, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_SIG_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_SIG_get0(
        sig: *const X509_SIG,
        palg: *mut *const X509_ALGOR,
        pdigest: *mut *const ASN1_OCTET_STRING,
    );
}
extern "C" {
    pub fn X509_SIG_getm(
        sig: *mut X509_SIG,
        palg: *mut *mut X509_ALGOR,
        pdigest: *mut *mut ASN1_OCTET_STRING,
    );
}
extern "C" {
    pub fn X509_REQ_INFO_new() -> *mut X509_REQ_INFO;
}
extern "C" {
    pub fn X509_REQ_INFO_free(a: *mut X509_REQ_INFO);
}
extern "C" {
    pub fn d2i_X509_REQ_INFO(
        a: *mut *mut X509_REQ_INFO,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_REQ_INFO;
}
extern "C" {
    pub fn i2d_X509_REQ_INFO(
        a: *const X509_REQ_INFO,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_INFO_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_REQ_new() -> *mut X509_REQ;
}
extern "C" {
    pub fn X509_REQ_free(a: *mut X509_REQ);
}
extern "C" {
    pub fn d2i_X509_REQ(
        a: *mut *mut X509_REQ,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_REQ;
}
extern "C" {
    pub fn i2d_X509_REQ(a: *const X509_REQ, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_REQ_new_ex(
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut X509_REQ;
}
extern "C" {
    pub fn X509_ATTRIBUTE_new() -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_ATTRIBUTE_free(a: *mut X509_ATTRIBUTE);
}
extern "C" {
    pub fn d2i_X509_ATTRIBUTE(
        a: *mut *mut X509_ATTRIBUTE,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn i2d_X509_ATTRIBUTE(
        a: *const X509_ATTRIBUTE,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_ATTRIBUTE_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_ATTRIBUTE_create(
        nid: ::libc::c_int,
        atrtype: ::libc::c_int,
        value: *mut ::libc::c_void,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_EXTENSION_new() -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_EXTENSION_free(a: *mut X509_EXTENSION);
}
extern "C" {
    pub fn d2i_X509_EXTENSION(
        a: *mut *mut X509_EXTENSION,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn i2d_X509_EXTENSION(
        a: *const X509_EXTENSION,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_EXTENSION_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn d2i_X509_EXTENSIONS(
        a: *mut *mut X509_EXTENSIONS,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_EXTENSIONS;
}
extern "C" {
    pub fn i2d_X509_EXTENSIONS(
        a: *const X509_EXTENSIONS,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_EXTENSIONS_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_NAME_ENTRY_new() -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_ENTRY_free(a: *mut X509_NAME_ENTRY);
}
extern "C" {
    pub fn d2i_X509_NAME_ENTRY(
        a: *mut *mut X509_NAME_ENTRY,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn i2d_X509_NAME_ENTRY(
        a: *const X509_NAME_ENTRY,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_ENTRY_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_NAME_new() -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_NAME_free(a: *mut X509_NAME);
}
extern "C" {
    pub fn d2i_X509_NAME(
        a: *mut *mut X509_NAME,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_NAME;
}
extern "C" {
    pub fn i2d_X509_NAME(a: *const X509_NAME, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_NAME_set(xn: *mut *mut X509_NAME, name: *const X509_NAME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CINF_new() -> *mut X509_CINF;
}
extern "C" {
    pub fn X509_CINF_free(a: *mut X509_CINF);
}
extern "C" {
    pub fn d2i_X509_CINF(
        a: *mut *mut X509_CINF,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_CINF;
}
extern "C" {
    pub fn i2d_X509_CINF(a: *const X509_CINF, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CINF_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_new() -> *mut X509;
}
extern "C" {
    pub fn X509_free(a: *mut X509);
}
extern "C" {
    pub fn d2i_X509(
        a: *mut *mut X509,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509;
}
extern "C" {
    pub fn i2d_X509(a: *const X509, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_new_ex(libctx: *mut OSSL_LIB_CTX, propq: *const ::libc::c_char) -> *mut X509;
}
extern "C" {
    pub fn X509_CERT_AUX_new() -> *mut X509_CERT_AUX;
}
extern "C" {
    pub fn X509_CERT_AUX_free(a: *mut X509_CERT_AUX);
}
extern "C" {
    pub fn d2i_X509_CERT_AUX(
        a: *mut *mut X509_CERT_AUX,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_CERT_AUX;
}
extern "C" {
    pub fn i2d_X509_CERT_AUX(
        a: *const X509_CERT_AUX,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CERT_AUX_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_set_ex_data(
        r: *mut X509,
        idx: ::libc::c_int,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_ex_data(r: *const X509, idx: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn d2i_X509_AUX(
        a: *mut *mut X509,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509;
}
extern "C" {
    pub fn i2d_X509_AUX(a: *const X509, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_re_X509_tbs(x: *mut X509, pp: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_SIG_INFO_get(
        siginf: *const X509_SIG_INFO,
        mdnid: *mut ::libc::c_int,
        pknid: *mut ::libc::c_int,
        secbits: *mut ::libc::c_int,
        flags: *mut u32,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_SIG_INFO_set(
        siginf: *mut X509_SIG_INFO,
        mdnid: ::libc::c_int,
        pknid: ::libc::c_int,
        secbits: ::libc::c_int,
        flags: u32,
    );
}
extern "C" {
    pub fn X509_get_signature_info(
        x: *mut X509,
        mdnid: *mut ::libc::c_int,
        pknid: *mut ::libc::c_int,
        secbits: *mut ::libc::c_int,
        flags: *mut u32,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get0_signature(
        psig: *mut *const ASN1_BIT_STRING,
        palg: *mut *const X509_ALGOR,
        x: *const X509,
    );
}
extern "C" {
    pub fn X509_get_signature_nid(x: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_set0_distinguishing_id(x: *mut X509, d_id: *mut ASN1_OCTET_STRING);
}
extern "C" {
    pub fn X509_get0_distinguishing_id(x: *mut X509) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn X509_REQ_set0_distinguishing_id(x: *mut X509_REQ, d_id: *mut ASN1_OCTET_STRING);
}
extern "C" {
    pub fn X509_REQ_get0_distinguishing_id(x: *mut X509_REQ) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn X509_alias_set1(
        x: *mut X509,
        name: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_keyid_set1(
        x: *mut X509,
        id: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_alias_get0(x: *mut X509, len: *mut ::libc::c_int) -> *mut ::libc::c_uchar;
}
extern "C" {
    pub fn X509_keyid_get0(x: *mut X509, len: *mut ::libc::c_int) -> *mut ::libc::c_uchar;
}
extern "C" {
    pub fn X509_REVOKED_new() -> *mut X509_REVOKED;
}
extern "C" {
    pub fn X509_REVOKED_free(a: *mut X509_REVOKED);
}
extern "C" {
    pub fn d2i_X509_REVOKED(
        a: *mut *mut X509_REVOKED,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_REVOKED;
}
extern "C" {
    pub fn i2d_X509_REVOKED(
        a: *const X509_REVOKED,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REVOKED_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_CRL_INFO_new() -> *mut X509_CRL_INFO;
}
extern "C" {
    pub fn X509_CRL_INFO_free(a: *mut X509_CRL_INFO);
}
extern "C" {
    pub fn d2i_X509_CRL_INFO(
        a: *mut *mut X509_CRL_INFO,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_CRL_INFO;
}
extern "C" {
    pub fn i2d_X509_CRL_INFO(
        a: *const X509_CRL_INFO,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_INFO_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_CRL_new() -> *mut X509_CRL;
}
extern "C" {
    pub fn X509_CRL_free(a: *mut X509_CRL);
}
extern "C" {
    pub fn d2i_X509_CRL(
        a: *mut *mut X509_CRL,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut X509_CRL;
}
extern "C" {
    pub fn i2d_X509_CRL(a: *const X509_CRL, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_CRL_new_ex(
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut X509_CRL;
}
extern "C" {
    pub fn X509_CRL_add0_revoked(crl: *mut X509_CRL, rev: *mut X509_REVOKED) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_get0_by_serial(
        crl: *mut X509_CRL,
        ret: *mut *mut X509_REVOKED,
        serial: *const ASN1_INTEGER,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_get0_by_cert(
        crl: *mut X509_CRL,
        ret: *mut *mut X509_REVOKED,
        x: *mut X509,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_PKEY_new() -> *mut X509_PKEY;
}
extern "C" {
    pub fn X509_PKEY_free(a: *mut X509_PKEY);
}
extern "C" {
    pub fn NETSCAPE_SPKI_new() -> *mut NETSCAPE_SPKI;
}
extern "C" {
    pub fn NETSCAPE_SPKI_free(a: *mut NETSCAPE_SPKI);
}
extern "C" {
    pub fn d2i_NETSCAPE_SPKI(
        a: *mut *mut NETSCAPE_SPKI,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut NETSCAPE_SPKI;
}
extern "C" {
    pub fn i2d_NETSCAPE_SPKI(
        a: *const NETSCAPE_SPKI,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn NETSCAPE_SPKI_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn NETSCAPE_SPKAC_new() -> *mut NETSCAPE_SPKAC;
}
extern "C" {
    pub fn NETSCAPE_SPKAC_free(a: *mut NETSCAPE_SPKAC);
}
extern "C" {
    pub fn d2i_NETSCAPE_SPKAC(
        a: *mut *mut NETSCAPE_SPKAC,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut NETSCAPE_SPKAC;
}
extern "C" {
    pub fn i2d_NETSCAPE_SPKAC(
        a: *const NETSCAPE_SPKAC,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn NETSCAPE_SPKAC_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn NETSCAPE_CERT_SEQUENCE_new() -> *mut NETSCAPE_CERT_SEQUENCE;
}
extern "C" {
    pub fn NETSCAPE_CERT_SEQUENCE_free(a: *mut NETSCAPE_CERT_SEQUENCE);
}
extern "C" {
    pub fn d2i_NETSCAPE_CERT_SEQUENCE(
        a: *mut *mut NETSCAPE_CERT_SEQUENCE,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut NETSCAPE_CERT_SEQUENCE;
}
extern "C" {
    pub fn i2d_NETSCAPE_CERT_SEQUENCE(
        a: *const NETSCAPE_CERT_SEQUENCE,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn NETSCAPE_CERT_SEQUENCE_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn X509_INFO_new() -> *mut X509_INFO;
}
extern "C" {
    pub fn X509_INFO_free(a: *mut X509_INFO);
}
extern "C" {
    pub fn X509_NAME_oneline(
        a: *const X509_NAME,
        buf: *mut ::libc::c_char,
        size: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ASN1_verify(
        i2d: i2d_of_void,
        algor1: *mut X509_ALGOR,
        signature: *mut ASN1_BIT_STRING,
        data: *mut ::libc::c_char,
        pkey: *mut EVP_PKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_digest(
        i2d: i2d_of_void,
        type_: *const EVP_MD,
        data: *mut ::libc::c_char,
        md: *mut ::libc::c_uchar,
        len: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_sign(
        i2d: i2d_of_void,
        algor1: *mut X509_ALGOR,
        algor2: *mut X509_ALGOR,
        signature: *mut ASN1_BIT_STRING,
        data: *mut ::libc::c_char,
        pkey: *mut EVP_PKEY,
        type_: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_digest(
        it: *const ASN1_ITEM,
        type_: *const EVP_MD,
        data: *mut ::libc::c_void,
        md: *mut ::libc::c_uchar,
        len: *mut ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_verify(
        it: *const ASN1_ITEM,
        alg: *const X509_ALGOR,
        signature: *const ASN1_BIT_STRING,
        data: *const ::libc::c_void,
        pkey: *mut EVP_PKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_verify_ctx(
        it: *const ASN1_ITEM,
        alg: *const X509_ALGOR,
        signature: *const ASN1_BIT_STRING,
        data: *const ::libc::c_void,
        ctx: *mut EVP_MD_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_sign(
        it: *const ASN1_ITEM,
        algor1: *mut X509_ALGOR,
        algor2: *mut X509_ALGOR,
        signature: *mut ASN1_BIT_STRING,
        data: *const ::libc::c_void,
        pkey: *mut EVP_PKEY,
        md: *const EVP_MD,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ASN1_item_sign_ctx(
        it: *const ASN1_ITEM,
        algor1: *mut X509_ALGOR,
        algor2: *mut X509_ALGOR,
        signature: *mut ASN1_BIT_STRING,
        data: *const ::libc::c_void,
        ctx: *mut EVP_MD_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_version(x: *const X509) -> ::libc::c_long;
}
extern "C" {
    pub fn X509_set_version(x: *mut X509, version: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_set_serialNumber(x: *mut X509, serial: *mut ASN1_INTEGER) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_serialNumber(x: *mut X509) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn X509_get0_serialNumber(x: *const X509) -> *const ASN1_INTEGER;
}
extern "C" {
    pub fn X509_set_issuer_name(x: *mut X509, name: *const X509_NAME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_issuer_name(a: *const X509) -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_set_subject_name(x: *mut X509, name: *const X509_NAME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_subject_name(a: *const X509) -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_get0_notBefore(x: *const X509) -> *const ASN1_TIME;
}
extern "C" {
    pub fn X509_getm_notBefore(x: *const X509) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_set1_notBefore(x: *mut X509, tm: *const ASN1_TIME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get0_notAfter(x: *const X509) -> *const ASN1_TIME;
}
extern "C" {
    pub fn X509_getm_notAfter(x: *const X509) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_set1_notAfter(x: *mut X509, tm: *const ASN1_TIME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_set_pubkey(x: *mut X509, pkey: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_up_ref(x: *mut X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_signature_type(x: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_X509_PUBKEY(x: *const X509) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn X509_get0_extensions(x: *const X509) -> *const stack_st_X509_EXTENSION;
}
extern "C" {
    pub fn X509_get0_uids(
        x: *const X509,
        piuid: *mut *const ASN1_BIT_STRING,
        psuid: *mut *const ASN1_BIT_STRING,
    );
}
extern "C" {
    pub fn X509_get0_tbs_sigalg(x: *const X509) -> *const X509_ALGOR;
}
extern "C" {
    pub fn X509_get0_pubkey(x: *const X509) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn X509_get_pubkey(x: *mut X509) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn X509_get0_pubkey_bitstr(x: *const X509) -> *mut ASN1_BIT_STRING;
}
extern "C" {
    pub fn X509_REQ_get_version(req: *const X509_REQ) -> ::libc::c_long;
}
extern "C" {
    pub fn X509_REQ_set_version(x: *mut X509_REQ, version: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_get_subject_name(req: *const X509_REQ) -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_REQ_set_subject_name(req: *mut X509_REQ, name: *const X509_NAME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_get0_signature(
        req: *const X509_REQ,
        psig: *mut *const ASN1_BIT_STRING,
        palg: *mut *const X509_ALGOR,
    );
}
extern "C" {
    pub fn X509_REQ_set0_signature(req: *mut X509_REQ, psig: *mut ASN1_BIT_STRING);
}
extern "C" {
    pub fn X509_REQ_set1_signature_algo(req: *mut X509_REQ, palg: *mut X509_ALGOR)
        -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_get_signature_nid(req: *const X509_REQ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_re_X509_REQ_tbs(req: *mut X509_REQ, pp: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_set_pubkey(x: *mut X509_REQ, pkey: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_get_pubkey(req: *mut X509_REQ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn X509_REQ_get0_pubkey(req: *mut X509_REQ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn X509_REQ_get_X509_PUBKEY(req: *mut X509_REQ) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn X509_REQ_extension_nid(nid: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_get_extension_nids() -> *mut ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_set_extension_nids(nids: *mut ::libc::c_int);
}
extern "C" {
    pub fn X509_REQ_get_extensions(req: *mut X509_REQ) -> *mut stack_st_X509_EXTENSION;
}
extern "C" {
    pub fn X509_REQ_add_extensions_nid(
        req: *mut X509_REQ,
        exts: *const stack_st_X509_EXTENSION,
        nid: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_add_extensions(
        req: *mut X509_REQ,
        ext: *const stack_st_X509_EXTENSION,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_get_attr_count(req: *const X509_REQ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_get_attr_by_NID(
        req: *const X509_REQ,
        nid: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_get_attr_by_OBJ(
        req: *const X509_REQ,
        obj: *const ASN1_OBJECT,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_get_attr(req: *const X509_REQ, loc: ::libc::c_int) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_REQ_delete_attr(req: *mut X509_REQ, loc: ::libc::c_int) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_REQ_add1_attr(req: *mut X509_REQ, attr: *mut X509_ATTRIBUTE) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_add1_attr_by_OBJ(
        req: *mut X509_REQ,
        obj: *const ASN1_OBJECT,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_add1_attr_by_NID(
        req: *mut X509_REQ,
        nid: ::libc::c_int,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_add1_attr_by_txt(
        req: *mut X509_REQ,
        attrname: *const ::libc::c_char,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_set_version(x: *mut X509_CRL, version: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_set_issuer_name(x: *mut X509_CRL, name: *const X509_NAME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_set1_lastUpdate(x: *mut X509_CRL, tm: *const ASN1_TIME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_set1_nextUpdate(x: *mut X509_CRL, tm: *const ASN1_TIME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_sort(crl: *mut X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_up_ref(crl: *mut X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_get_version(crl: *const X509_CRL) -> ::libc::c_long;
}
extern "C" {
    pub fn X509_CRL_get0_lastUpdate(crl: *const X509_CRL) -> *const ASN1_TIME;
}
extern "C" {
    pub fn X509_CRL_get0_nextUpdate(crl: *const X509_CRL) -> *const ASN1_TIME;
}
extern "C" {
    pub fn X509_CRL_get_lastUpdate(crl: *mut X509_CRL) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_CRL_get_nextUpdate(crl: *mut X509_CRL) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_CRL_get_issuer(crl: *const X509_CRL) -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_CRL_get0_extensions(crl: *const X509_CRL) -> *const stack_st_X509_EXTENSION;
}
extern "C" {
    pub fn X509_CRL_get_REVOKED(crl: *mut X509_CRL) -> *mut stack_st_X509_REVOKED;
}
extern "C" {
    pub fn X509_CRL_get0_signature(
        crl: *const X509_CRL,
        psig: *mut *const ASN1_BIT_STRING,
        palg: *mut *const X509_ALGOR,
    );
}
extern "C" {
    pub fn X509_CRL_get_signature_nid(crl: *const X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_re_X509_CRL_tbs(req: *mut X509_CRL, pp: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get0_serialNumber(x: *const X509_REVOKED) -> *const ASN1_INTEGER;
}
extern "C" {
    pub fn X509_REVOKED_set_serialNumber(
        x: *mut X509_REVOKED,
        serial: *mut ASN1_INTEGER,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get0_revocationDate(x: *const X509_REVOKED) -> *const ASN1_TIME;
}
extern "C" {
    pub fn X509_REVOKED_set_revocationDate(
        r: *mut X509_REVOKED,
        tm: *mut ASN1_TIME,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get0_extensions(r: *const X509_REVOKED) -> *const stack_st_X509_EXTENSION;
}
extern "C" {
    pub fn X509_CRL_diff(
        base: *mut X509_CRL,
        newer: *mut X509_CRL,
        skey: *mut EVP_PKEY,
        md: *const EVP_MD,
        flags: ::libc::c_uint,
    ) -> *mut X509_CRL;
}
extern "C" {
    pub fn X509_REQ_check_private_key(x509: *mut X509_REQ, pkey: *mut EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_check_private_key(x509: *const X509, pkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_chain_check_suiteb(
        perror_depth: *mut ::libc::c_int,
        x: *mut X509,
        chain: *mut stack_st_X509,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_check_suiteb(
        crl: *mut X509_CRL,
        pk: *mut EVP_PKEY,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_chain_up_ref(chain: *mut stack_st_X509) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_issuer_and_serial_cmp(a: *const X509, b: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_issuer_and_serial_hash(a: *mut X509) -> ::libc::c_ulong;
}
extern "C" {
    pub fn X509_issuer_name_cmp(a: *const X509, b: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_issuer_name_hash(a: *mut X509) -> ::libc::c_ulong;
}
extern "C" {
    pub fn X509_subject_name_cmp(a: *const X509, b: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_subject_name_hash(x: *mut X509) -> ::libc::c_ulong;
}
extern "C" {
    pub fn X509_issuer_name_hash_old(a: *mut X509) -> ::libc::c_ulong;
}
extern "C" {
    pub fn X509_subject_name_hash_old(x: *mut X509) -> ::libc::c_ulong;
}
extern "C" {
    pub fn X509_add_cert(
        sk: *mut stack_st_X509,
        cert: *mut X509,
        flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_add_certs(
        sk: *mut stack_st_X509,
        certs: *mut stack_st_X509,
        flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_cmp(a: *const X509, b: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_cmp(a: *const X509_NAME, b: *const X509_NAME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_certificate_type(x: *const X509, pubkey: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_hash_ex(
        x: *const X509_NAME,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
        ok: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn X509_NAME_hash_old(x: *const X509_NAME) -> ::libc::c_ulong;
}
extern "C" {
    pub fn X509_CRL_cmp(a: *const X509_CRL, b: *const X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_match(a: *const X509_CRL, b: *const X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_aux_print(out: *mut BIO, x: *mut X509, indent: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_print_ex_fp(
        bp: *mut FILE,
        x: *mut X509,
        nmflag: ::libc::c_ulong,
        cflag: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_print_fp(bp: *mut FILE, x: *mut X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_print_fp(bp: *mut FILE, x: *mut X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_print_fp(bp: *mut FILE, req: *mut X509_REQ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_print_ex_fp(
        fp: *mut FILE,
        nm: *const X509_NAME,
        indent: ::libc::c_int,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_print(
        bp: *mut BIO,
        name: *const X509_NAME,
        obase: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_print_ex(
        out: *mut BIO,
        nm: *const X509_NAME,
        indent: ::libc::c_int,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_print_ex(
        bp: *mut BIO,
        x: *mut X509,
        nmflag: ::libc::c_ulong,
        cflag: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_print(bp: *mut BIO, x: *mut X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_ocspid_print(bp: *mut BIO, x: *mut X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_print_ex(
        out: *mut BIO,
        x: *mut X509_CRL,
        nmflag: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_print(bp: *mut BIO, x: *mut X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_print_ex(
        bp: *mut BIO,
        x: *mut X509_REQ,
        nmflag: ::libc::c_ulong,
        cflag: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REQ_print(bp: *mut BIO, req: *mut X509_REQ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_entry_count(name: *const X509_NAME) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_get_text_by_NID(
        name: *const X509_NAME,
        nid: ::libc::c_int,
        buf: *mut ::libc::c_char,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_get_text_by_OBJ(
        name: *const X509_NAME,
        obj: *const ASN1_OBJECT,
        buf: *mut ::libc::c_char,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_get_index_by_NID(
        name: *const X509_NAME,
        nid: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_get_index_by_OBJ(
        name: *const X509_NAME,
        obj: *const ASN1_OBJECT,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_get_entry(name: *const X509_NAME, loc: ::libc::c_int) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_delete_entry(name: *mut X509_NAME, loc: ::libc::c_int)
        -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_add_entry(
        name: *mut X509_NAME,
        ne: *const X509_NAME_ENTRY,
        loc: ::libc::c_int,
        set: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_add_entry_by_OBJ(
        name: *mut X509_NAME,
        obj: *const ASN1_OBJECT,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
        loc: ::libc::c_int,
        set: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_add_entry_by_NID(
        name: *mut X509_NAME,
        nid: ::libc::c_int,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
        loc: ::libc::c_int,
        set: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_ENTRY_create_by_txt(
        ne: *mut *mut X509_NAME_ENTRY,
        field: *const ::libc::c_char,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_ENTRY_create_by_NID(
        ne: *mut *mut X509_NAME_ENTRY,
        nid: ::libc::c_int,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_add_entry_by_txt(
        name: *mut X509_NAME,
        field: *const ::libc::c_char,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
        loc: ::libc::c_int,
        set: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_ENTRY_create_by_OBJ(
        ne: *mut *mut X509_NAME_ENTRY,
        obj: *const ASN1_OBJECT,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_ENTRY_set_object(
        ne: *mut X509_NAME_ENTRY,
        obj: *const ASN1_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_ENTRY_set_data(
        ne: *mut X509_NAME_ENTRY,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_ENTRY_get_object(ne: *const X509_NAME_ENTRY) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn X509_NAME_ENTRY_get_data(ne: *const X509_NAME_ENTRY) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn X509_NAME_ENTRY_set(ne: *const X509_NAME_ENTRY) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_NAME_get0_der(
        nm: *const X509_NAME,
        pder: *mut *const ::libc::c_uchar,
        pderlen: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509v3_get_ext_count(x: *const stack_st_X509_EXTENSION) -> ::libc::c_int;
}
extern "C" {
    pub fn X509v3_get_ext_by_NID(
        x: *const stack_st_X509_EXTENSION,
        nid: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509v3_get_ext_by_OBJ(
        x: *const stack_st_X509_EXTENSION,
        obj: *const ASN1_OBJECT,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509v3_get_ext_by_critical(
        x: *const stack_st_X509_EXTENSION,
        crit: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509v3_get_ext(
        x: *const stack_st_X509_EXTENSION,
        loc: ::libc::c_int,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509v3_delete_ext(
        x: *mut stack_st_X509_EXTENSION,
        loc: ::libc::c_int,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509v3_add_ext(
        x: *mut *mut stack_st_X509_EXTENSION,
        ex: *mut X509_EXTENSION,
        loc: ::libc::c_int,
    ) -> *mut stack_st_X509_EXTENSION;
}
extern "C" {
    pub fn X509_get_ext_count(x: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_ext_by_NID(
        x: *const X509,
        nid: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_ext_by_OBJ(
        x: *const X509,
        obj: *const ASN1_OBJECT,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_ext_by_critical(
        x: *const X509,
        crit: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_ext(x: *const X509, loc: ::libc::c_int) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_delete_ext(x: *mut X509, loc: ::libc::c_int) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_add_ext(x: *mut X509, ex: *mut X509_EXTENSION, loc: ::libc::c_int)
        -> ::libc::c_int;
}
extern "C" {
    pub fn X509_get_ext_d2i(
        x: *const X509,
        nid: ::libc::c_int,
        crit: *mut ::libc::c_int,
        idx: *mut ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn X509_add1_ext_i2d(
        x: *mut X509,
        nid: ::libc::c_int,
        value: *mut ::libc::c_void,
        crit: ::libc::c_int,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext_count(x: *const X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext_by_NID(
        x: *const X509_CRL,
        nid: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext_by_OBJ(
        x: *const X509_CRL,
        obj: *const ASN1_OBJECT,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext_by_critical(
        x: *const X509_CRL,
        crit: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext(x: *const X509_CRL, loc: ::libc::c_int) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_CRL_delete_ext(x: *mut X509_CRL, loc: ::libc::c_int) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_CRL_add_ext(
        x: *mut X509_CRL,
        ex: *mut X509_EXTENSION,
        loc: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext_d2i(
        x: *const X509_CRL,
        nid: ::libc::c_int,
        crit: *mut ::libc::c_int,
        idx: *mut ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn X509_CRL_add1_ext_i2d(
        x: *mut X509_CRL,
        nid: ::libc::c_int,
        value: *mut ::libc::c_void,
        crit: ::libc::c_int,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext_count(x: *const X509_REVOKED) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext_by_NID(
        x: *const X509_REVOKED,
        nid: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext_by_OBJ(
        x: *const X509_REVOKED,
        obj: *const ASN1_OBJECT,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext_by_critical(
        x: *const X509_REVOKED,
        crit: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext(x: *const X509_REVOKED, loc: ::libc::c_int) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_REVOKED_delete_ext(x: *mut X509_REVOKED, loc: ::libc::c_int)
        -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_REVOKED_add_ext(
        x: *mut X509_REVOKED,
        ex: *mut X509_EXTENSION,
        loc: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext_d2i(
        x: *const X509_REVOKED,
        nid: ::libc::c_int,
        crit: *mut ::libc::c_int,
        idx: *mut ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn X509_REVOKED_add1_ext_i2d(
        x: *mut X509_REVOKED,
        nid: ::libc::c_int,
        value: *mut ::libc::c_void,
        crit: ::libc::c_int,
        flags: ::libc::c_ulong,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_EXTENSION_create_by_NID(
        ex: *mut *mut X509_EXTENSION,
        nid: ::libc::c_int,
        crit: ::libc::c_int,
        data: *mut ASN1_OCTET_STRING,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_EXTENSION_create_by_OBJ(
        ex: *mut *mut X509_EXTENSION,
        obj: *const ASN1_OBJECT,
        crit: ::libc::c_int,
        data: *mut ASN1_OCTET_STRING,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_EXTENSION_set_object(
        ex: *mut X509_EXTENSION,
        obj: *const ASN1_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_EXTENSION_set_critical(
        ex: *mut X509_EXTENSION,
        crit: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_EXTENSION_set_data(
        ex: *mut X509_EXTENSION,
        data: *mut ASN1_OCTET_STRING,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_EXTENSION_get_object(ex: *mut X509_EXTENSION) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn X509_EXTENSION_get_data(ne: *mut X509_EXTENSION) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn X509_EXTENSION_get_critical(ex: *const X509_EXTENSION) -> ::libc::c_int;
}
extern "C" {
    pub fn X509at_get_attr_count(x: *const stack_st_X509_ATTRIBUTE) -> ::libc::c_int;
}
extern "C" {
    pub fn X509at_get_attr_by_NID(
        x: *const stack_st_X509_ATTRIBUTE,
        nid: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509at_get_attr_by_OBJ(
        sk: *const stack_st_X509_ATTRIBUTE,
        obj: *const ASN1_OBJECT,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509at_get_attr(
        x: *const stack_st_X509_ATTRIBUTE,
        loc: ::libc::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_delete_attr(
        x: *mut stack_st_X509_ATTRIBUTE,
        loc: ::libc::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_add1_attr(
        x: *mut *mut stack_st_X509_ATTRIBUTE,
        attr: *mut X509_ATTRIBUTE,
    ) -> *mut stack_st_X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_add1_attr_by_OBJ(
        x: *mut *mut stack_st_X509_ATTRIBUTE,
        obj: *const ASN1_OBJECT,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> *mut stack_st_X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_add1_attr_by_NID(
        x: *mut *mut stack_st_X509_ATTRIBUTE,
        nid: ::libc::c_int,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> *mut stack_st_X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_add1_attr_by_txt(
        x: *mut *mut stack_st_X509_ATTRIBUTE,
        attrname: *const ::libc::c_char,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> *mut stack_st_X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_get0_data_by_OBJ(
        x: *const stack_st_X509_ATTRIBUTE,
        obj: *const ASN1_OBJECT,
        lastpos: ::libc::c_int,
        type_: ::libc::c_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn X509_ATTRIBUTE_create_by_NID(
        attr: *mut *mut X509_ATTRIBUTE,
        nid: ::libc::c_int,
        atrtype: ::libc::c_int,
        data: *const ::libc::c_void,
        len: ::libc::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_ATTRIBUTE_create_by_OBJ(
        attr: *mut *mut X509_ATTRIBUTE,
        obj: *const ASN1_OBJECT,
        atrtype: ::libc::c_int,
        data: *const ::libc::c_void,
        len: ::libc::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_ATTRIBUTE_create_by_txt(
        attr: *mut *mut X509_ATTRIBUTE,
        atrname: *const ::libc::c_char,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_ATTRIBUTE_set1_object(
        attr: *mut X509_ATTRIBUTE,
        obj: *const ASN1_OBJECT,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_ATTRIBUTE_set1_data(
        attr: *mut X509_ATTRIBUTE,
        attrtype: ::libc::c_int,
        data: *const ::libc::c_void,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_ATTRIBUTE_get0_data(
        attr: *mut X509_ATTRIBUTE,
        idx: ::libc::c_int,
        atrtype: ::libc::c_int,
        data: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn X509_ATTRIBUTE_count(attr: *const X509_ATTRIBUTE) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_ATTRIBUTE_get0_object(attr: *mut X509_ATTRIBUTE) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn X509_ATTRIBUTE_get0_type(
        attr: *mut X509_ATTRIBUTE,
        idx: ::libc::c_int,
    ) -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn EVP_PKEY_get_attr_count(key: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_attr_by_NID(
        key: *const EVP_PKEY,
        nid: ::libc::c_int,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_attr_by_OBJ(
        key: *const EVP_PKEY,
        obj: *const ASN1_OBJECT,
        lastpos: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_attr(key: *const EVP_PKEY, loc: ::libc::c_int) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn EVP_PKEY_delete_attr(key: *mut EVP_PKEY, loc: ::libc::c_int) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn EVP_PKEY_add1_attr(key: *mut EVP_PKEY, attr: *mut X509_ATTRIBUTE) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_add1_attr_by_OBJ(
        key: *mut EVP_PKEY,
        obj: *const ASN1_OBJECT,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_add1_attr_by_NID(
        key: *mut EVP_PKEY,
        nid: ::libc::c_int,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn EVP_PKEY_add1_attr_by_txt(
        key: *mut EVP_PKEY,
        attrname: *const ::libc::c_char,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_find_by_issuer_and_serial(
        sk: *mut stack_st_X509,
        name: *const X509_NAME,
        serial: *const ASN1_INTEGER,
    ) -> *mut X509;
}
extern "C" {
    pub fn X509_find_by_subject(sk: *mut stack_st_X509, name: *const X509_NAME) -> *mut X509;
}
extern "C" {
    pub fn PBEPARAM_new() -> *mut PBEPARAM;
}
extern "C" {
    pub fn PBEPARAM_free(a: *mut PBEPARAM);
}
extern "C" {
    pub fn d2i_PBEPARAM(
        a: *mut *mut PBEPARAM,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PBEPARAM;
}
extern "C" {
    pub fn i2d_PBEPARAM(a: *const PBEPARAM, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn PBEPARAM_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PBE2PARAM_new() -> *mut PBE2PARAM;
}
extern "C" {
    pub fn PBE2PARAM_free(a: *mut PBE2PARAM);
}
extern "C" {
    pub fn d2i_PBE2PARAM(
        a: *mut *mut PBE2PARAM,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PBE2PARAM;
}
extern "C" {
    pub fn i2d_PBE2PARAM(a: *const PBE2PARAM, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn PBE2PARAM_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PBKDF2PARAM_new() -> *mut PBKDF2PARAM;
}
extern "C" {
    pub fn PBKDF2PARAM_free(a: *mut PBKDF2PARAM);
}
extern "C" {
    pub fn d2i_PBKDF2PARAM(
        a: *mut *mut PBKDF2PARAM,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PBKDF2PARAM;
}
extern "C" {
    pub fn i2d_PBKDF2PARAM(a: *const PBKDF2PARAM, out: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
}
extern "C" {
    pub fn PBKDF2PARAM_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn SCRYPT_PARAMS_new() -> *mut SCRYPT_PARAMS;
}
extern "C" {
    pub fn SCRYPT_PARAMS_free(a: *mut SCRYPT_PARAMS);
}
extern "C" {
    pub fn d2i_SCRYPT_PARAMS(
        a: *mut *mut SCRYPT_PARAMS,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut SCRYPT_PARAMS;
}
extern "C" {
    pub fn i2d_SCRYPT_PARAMS(
        a: *const SCRYPT_PARAMS,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn SCRYPT_PARAMS_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn PKCS5_pbe_set0_algor(
        algor: *mut X509_ALGOR,
        alg: ::libc::c_int,
        iter: ::libc::c_int,
        salt: *const ::libc::c_uchar,
        saltlen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_pbe_set0_algor_ex(
        algor: *mut X509_ALGOR,
        alg: ::libc::c_int,
        iter: ::libc::c_int,
        salt: *const ::libc::c_uchar,
        saltlen: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS5_pbe_set(
        alg: ::libc::c_int,
        iter: ::libc::c_int,
        salt: *const ::libc::c_uchar,
        saltlen: ::libc::c_int,
    ) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn PKCS5_pbe_set_ex(
        alg: ::libc::c_int,
        iter: ::libc::c_int,
        salt: *const ::libc::c_uchar,
        saltlen: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
    ) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn PKCS5_pbe2_set(
        cipher: *const EVP_CIPHER,
        iter: ::libc::c_int,
        salt: *mut ::libc::c_uchar,
        saltlen: ::libc::c_int,
    ) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn PKCS5_pbe2_set_iv(
        cipher: *const EVP_CIPHER,
        iter: ::libc::c_int,
        salt: *mut ::libc::c_uchar,
        saltlen: ::libc::c_int,
        aiv: *mut ::libc::c_uchar,
        prf_nid: ::libc::c_int,
    ) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn PKCS5_pbe2_set_iv_ex(
        cipher: *const EVP_CIPHER,
        iter: ::libc::c_int,
        salt: *mut ::libc::c_uchar,
        saltlen: ::libc::c_int,
        aiv: *mut ::libc::c_uchar,
        prf_nid: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
    ) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn PKCS5_pbe2_set_scrypt(
        cipher: *const EVP_CIPHER,
        salt: *const ::libc::c_uchar,
        saltlen: ::libc::c_int,
        aiv: *mut ::libc::c_uchar,
        N: u64,
        r: u64,
        p: u64,
    ) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn PKCS5_pbkdf2_set(
        iter: ::libc::c_int,
        salt: *mut ::libc::c_uchar,
        saltlen: ::libc::c_int,
        prf_nid: ::libc::c_int,
        keylen: ::libc::c_int,
    ) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn PKCS5_pbkdf2_set_ex(
        iter: ::libc::c_int,
        salt: *mut ::libc::c_uchar,
        saltlen: ::libc::c_int,
        prf_nid: ::libc::c_int,
        keylen: ::libc::c_int,
        libctx: *mut OSSL_LIB_CTX,
    ) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn PKCS8_PRIV_KEY_INFO_new() -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn PKCS8_PRIV_KEY_INFO_free(a: *mut PKCS8_PRIV_KEY_INFO);
}
extern "C" {
    pub fn d2i_PKCS8_PRIV_KEY_INFO(
        a: *mut *mut PKCS8_PRIV_KEY_INFO,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn i2d_PKCS8_PRIV_KEY_INFO(
        a: *const PKCS8_PRIV_KEY_INFO,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS8_PRIV_KEY_INFO_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn EVP_PKCS82PKEY(p8: *const PKCS8_PRIV_KEY_INFO) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKCS82PKEY_ex(
        p8: *const PKCS8_PRIV_KEY_INFO,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY2PKCS8(pkey: *const EVP_PKEY) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn PKCS8_pkey_set0(
        priv_: *mut PKCS8_PRIV_KEY_INFO,
        aobj: *mut ASN1_OBJECT,
        version: ::libc::c_int,
        ptype: ::libc::c_int,
        pval: *mut ::libc::c_void,
        penc: *mut ::libc::c_uchar,
        penclen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS8_pkey_get0(
        ppkalg: *mut *const ASN1_OBJECT,
        pk: *mut *const ::libc::c_uchar,
        ppklen: *mut ::libc::c_int,
        pa: *mut *const X509_ALGOR,
        p8: *const PKCS8_PRIV_KEY_INFO,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS8_pkey_get0_attrs(p8: *const PKCS8_PRIV_KEY_INFO) -> *const stack_st_X509_ATTRIBUTE;
}
extern "C" {
    pub fn PKCS8_pkey_add1_attr(
        p8: *mut PKCS8_PRIV_KEY_INFO,
        attr: *mut X509_ATTRIBUTE,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS8_pkey_add1_attr_by_NID(
        p8: *mut PKCS8_PRIV_KEY_INFO,
        nid: ::libc::c_int,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PKCS8_pkey_add1_attr_by_OBJ(
        p8: *mut PKCS8_PRIV_KEY_INFO,
        obj: *const ASN1_OBJECT,
        type_: ::libc::c_int,
        bytes: *const ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_PUBKEY_set0_param(
        pub_: *mut X509_PUBKEY,
        aobj: *mut ASN1_OBJECT,
        ptype: ::libc::c_int,
        pval: *mut ::libc::c_void,
        penc: *mut ::libc::c_uchar,
        penclen: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_PUBKEY_get0_param(
        ppkalg: *mut *mut ASN1_OBJECT,
        pk: *mut *const ::libc::c_uchar,
        ppklen: *mut ::libc::c_int,
        pa: *mut *mut X509_ALGOR,
        pub_: *const X509_PUBKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn X509_PUBKEY_eq(a: *const X509_PUBKEY, b: *const X509_PUBKEY) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rand_meth_st {
    pub seed: ::std::option::Option<
        unsafe extern "C" fn(buf: *const ::libc::c_void, num: ::libc::c_int) -> ::libc::c_int,
    >,
    pub bytes: ::std::option::Option<
        unsafe extern "C" fn(buf: *mut ::libc::c_uchar, num: ::libc::c_int) -> ::libc::c_int,
    >,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn()>,
    pub add: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *const ::libc::c_void,
            num: ::libc::c_int,
            randomness: f64,
        ) -> ::libc::c_int,
    >,
    pub pseudorand: ::std::option::Option<
        unsafe extern "C" fn(buf: *mut ::libc::c_uchar, num: ::libc::c_int) -> ::libc::c_int,
    >,
    pub status: ::std::option::Option<unsafe extern "C" fn() -> ::libc::c_int>,
}
extern "C" {
    pub fn RAND_set_rand_method(meth: *const RAND_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_get_rand_method() -> *const RAND_METHOD;
}
extern "C" {
    pub fn RAND_set_rand_engine(engine: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_OpenSSL() -> *mut RAND_METHOD;
}
extern "C" {
    pub fn RAND_bytes(buf: *mut ::libc::c_uchar, num: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_priv_bytes(buf: *mut ::libc::c_uchar, num: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_priv_bytes_ex(
        ctx: *mut OSSL_LIB_CTX,
        buf: *mut ::libc::c_uchar,
        num: usize,
        strength: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_bytes_ex(
        ctx: *mut OSSL_LIB_CTX,
        buf: *mut ::libc::c_uchar,
        num: usize,
        strength: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_pseudo_bytes(buf: *mut ::libc::c_uchar, num: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_get0_primary(ctx: *mut OSSL_LIB_CTX) -> *mut EVP_RAND_CTX;
}
extern "C" {
    pub fn RAND_get0_public(ctx: *mut OSSL_LIB_CTX) -> *mut EVP_RAND_CTX;
}
extern "C" {
    pub fn RAND_get0_private(ctx: *mut OSSL_LIB_CTX) -> *mut EVP_RAND_CTX;
}
extern "C" {
    pub fn RAND_set_DRBG_type(
        ctx: *mut OSSL_LIB_CTX,
        drbg: *const ::libc::c_char,
        propq: *const ::libc::c_char,
        cipher: *const ::libc::c_char,
        digest: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_set_seed_source_type(
        ctx: *mut OSSL_LIB_CTX,
        seed: *const ::libc::c_char,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_seed(buf: *const ::libc::c_void, num: ::libc::c_int);
}
extern "C" {
    pub fn RAND_keep_random_devices_open(keep: ::libc::c_int);
}
extern "C" {
    pub fn RAND_add(buf: *const ::libc::c_void, num: ::libc::c_int, randomness: f64);
}
extern "C" {
    pub fn RAND_load_file(file: *const ::libc::c_char, max_bytes: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_write_file(file: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_file_name(file: *mut ::libc::c_char, num: usize) -> *const ::libc::c_char;
}
extern "C" {
    pub fn RAND_status() -> ::libc::c_int;
}
extern "C" {
    pub fn RAND_poll() -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_get_EVP_CIPHER_INFO(
        header: *mut ::libc::c_char,
        cipher: *mut EVP_CIPHER_INFO,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_do_header(
        cipher: *mut EVP_CIPHER_INFO,
        data: *mut ::libc::c_uchar,
        len: *mut ::libc::c_long,
        callback: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio(
        bp: *mut BIO,
        name: *mut *mut ::libc::c_char,
        header: *mut *mut ::libc::c_char,
        data: *mut *mut ::libc::c_uchar,
        len: *mut ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_ex(
        bp: *mut BIO,
        name: *mut *mut ::libc::c_char,
        header: *mut *mut ::libc::c_char,
        data: *mut *mut ::libc::c_uchar,
        len: *mut ::libc::c_long,
        flags: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_bytes_read_bio_secmem(
        pdata: *mut *mut ::libc::c_uchar,
        plen: *mut ::libc::c_long,
        pnm: *mut *mut ::libc::c_char,
        name: *const ::libc::c_char,
        bp: *mut BIO,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_bio(
        bp: *mut BIO,
        name: *const ::libc::c_char,
        hdr: *const ::libc::c_char,
        data: *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_bytes_read_bio(
        pdata: *mut *mut ::libc::c_uchar,
        plen: *mut ::libc::c_long,
        pnm: *mut *mut ::libc::c_char,
        name: *const ::libc::c_char,
        bp: *mut BIO,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_ASN1_read_bio(
        d2i: d2i_of_void,
        name: *const ::libc::c_char,
        bp: *mut BIO,
        x: *mut *mut ::libc::c_void,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn PEM_ASN1_write_bio(
        i2d: i2d_of_void,
        name: *const ::libc::c_char,
        bp: *mut BIO,
        x: *const ::libc::c_void,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_X509_INFO_read_bio(
        bp: *mut BIO,
        sk: *mut stack_st_X509_INFO,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut stack_st_X509_INFO;
}
extern "C" {
    pub fn PEM_X509_INFO_read_bio_ex(
        bp: *mut BIO,
        sk: *mut stack_st_X509_INFO,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut stack_st_X509_INFO;
}
extern "C" {
    pub fn PEM_X509_INFO_write_bio(
        bp: *mut BIO,
        xi: *const X509_INFO,
        enc: *mut EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cd: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read(
        fp: *mut FILE,
        name: *mut *mut ::libc::c_char,
        header: *mut *mut ::libc::c_char,
        data: *mut *mut ::libc::c_uchar,
        len: *mut ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write(
        fp: *mut FILE,
        name: *const ::libc::c_char,
        hdr: *const ::libc::c_char,
        data: *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_ASN1_read(
        d2i: d2i_of_void,
        name: *const ::libc::c_char,
        fp: *mut FILE,
        x: *mut *mut ::libc::c_void,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn PEM_ASN1_write(
        i2d: i2d_of_void,
        name: *const ::libc::c_char,
        fp: *mut FILE,
        x: *const ::libc::c_void,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        callback: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_X509_INFO_read(
        fp: *mut FILE,
        sk: *mut stack_st_X509_INFO,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut stack_st_X509_INFO;
}
extern "C" {
    pub fn PEM_X509_INFO_read_ex(
        fp: *mut FILE,
        sk: *mut stack_st_X509_INFO,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut stack_st_X509_INFO;
}
extern "C" {
    pub fn PEM_SignInit(ctx: *mut EVP_MD_CTX, type_: *mut EVP_MD) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_SignUpdate(
        ctx: *mut EVP_MD_CTX,
        d: *const ::libc::c_uchar,
        cnt: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_SignFinal(
        ctx: *mut EVP_MD_CTX,
        sigret: *mut ::libc::c_uchar,
        siglen: *mut ::libc::c_uint,
        pkey: *mut EVP_PKEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_def_callback(
        buf: *mut ::libc::c_char,
        num: ::libc::c_int,
        rwflag: ::libc::c_int,
        userdata: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_proc_type(buf: *mut ::libc::c_char, type_: ::libc::c_int);
}
extern "C" {
    pub fn PEM_dek_info(
        buf: *mut ::libc::c_char,
        type_: *const ::libc::c_char,
        len: ::libc::c_int,
        str_: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn PEM_read_bio_X509(
        out: *mut BIO,
        x: *mut *mut X509,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509;
}
extern "C" {
    pub fn PEM_read_X509(
        out: *mut FILE,
        x: *mut *mut X509,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509;
}
extern "C" {
    pub fn PEM_write_bio_X509(out: *mut BIO, x: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_X509(out: *mut FILE, x: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_X509_AUX(
        out: *mut BIO,
        x: *mut *mut X509,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509;
}
extern "C" {
    pub fn PEM_read_X509_AUX(
        out: *mut FILE,
        x: *mut *mut X509,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509;
}
extern "C" {
    pub fn PEM_write_bio_X509_AUX(out: *mut BIO, x: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_X509_AUX(out: *mut FILE, x: *const X509) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_X509_REQ(
        out: *mut BIO,
        x: *mut *mut X509_REQ,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509_REQ;
}
extern "C" {
    pub fn PEM_read_X509_REQ(
        out: *mut FILE,
        x: *mut *mut X509_REQ,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509_REQ;
}
extern "C" {
    pub fn PEM_write_bio_X509_REQ(out: *mut BIO, x: *const X509_REQ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_X509_REQ(out: *mut FILE, x: *const X509_REQ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_bio_X509_REQ_NEW(out: *mut BIO, x: *const X509_REQ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_X509_REQ_NEW(out: *mut FILE, x: *const X509_REQ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_X509_CRL(
        out: *mut BIO,
        x: *mut *mut X509_CRL,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509_CRL;
}
extern "C" {
    pub fn PEM_read_X509_CRL(
        out: *mut FILE,
        x: *mut *mut X509_CRL,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509_CRL;
}
extern "C" {
    pub fn PEM_write_bio_X509_CRL(out: *mut BIO, x: *const X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_X509_CRL(out: *mut FILE, x: *const X509_CRL) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_X509_PUBKEY(
        out: *mut BIO,
        x: *mut *mut X509_PUBKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn PEM_read_X509_PUBKEY(
        out: *mut FILE,
        x: *mut *mut X509_PUBKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn PEM_write_bio_X509_PUBKEY(out: *mut BIO, x: *const X509_PUBKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_X509_PUBKEY(out: *mut FILE, x: *const X509_PUBKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_PKCS7(
        out: *mut BIO,
        x: *mut *mut PKCS7,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut PKCS7;
}
extern "C" {
    pub fn PEM_read_PKCS7(
        out: *mut FILE,
        x: *mut *mut PKCS7,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut PKCS7;
}
extern "C" {
    pub fn PEM_write_bio_PKCS7(out: *mut BIO, x: *const PKCS7) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_PKCS7(out: *mut FILE, x: *const PKCS7) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_NETSCAPE_CERT_SEQUENCE(
        out: *mut BIO,
        x: *mut *mut NETSCAPE_CERT_SEQUENCE,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut NETSCAPE_CERT_SEQUENCE;
}
extern "C" {
    pub fn PEM_read_NETSCAPE_CERT_SEQUENCE(
        out: *mut FILE,
        x: *mut *mut NETSCAPE_CERT_SEQUENCE,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut NETSCAPE_CERT_SEQUENCE;
}
extern "C" {
    pub fn PEM_write_bio_NETSCAPE_CERT_SEQUENCE(
        out: *mut BIO,
        x: *const NETSCAPE_CERT_SEQUENCE,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_NETSCAPE_CERT_SEQUENCE(
        out: *mut FILE,
        x: *const NETSCAPE_CERT_SEQUENCE,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_PKCS8(
        out: *mut BIO,
        x: *mut *mut X509_SIG,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509_SIG;
}
extern "C" {
    pub fn PEM_read_PKCS8(
        out: *mut FILE,
        x: *mut *mut X509_SIG,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut X509_SIG;
}
extern "C" {
    pub fn PEM_write_bio_PKCS8(out: *mut BIO, x: *const X509_SIG) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_PKCS8(out: *mut FILE, x: *const X509_SIG) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_PKCS8_PRIV_KEY_INFO(
        out: *mut BIO,
        x: *mut *mut PKCS8_PRIV_KEY_INFO,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn PEM_read_PKCS8_PRIV_KEY_INFO(
        out: *mut FILE,
        x: *mut *mut PKCS8_PRIV_KEY_INFO,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn PEM_write_bio_PKCS8_PRIV_KEY_INFO(
        out: *mut BIO,
        x: *const PKCS8_PRIV_KEY_INFO,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_PKCS8_PRIV_KEY_INFO(
        out: *mut FILE,
        x: *const PKCS8_PRIV_KEY_INFO,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_RSAPrivateKey(
        out: *mut BIO,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_read_RSAPrivateKey(
        out: *mut FILE,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_write_bio_RSAPrivateKey(
        out: *mut BIO,
        x: *const RSA,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_RSAPrivateKey(
        out: *mut FILE,
        x: *const RSA,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_RSAPublicKey(
        out: *mut BIO,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_read_RSAPublicKey(
        out: *mut FILE,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_write_bio_RSAPublicKey(out: *mut BIO, x: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_RSAPublicKey(out: *mut FILE, x: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_RSA_PUBKEY(
        out: *mut BIO,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_read_RSA_PUBKEY(
        out: *mut FILE,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_write_bio_RSA_PUBKEY(out: *mut BIO, x: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_RSA_PUBKEY(out: *mut FILE, x: *const RSA) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_DSAPrivateKey(
        out: *mut BIO,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_read_DSAPrivateKey(
        out: *mut FILE,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_write_bio_DSAPrivateKey(
        out: *mut BIO,
        x: *const DSA,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_DSAPrivateKey(
        out: *mut FILE,
        x: *const DSA,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_DSA_PUBKEY(
        out: *mut BIO,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_read_DSA_PUBKEY(
        out: *mut FILE,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_write_bio_DSA_PUBKEY(out: *mut BIO, x: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_DSA_PUBKEY(out: *mut FILE, x: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_DSAparams(
        out: *mut BIO,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_read_DSAparams(
        out: *mut FILE,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_write_bio_DSAparams(out: *mut BIO, x: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_DSAparams(out: *mut FILE, x: *const DSA) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_ECPKParameters(
        out: *mut BIO,
        x: *mut *mut EC_GROUP,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EC_GROUP;
}
extern "C" {
    pub fn PEM_read_ECPKParameters(
        out: *mut FILE,
        x: *mut *mut EC_GROUP,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EC_GROUP;
}
extern "C" {
    pub fn PEM_write_bio_ECPKParameters(out: *mut BIO, x: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_ECPKParameters(out: *mut FILE, x: *const EC_GROUP) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_ECPrivateKey(
        out: *mut BIO,
        x: *mut *mut EC_KEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn PEM_read_ECPrivateKey(
        out: *mut FILE,
        x: *mut *mut EC_KEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn PEM_write_bio_ECPrivateKey(
        out: *mut BIO,
        x: *const EC_KEY,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_ECPrivateKey(
        out: *mut FILE,
        x: *const EC_KEY,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_EC_PUBKEY(
        out: *mut BIO,
        x: *mut *mut EC_KEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn PEM_read_EC_PUBKEY(
        out: *mut FILE,
        x: *mut *mut EC_KEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn PEM_write_bio_EC_PUBKEY(out: *mut BIO, x: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_EC_PUBKEY(out: *mut FILE, x: *const EC_KEY) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_DHparams(
        out: *mut BIO,
        x: *mut *mut DH,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut DH;
}
extern "C" {
    pub fn PEM_read_DHparams(
        out: *mut FILE,
        x: *mut *mut DH,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut DH;
}
extern "C" {
    pub fn PEM_write_bio_DHparams(out: *mut BIO, x: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_DHparams(out: *mut FILE, x: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_bio_DHxparams(out: *mut BIO, x: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_DHxparams(out: *mut FILE, x: *const DH) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_PrivateKey(
        out: *mut BIO,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_read_bio_PrivateKey_ex(
        out: *mut BIO,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_read_PrivateKey(
        out: *mut FILE,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_read_PrivateKey_ex(
        out: *mut FILE,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_write_bio_PrivateKey(
        out: *mut BIO,
        x: *const EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_bio_PrivateKey_ex(
        out: *mut BIO,
        x: *const EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_PrivateKey(
        out: *mut FILE,
        x: *const EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_PrivateKey_ex(
        out: *mut FILE,
        x: *const EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_PUBKEY(
        out: *mut BIO,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_read_bio_PUBKEY_ex(
        out: *mut BIO,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_read_PUBKEY(
        out: *mut FILE,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_read_PUBKEY_ex(
        out: *mut FILE,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_write_bio_PUBKEY(out: *mut BIO, x: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_bio_PUBKEY_ex(
        out: *mut BIO,
        x: *const EVP_PKEY,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_PUBKEY(out: *mut FILE, x: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_PUBKEY_ex(
        out: *mut FILE,
        x: *const EVP_PKEY,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_bio_PrivateKey_traditional(
        bp: *mut BIO,
        x: *const EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_uchar,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_bio_PKCS8PrivateKey_nid(
        bp: *mut BIO,
        x: *const EVP_PKEY,
        nid: ::libc::c_int,
        kstr: *const ::libc::c_char,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_bio_PKCS8PrivateKey(
        arg1: *mut BIO,
        arg2: *const EVP_PKEY,
        arg3: *const EVP_CIPHER,
        kstr: *const ::libc::c_char,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKey_bio(
        bp: *mut BIO,
        x: *const EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_char,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKey_nid_bio(
        bp: *mut BIO,
        x: *const EVP_PKEY,
        nid: ::libc::c_int,
        kstr: *const ::libc::c_char,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PKCS8PrivateKey_bio(
        bp: *mut BIO,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKey_fp(
        fp: *mut FILE,
        x: *const EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_char,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKey_nid_fp(
        fp: *mut FILE,
        x: *const EVP_PKEY,
        nid: ::libc::c_int,
        kstr: *const ::libc::c_char,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_write_PKCS8PrivateKey_nid(
        fp: *mut FILE,
        x: *const EVP_PKEY,
        nid: ::libc::c_int,
        kstr: *const ::libc::c_char,
        klen: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn d2i_PKCS8PrivateKey_fp(
        fp: *mut FILE,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_write_PKCS8PrivateKey(
        fp: *mut FILE,
        x: *const EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *const ::libc::c_char,
        klen: ::libc::c_int,
        cd: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PEM_read_bio_Parameters_ex(
        bp: *mut BIO,
        x: *mut *mut EVP_PKEY,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_read_bio_Parameters(bp: *mut BIO, x: *mut *mut EVP_PKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_write_bio_Parameters(bp: *mut BIO, x: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn b2i_PrivateKey(
        in_: *mut *const ::libc::c_uchar,
        length: ::libc::c_long,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn b2i_PublicKey(in_: *mut *const ::libc::c_uchar, length: ::libc::c_long)
        -> *mut EVP_PKEY;
}
extern "C" {
    pub fn b2i_PrivateKey_bio(in_: *mut BIO) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn b2i_PublicKey_bio(in_: *mut BIO) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2b_PrivateKey_bio(out: *mut BIO, pk: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn i2b_PublicKey_bio(out: *mut BIO, pk: *const EVP_PKEY) -> ::libc::c_int;
}
extern "C" {
    pub fn b2i_PVK_bio(in_: *mut BIO, cb: pem_password_cb, u: *mut ::libc::c_void)
        -> *mut EVP_PKEY;
}
extern "C" {
    pub fn b2i_PVK_bio_ex(
        in_: *mut BIO,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2b_PVK_bio(
        out: *mut BIO,
        pk: *const EVP_PKEY,
        enclevel: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn i2b_PVK_bio_ex(
        out: *mut BIO,
        pk: *const EVP_PKEY,
        enclevel: ::libc::c_int,
        cb: pem_password_cb,
        u: *mut ::libc::c_void,
        libctx: *mut OSSL_LIB_CTX,
        propq: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_new() -> *mut UI;
}
extern "C" {
    pub fn UI_new_method(method: *const UI_METHOD) -> *mut UI;
}
extern "C" {
    pub fn UI_free(ui: *mut UI);
}
extern "C" {
    pub fn UI_add_input_string(
        ui: *mut UI,
        prompt: *const ::libc::c_char,
        flags: ::libc::c_int,
        result_buf: *mut ::libc::c_char,
        minsize: ::libc::c_int,
        maxsize: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_dup_input_string(
        ui: *mut UI,
        prompt: *const ::libc::c_char,
        flags: ::libc::c_int,
        result_buf: *mut ::libc::c_char,
        minsize: ::libc::c_int,
        maxsize: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_add_verify_string(
        ui: *mut UI,
        prompt: *const ::libc::c_char,
        flags: ::libc::c_int,
        result_buf: *mut ::libc::c_char,
        minsize: ::libc::c_int,
        maxsize: ::libc::c_int,
        test_buf: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_dup_verify_string(
        ui: *mut UI,
        prompt: *const ::libc::c_char,
        flags: ::libc::c_int,
        result_buf: *mut ::libc::c_char,
        minsize: ::libc::c_int,
        maxsize: ::libc::c_int,
        test_buf: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_add_input_boolean(
        ui: *mut UI,
        prompt: *const ::libc::c_char,
        action_desc: *const ::libc::c_char,
        ok_chars: *const ::libc::c_char,
        cancel_chars: *const ::libc::c_char,
        flags: ::libc::c_int,
        result_buf: *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_dup_input_boolean(
        ui: *mut UI,
        prompt: *const ::libc::c_char,
        action_desc: *const ::libc::c_char,
        ok_chars: *const ::libc::c_char,
        cancel_chars: *const ::libc::c_char,
        flags: ::libc::c_int,
        result_buf: *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_add_info_string(ui: *mut UI, text: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_dup_info_string(ui: *mut UI, text: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_add_error_string(ui: *mut UI, text: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_dup_error_string(ui: *mut UI, text: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_construct_prompt(
        ui_method: *mut UI,
        phrase_desc: *const ::libc::c_char,
        object_name: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn UI_add_user_data(ui: *mut UI, user_data: *mut ::libc::c_void) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn UI_dup_user_data(ui: *mut UI, user_data: *mut ::libc::c_void) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_get0_user_data(ui: *mut UI) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn UI_get0_result(ui: *mut UI, i: ::libc::c_int) -> *const ::libc::c_char;
}
extern "C" {
    pub fn UI_get_result_length(ui: *mut UI, i: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_process(ui: *mut UI) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_ctrl(
        ui: *mut UI,
        cmd: ::libc::c_int,
        i: ::libc::c_long,
        p: *mut ::libc::c_void,
        f: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_set_ex_data(
        r: *mut UI,
        idx: ::libc::c_int,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_get_ex_data(r: *const UI, idx: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn UI_set_default_method(meth: *const UI_METHOD);
}
extern "C" {
    pub fn UI_get_default_method() -> *const UI_METHOD;
}
extern "C" {
    pub fn UI_get_method(ui: *mut UI) -> *const UI_METHOD;
}
extern "C" {
    pub fn UI_set_method(ui: *mut UI, meth: *const UI_METHOD) -> *const UI_METHOD;
}
extern "C" {
    pub fn UI_OpenSSL() -> *mut UI_METHOD;
}
extern "C" {
    pub fn UI_null() -> *const UI_METHOD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_string_st {
    _unused: [u8; 0],
}
pub type UI_STRING = ui_string_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_UI_STRING {
    _unused: [u8; 0],
}
pub type sk_UI_STRING_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const *const UI_STRING, b: *const *const UI_STRING) -> ::libc::c_int,
>;
pub type sk_UI_STRING_freefunc = ::std::option::Option<unsafe extern "C" fn(a: *mut UI_STRING)>;
pub type sk_UI_STRING_copyfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const UI_STRING) -> *mut UI_STRING>;
pub const UI_string_types_UIT_NONE: UI_string_types = 0;
pub const UI_string_types_UIT_PROMPT: UI_string_types = 1;
pub const UI_string_types_UIT_VERIFY: UI_string_types = 2;
pub const UI_string_types_UIT_BOOLEAN: UI_string_types = 3;
pub const UI_string_types_UIT_INFO: UI_string_types = 4;
pub const UI_string_types_UIT_ERROR: UI_string_types = 5;
pub type UI_string_types = ::libc::c_int;
extern "C" {
    pub fn UI_create_method(name: *const ::libc::c_char) -> *mut UI_METHOD;
}
extern "C" {
    pub fn UI_destroy_method(ui_method: *mut UI_METHOD);
}
extern "C" {
    pub fn UI_method_set_opener(
        method: *mut UI_METHOD,
        opener: ::std::option::Option<unsafe extern "C" fn(ui: *mut UI) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_method_set_writer(
        method: *mut UI_METHOD,
        writer: ::std::option::Option<
            unsafe extern "C" fn(ui: *mut UI, uis: *mut UI_STRING) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_method_set_flusher(
        method: *mut UI_METHOD,
        flusher: ::std::option::Option<unsafe extern "C" fn(ui: *mut UI) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_method_set_reader(
        method: *mut UI_METHOD,
        reader: ::std::option::Option<
            unsafe extern "C" fn(ui: *mut UI, uis: *mut UI_STRING) -> ::libc::c_int,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_method_set_closer(
        method: *mut UI_METHOD,
        closer: ::std::option::Option<unsafe extern "C" fn(ui: *mut UI) -> ::libc::c_int>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_method_set_data_duplicator(
        method: *mut UI_METHOD,
        duplicator: ::std::option::Option<
            unsafe extern "C" fn(ui: *mut UI, ui_data: *mut ::libc::c_void) -> *mut ::libc::c_void,
        >,
        destructor: ::std::option::Option<
            unsafe extern "C" fn(ui: *mut UI, ui_data: *mut ::libc::c_void),
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_method_set_prompt_constructor(
        method: *mut UI_METHOD,
        prompt_constructor: ::std::option::Option<
            unsafe extern "C" fn(
                ui: *mut UI,
                phrase_desc: *const ::libc::c_char,
                object_name: *const ::libc::c_char,
            ) -> *mut ::libc::c_char,
        >,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_method_set_ex_data(
        method: *mut UI_METHOD,
        idx: ::libc::c_int,
        data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_method_get_opener(
        method: *const UI_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(method: *mut UI) -> ::libc::c_int>;
}
extern "C" {
    pub fn UI_method_get_writer(
        method: *const UI_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(method: *mut UI, arg1: *mut UI_STRING) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn UI_method_get_flusher(
        method: *const UI_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(method: *mut UI) -> ::libc::c_int>;
}
extern "C" {
    pub fn UI_method_get_reader(
        method: *const UI_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(method: *mut UI, arg1: *mut UI_STRING) -> ::libc::c_int,
    >;
}
extern "C" {
    pub fn UI_method_get_closer(
        method: *const UI_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(method: *mut UI) -> ::libc::c_int>;
}
extern "C" {
    pub fn UI_method_get_prompt_constructor(
        method: *const UI_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            method: *mut UI,
            arg1: *const ::libc::c_char,
            arg2: *const ::libc::c_char,
        ) -> *mut ::libc::c_char,
    >;
}
extern "C" {
    pub fn UI_method_get_data_duplicator(
        method: *const UI_METHOD,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(method: *mut UI, arg1: *mut ::libc::c_void) -> *mut ::libc::c_void,
    >;
}
extern "C" {
    pub fn UI_method_get_data_destructor(
        method: *const UI_METHOD,
    ) -> ::std::option::Option<unsafe extern "C" fn(method: *mut UI, arg1: *mut ::libc::c_void)>;
}
extern "C" {
    pub fn UI_method_get_ex_data(
        method: *const UI_METHOD,
        idx: ::libc::c_int,
    ) -> *const ::libc::c_void;
}
extern "C" {
    pub fn UI_get_string_type(uis: *mut UI_STRING) -> UI_string_types;
}
extern "C" {
    pub fn UI_get_input_flags(uis: *mut UI_STRING) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_get0_output_string(uis: *mut UI_STRING) -> *const ::libc::c_char;
}
extern "C" {
    pub fn UI_get0_action_string(uis: *mut UI_STRING) -> *const ::libc::c_char;
}
extern "C" {
    pub fn UI_get0_result_string(uis: *mut UI_STRING) -> *const ::libc::c_char;
}
extern "C" {
    pub fn UI_get_result_string_length(uis: *mut UI_STRING) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_get0_test_string(uis: *mut UI_STRING) -> *const ::libc::c_char;
}
extern "C" {
    pub fn UI_get_result_minsize(uis: *mut UI_STRING) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_get_result_maxsize(uis: *mut UI_STRING) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_set_result(
        ui: *mut UI,
        uis: *mut UI_STRING,
        result: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_set_result_ex(
        ui: *mut UI,
        uis: *mut UI_STRING,
        result: *const ::libc::c_char,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_UTIL_read_pw_string(
        buf: *mut ::libc::c_char,
        length: ::libc::c_int,
        prompt: *const ::libc::c_char,
        verify: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_UTIL_read_pw(
        buf: *mut ::libc::c_char,
        buff: *mut ::libc::c_char,
        size: ::libc::c_int,
        prompt: *const ::libc::c_char,
        verify: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn UI_UTIL_wrap_read_pem_callback(
        cb: pem_password_cb,
        rwflag: ::libc::c_int,
    ) -> *mut UI_METHOD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct err_state_st {
    pub err_flags: [::libc::c_int; 16usize],
    pub err_marks: [::libc::c_int; 16usize],
    pub err_buffer: [::libc::c_ulong; 16usize],
    pub err_data: [*mut ::libc::c_char; 16usize],
    pub err_data_size: [usize; 16usize],
    pub err_data_flags: [::libc::c_int; 16usize],
    pub err_file: [*mut ::libc::c_char; 16usize],
    pub err_line: [::libc::c_int; 16usize],
    pub err_func: [*mut ::libc::c_char; 16usize],
    pub top: ::libc::c_int,
    pub bottom: ::libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ERR_string_data_st {
    pub error: ::libc::c_ulong,
    pub string: *const ::libc::c_char,
}
pub type ERR_STRING_DATA = ERR_string_data_st;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lhash_st_ERR_STRING_DATA {
    pub dummy: lhash_st_ERR_STRING_DATA_lh_ERR_STRING_DATA_dummy,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lhash_st_ERR_STRING_DATA_lh_ERR_STRING_DATA_dummy {
    pub d1: *mut ::libc::c_void,
    pub d2: ::libc::c_ulong,
    pub d3: ::libc::c_int,
}
pub type lh_ERR_STRING_DATA_compfunc = ::std::option::Option<
    unsafe extern "C" fn(a: *const ERR_STRING_DATA, b: *const ERR_STRING_DATA) -> ::libc::c_int,
>;
pub type lh_ERR_STRING_DATA_hashfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *const ERR_STRING_DATA) -> ::libc::c_ulong>;
pub type lh_ERR_STRING_DATA_doallfunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut ERR_STRING_DATA)>;
extern "C" {
    pub fn ERR_new();
}
extern "C" {
    pub fn ERR_set_debug(
        file: *const ::libc::c_char,
        line: ::libc::c_int,
        func: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn ERR_set_error(
        lib: ::libc::c_int,
        reason: ::libc::c_int,
        fmt: *const ::libc::c_char,
        ...
    );
}
extern "C" {
    pub fn ERR_vset_error(
        lib: ::libc::c_int,
        reason: ::libc::c_int,
        fmt: *const ::libc::c_char,
        args: va_list,
    );
}
extern "C" {
    pub fn ERR_set_error_data(data: *mut ::libc::c_char, flags: ::libc::c_int);
}
extern "C" {
    pub fn ERR_get_error() -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_get_error_all(
        file: *mut *const ::libc::c_char,
        line: *mut ::libc::c_int,
        func: *mut *const ::libc::c_char,
        data: *mut *const ::libc::c_char,
        flags: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_get_error_line(
        file: *mut *const ::libc::c_char,
        line: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_get_error_line_data(
        file: *mut *const ::libc::c_char,
        line: *mut ::libc::c_int,
        data: *mut *const ::libc::c_char,
        flags: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_error() -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_error_line(
        file: *mut *const ::libc::c_char,
        line: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_error_func(func: *mut *const ::libc::c_char) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_error_data(
        data: *mut *const ::libc::c_char,
        flags: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_error_all(
        file: *mut *const ::libc::c_char,
        line: *mut ::libc::c_int,
        func: *mut *const ::libc::c_char,
        data: *mut *const ::libc::c_char,
        flags: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_error_line_data(
        file: *mut *const ::libc::c_char,
        line: *mut ::libc::c_int,
        data: *mut *const ::libc::c_char,
        flags: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_last_error() -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_last_error_line(
        file: *mut *const ::libc::c_char,
        line: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_last_error_func(func: *mut *const ::libc::c_char) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_last_error_data(
        data: *mut *const ::libc::c_char,
        flags: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_last_error_all(
        file: *mut *const ::libc::c_char,
        line: *mut ::libc::c_int,
        func: *mut *const ::libc::c_char,
        data: *mut *const ::libc::c_char,
        flags: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_peek_last_error_line_data(
        file: *mut *const ::libc::c_char,
        line: *mut ::libc::c_int,
        data: *mut *const ::libc::c_char,
        flags: *mut ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn ERR_clear_error();
}
extern "C" {
    pub fn ERR_error_string(e: ::libc::c_ulong, buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ERR_error_string_n(e: ::libc::c_ulong, buf: *mut ::libc::c_char, len: usize);
}
extern "C" {
    pub fn ERR_lib_error_string(e: ::libc::c_ulong) -> *const ::libc::c_char;
}
extern "C" {
    pub fn ERR_func_error_string(e: ::libc::c_ulong) -> *const ::libc::c_char;
}
extern "C" {
    pub fn ERR_reason_error_string(e: ::libc::c_ulong) -> *const ::libc::c_char;
}
extern "C" {
    pub fn ERR_print_errors_cb(
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                str_: *const ::libc::c_char,
                len: usize,
                u: *mut ::libc::c_void,
            ) -> ::libc::c_int,
        >,
        u: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn ERR_print_errors_fp(fp: *mut FILE);
}
extern "C" {
    pub fn ERR_print_errors(bp: *mut BIO);
}
extern "C" {
    pub fn ERR_add_error_data(num: ::libc::c_int, ...);
}
extern "C" {
    pub fn ERR_add_error_vdata(num: ::libc::c_int, args: va_list);
}
extern "C" {
    pub fn ERR_add_error_txt(sepr: *const ::libc::c_char, txt: *const ::libc::c_char);
}
extern "C" {
    pub fn ERR_add_error_mem_bio(sep: *const ::libc::c_char, bio: *mut BIO);
}
extern "C" {
    pub fn ERR_load_strings(lib: ::libc::c_int, str_: *mut ERR_STRING_DATA) -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_load_strings_const(str_: *const ERR_STRING_DATA) -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_unload_strings(lib: ::libc::c_int, str_: *mut ERR_STRING_DATA) -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_remove_thread_state(arg1: *mut ::libc::c_void);
}
extern "C" {
    pub fn ERR_remove_state(pid: ::libc::c_ulong);
}
extern "C" {
    pub fn ERR_get_state() -> *mut ERR_STATE;
}
extern "C" {
    pub fn ERR_get_next_error_library() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_set_mark() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_pop_to_mark() -> ::libc::c_int;
}
extern "C" {
    pub fn ERR_clear_last_mark() -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENGINE_CMD_DEFN_st {
    pub cmd_num: ::libc::c_uint,
    pub cmd_name: *const ::libc::c_char,
    pub cmd_desc: *const ::libc::c_char,
    pub cmd_flags: ::libc::c_uint,
}
pub type ENGINE_CMD_DEFN = ENGINE_CMD_DEFN_st;
pub type ENGINE_GEN_FUNC_PTR = ::std::option::Option<unsafe extern "C" fn() -> ::libc::c_int>;
pub type ENGINE_GEN_INT_FUNC_PTR =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ENGINE) -> ::libc::c_int>;
pub type ENGINE_CTRL_FUNC_PTR = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ENGINE,
        arg2: ::libc::c_int,
        arg3: ::libc::c_long,
        arg4: *mut ::libc::c_void,
        f: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::libc::c_int,
>;
pub type ENGINE_LOAD_KEY_PTR = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ENGINE,
        arg2: *const ::libc::c_char,
        ui_method: *mut UI_METHOD,
        callback_data: *mut ::libc::c_void,
    ) -> *mut EVP_PKEY,
>;
pub type ENGINE_SSL_CLIENT_CERT_PTR = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ENGINE,
        ssl: *mut SSL,
        ca_dn: *mut stack_st_X509_NAME,
        pcert: *mut *mut X509,
        pkey: *mut *mut EVP_PKEY,
        pother: *mut *mut stack_st_X509,
        ui_method: *mut UI_METHOD,
        callback_data: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type ENGINE_CIPHERS_PTR = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ENGINE,
        arg2: *mut *const EVP_CIPHER,
        arg3: *mut *const ::libc::c_int,
        arg4: ::libc::c_int,
    ) -> ::libc::c_int,
>;
pub type ENGINE_DIGESTS_PTR = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ENGINE,
        arg2: *mut *const EVP_MD,
        arg3: *mut *const ::libc::c_int,
        arg4: ::libc::c_int,
    ) -> ::libc::c_int,
>;
pub type ENGINE_PKEY_METHS_PTR = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ENGINE,
        arg2: *mut *mut EVP_PKEY_METHOD,
        arg3: *mut *const ::libc::c_int,
        arg4: ::libc::c_int,
    ) -> ::libc::c_int,
>;
pub type ENGINE_PKEY_ASN1_METHS_PTR = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ENGINE,
        arg2: *mut *mut EVP_PKEY_ASN1_METHOD,
        arg3: *mut *const ::libc::c_int,
        arg4: ::libc::c_int,
    ) -> ::libc::c_int,
>;
extern "C" {
    pub fn ENGINE_get_first() -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_last() -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_next(e: *mut ENGINE) -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_prev(e: *mut ENGINE) -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_add(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_remove(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_by_id(id: *const ::libc::c_char) -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_load_builtin_engines();
}
extern "C" {
    pub fn ENGINE_get_table_flags() -> ::libc::c_uint;
}
extern "C" {
    pub fn ENGINE_set_table_flags(flags: ::libc::c_uint);
}
extern "C" {
    pub fn ENGINE_register_RSA(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_unregister_RSA(e: *mut ENGINE);
}
extern "C" {
    pub fn ENGINE_register_all_RSA();
}
extern "C" {
    pub fn ENGINE_register_DSA(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_unregister_DSA(e: *mut ENGINE);
}
extern "C" {
    pub fn ENGINE_register_all_DSA();
}
extern "C" {
    pub fn ENGINE_register_EC(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_unregister_EC(e: *mut ENGINE);
}
extern "C" {
    pub fn ENGINE_register_all_EC();
}
extern "C" {
    pub fn ENGINE_register_DH(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_unregister_DH(e: *mut ENGINE);
}
extern "C" {
    pub fn ENGINE_register_all_DH();
}
extern "C" {
    pub fn ENGINE_register_RAND(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_unregister_RAND(e: *mut ENGINE);
}
extern "C" {
    pub fn ENGINE_register_all_RAND();
}
extern "C" {
    pub fn ENGINE_register_ciphers(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_unregister_ciphers(e: *mut ENGINE);
}
extern "C" {
    pub fn ENGINE_register_all_ciphers();
}
extern "C" {
    pub fn ENGINE_register_digests(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_unregister_digests(e: *mut ENGINE);
}
extern "C" {
    pub fn ENGINE_register_all_digests();
}
extern "C" {
    pub fn ENGINE_register_pkey_meths(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_unregister_pkey_meths(e: *mut ENGINE);
}
extern "C" {
    pub fn ENGINE_register_all_pkey_meths();
}
extern "C" {
    pub fn ENGINE_register_pkey_asn1_meths(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_unregister_pkey_asn1_meths(e: *mut ENGINE);
}
extern "C" {
    pub fn ENGINE_register_all_pkey_asn1_meths();
}
extern "C" {
    pub fn ENGINE_register_complete(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_register_all_complete() -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_ctrl(
        e: *mut ENGINE,
        cmd: ::libc::c_int,
        i: ::libc::c_long,
        p: *mut ::libc::c_void,
        f: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_cmd_is_executable(e: *mut ENGINE, cmd: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_ctrl_cmd(
        e: *mut ENGINE,
        cmd_name: *const ::libc::c_char,
        i: ::libc::c_long,
        p: *mut ::libc::c_void,
        f: ::std::option::Option<unsafe extern "C" fn()>,
        cmd_optional: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_ctrl_cmd_string(
        e: *mut ENGINE,
        cmd_name: *const ::libc::c_char,
        arg: *const ::libc::c_char,
        cmd_optional: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_new() -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_free(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_up_ref(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_id(e: *mut ENGINE, id: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_name(e: *mut ENGINE, name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_RSA(e: *mut ENGINE, rsa_meth: *const RSA_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_DSA(e: *mut ENGINE, dsa_meth: *const DSA_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_EC(e: *mut ENGINE, ecdsa_meth: *const EC_KEY_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_DH(e: *mut ENGINE, dh_meth: *const DH_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_RAND(e: *mut ENGINE, rand_meth: *const RAND_METHOD) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_destroy_function(
        e: *mut ENGINE,
        destroy_f: ENGINE_GEN_INT_FUNC_PTR,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_init_function(
        e: *mut ENGINE,
        init_f: ENGINE_GEN_INT_FUNC_PTR,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_finish_function(
        e: *mut ENGINE,
        finish_f: ENGINE_GEN_INT_FUNC_PTR,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_ctrl_function(e: *mut ENGINE, ctrl_f: ENGINE_CTRL_FUNC_PTR) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_load_privkey_function(
        e: *mut ENGINE,
        loadpriv_f: ENGINE_LOAD_KEY_PTR,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_load_pubkey_function(
        e: *mut ENGINE,
        loadpub_f: ENGINE_LOAD_KEY_PTR,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_load_ssl_client_cert_function(
        e: *mut ENGINE,
        loadssl_f: ENGINE_SSL_CLIENT_CERT_PTR,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_ciphers(e: *mut ENGINE, f: ENGINE_CIPHERS_PTR) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_digests(e: *mut ENGINE, f: ENGINE_DIGESTS_PTR) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_pkey_meths(e: *mut ENGINE, f: ENGINE_PKEY_METHS_PTR) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_pkey_asn1_meths(
        e: *mut ENGINE,
        f: ENGINE_PKEY_ASN1_METHS_PTR,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_flags(e: *mut ENGINE, flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_cmd_defns(e: *mut ENGINE, defns: *const ENGINE_CMD_DEFN) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_ex_data(
        e: *mut ENGINE,
        idx: ::libc::c_int,
        arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_get_ex_data(e: *const ENGINE, idx: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn ENGINE_get_id(e: *const ENGINE) -> *const ::libc::c_char;
}
extern "C" {
    pub fn ENGINE_get_name(e: *const ENGINE) -> *const ::libc::c_char;
}
extern "C" {
    pub fn ENGINE_get_RSA(e: *const ENGINE) -> *const RSA_METHOD;
}
extern "C" {
    pub fn ENGINE_get_DSA(e: *const ENGINE) -> *const DSA_METHOD;
}
extern "C" {
    pub fn ENGINE_get_EC(e: *const ENGINE) -> *const EC_KEY_METHOD;
}
extern "C" {
    pub fn ENGINE_get_DH(e: *const ENGINE) -> *const DH_METHOD;
}
extern "C" {
    pub fn ENGINE_get_RAND(e: *const ENGINE) -> *const RAND_METHOD;
}
extern "C" {
    pub fn ENGINE_get_destroy_function(e: *const ENGINE) -> ENGINE_GEN_INT_FUNC_PTR;
}
extern "C" {
    pub fn ENGINE_get_init_function(e: *const ENGINE) -> ENGINE_GEN_INT_FUNC_PTR;
}
extern "C" {
    pub fn ENGINE_get_finish_function(e: *const ENGINE) -> ENGINE_GEN_INT_FUNC_PTR;
}
extern "C" {
    pub fn ENGINE_get_ctrl_function(e: *const ENGINE) -> ENGINE_CTRL_FUNC_PTR;
}
extern "C" {
    pub fn ENGINE_get_load_privkey_function(e: *const ENGINE) -> ENGINE_LOAD_KEY_PTR;
}
extern "C" {
    pub fn ENGINE_get_load_pubkey_function(e: *const ENGINE) -> ENGINE_LOAD_KEY_PTR;
}
extern "C" {
    pub fn ENGINE_get_ssl_client_cert_function(e: *const ENGINE) -> ENGINE_SSL_CLIENT_CERT_PTR;
}
extern "C" {
    pub fn ENGINE_get_ciphers(e: *const ENGINE) -> ENGINE_CIPHERS_PTR;
}
extern "C" {
    pub fn ENGINE_get_digests(e: *const ENGINE) -> ENGINE_DIGESTS_PTR;
}
extern "C" {
    pub fn ENGINE_get_pkey_meths(e: *const ENGINE) -> ENGINE_PKEY_METHS_PTR;
}
extern "C" {
    pub fn ENGINE_get_pkey_asn1_meths(e: *const ENGINE) -> ENGINE_PKEY_ASN1_METHS_PTR;
}
extern "C" {
    pub fn ENGINE_get_cipher(e: *mut ENGINE, nid: ::libc::c_int) -> *const EVP_CIPHER;
}
extern "C" {
    pub fn ENGINE_get_digest(e: *mut ENGINE, nid: ::libc::c_int) -> *const EVP_MD;
}
extern "C" {
    pub fn ENGINE_get_pkey_meth(e: *mut ENGINE, nid: ::libc::c_int) -> *const EVP_PKEY_METHOD;
}
extern "C" {
    pub fn ENGINE_get_pkey_asn1_meth(
        e: *mut ENGINE,
        nid: ::libc::c_int,
    ) -> *const EVP_PKEY_ASN1_METHOD;
}
extern "C" {
    pub fn ENGINE_get_pkey_asn1_meth_str(
        e: *mut ENGINE,
        str_: *const ::libc::c_char,
        len: ::libc::c_int,
    ) -> *const EVP_PKEY_ASN1_METHOD;
}
extern "C" {
    pub fn ENGINE_pkey_asn1_find_str(
        pe: *mut *mut ENGINE,
        str_: *const ::libc::c_char,
        len: ::libc::c_int,
    ) -> *const EVP_PKEY_ASN1_METHOD;
}
extern "C" {
    pub fn ENGINE_get_cmd_defns(e: *const ENGINE) -> *const ENGINE_CMD_DEFN;
}
extern "C" {
    pub fn ENGINE_get_flags(e: *const ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_init(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_finish(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_load_private_key(
        e: *mut ENGINE,
        key_id: *const ::libc::c_char,
        ui_method: *mut UI_METHOD,
        callback_data: *mut ::libc::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn ENGINE_load_public_key(
        e: *mut ENGINE,
        key_id: *const ::libc::c_char,
        ui_method: *mut UI_METHOD,
        callback_data: *mut ::libc::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn ENGINE_load_ssl_client_cert(
        e: *mut ENGINE,
        s: *mut SSL,
        ca_dn: *mut stack_st_X509_NAME,
        pcert: *mut *mut X509,
        ppkey: *mut *mut EVP_PKEY,
        pother: *mut *mut stack_st_X509,
        ui_method: *mut UI_METHOD,
        callback_data: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_get_default_RSA() -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_default_DSA() -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_default_EC() -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_default_DH() -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_default_RAND() -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_cipher_engine(nid: ::libc::c_int) -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_digest_engine(nid: ::libc::c_int) -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_pkey_meth_engine(nid: ::libc::c_int) -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_get_pkey_asn1_meth_engine(nid: ::libc::c_int) -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_set_default_RSA(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_default_string(
        e: *mut ENGINE,
        def_list: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_default_DSA(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_default_EC(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_default_DH(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_default_RAND(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_default_ciphers(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_default_digests(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_default_pkey_meths(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_default_pkey_asn1_meths(e: *mut ENGINE) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_set_default(e: *mut ENGINE, flags: ::libc::c_uint) -> ::libc::c_int;
}
extern "C" {
    pub fn ENGINE_add_conf_module();
}
pub type dyn_MEM_malloc_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: usize,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type dyn_MEM_realloc_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::libc::c_void,
        arg2: usize,
        arg3: *const ::libc::c_char,
        arg4: ::libc::c_int,
    ) -> *mut ::libc::c_void,
>;
pub type dyn_MEM_free_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::libc::c_void,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_dynamic_MEM_fns {
    pub malloc_fn: dyn_MEM_malloc_fn,
    pub realloc_fn: dyn_MEM_realloc_fn,
    pub free_fn: dyn_MEM_free_fn,
}
pub type dynamic_MEM_fns = st_dynamic_MEM_fns;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_dynamic_fns {
    pub static_state: *mut ::libc::c_void,
    pub mem_fns: dynamic_MEM_fns,
}
pub type dynamic_fns = st_dynamic_fns;
pub type dynamic_v_check_fn =
    ::std::option::Option<unsafe extern "C" fn(ossl_version: ::libc::c_ulong) -> ::libc::c_ulong>;
pub type dynamic_bind_engine = ::std::option::Option<
    unsafe extern "C" fn(
        e: *mut ENGINE,
        id: *const ::libc::c_char,
        fns: *const dynamic_fns,
    ) -> ::libc::c_int,
>;
extern "C" {
    pub fn ENGINE_get_static_state() -> *mut ::libc::c_void;
}
pub type u4 = ::libc::c_ulong;
pub type byte = ::libc::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gost_subst_block {
    pub k8: [byte; 16usize],
    pub k7: [byte; 16usize],
    pub k6: [byte; 16usize],
    pub k5: [byte; 16usize],
    pub k4: [byte; 16usize],
    pub k3: [byte; 16usize],
    pub k2: [byte; 16usize],
    pub k1: [byte; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gost_ctx {
    pub master_key: [u4; 8usize],
    pub key: [u4; 8usize],
    pub mask: [u4; 8usize],
    pub k87: [u4; 256usize],
    pub k65: [u4; 256usize],
    pub k43: [u4; 256usize],
    pub k21: [u4; 256usize],
}
extern "C" {
    pub fn gost_enc(c: *mut gost_ctx, clear: *const byte, cipher: *mut byte, blocks: ::libc::c_int);
}
extern "C" {
    pub fn gost_dec(c: *mut gost_ctx, cipher: *const byte, clear: *mut byte, blocks: ::libc::c_int);
}
extern "C" {
    pub fn gost_enc_cfb(
        ctx: *mut gost_ctx,
        iv: *const byte,
        clear: *const byte,
        cipher: *mut byte,
        blocks: ::libc::c_int,
    );
}
extern "C" {
    pub fn gost_dec_cfb(
        ctx: *mut gost_ctx,
        iv: *const byte,
        cipher: *const byte,
        clear: *mut byte,
        blocks: ::libc::c_int,
    );
}
extern "C" {
    pub fn gostcrypt(c: *mut gost_ctx, in_: *const byte, out: *mut byte);
}
extern "C" {
    pub fn gostdecrypt(c: *mut gost_ctx, in_: *const byte, out: *mut byte);
}
extern "C" {
    pub fn magmacrypt(c: *mut gost_ctx, in_: *const byte, out: *mut byte);
}
extern "C" {
    pub fn magmadecrypt(c: *mut gost_ctx, in_: *const byte, out: *mut byte);
}
extern "C" {
    pub fn gost_key(c: *mut gost_ctx, k: *const byte);
}
extern "C" {
    pub fn gost_key_nomask(c: *mut gost_ctx, k: *const byte);
}
extern "C" {
    pub fn magma_key(c: *mut gost_ctx, k: *const byte);
}
extern "C" {
    pub fn magma_master_key(c: *mut gost_ctx, k: *const byte);
}
extern "C" {
    pub fn gost_get_key(c: *mut gost_ctx, k: *mut byte);
}
extern "C" {
    pub fn gost_init(c: *mut gost_ctx, b: *const gost_subst_block);
}
extern "C" {
    pub fn gost_destroy(c: *mut gost_ctx);
}
extern "C" {
    pub fn gost_enc_with_key(
        arg1: *mut gost_ctx,
        key: *mut byte,
        inblock: *mut byte,
        outblock: *mut byte,
    );
}
extern "C" {
    pub fn gost_mac(
        ctx: *mut gost_ctx,
        mac_len: ::libc::c_int,
        data: *const ::libc::c_uchar,
        data_len: ::libc::c_uint,
        mac: *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_mac_iv(
        ctx: *mut gost_ctx,
        mac_len: ::libc::c_int,
        iv: *const ::libc::c_uchar,
        data: *const ::libc::c_uchar,
        data_len: ::libc::c_uint,
        mac: *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn mac_block(c: *mut gost_ctx, buffer: *mut byte, block: *const byte);
}
extern "C" {
    pub fn get_mac(buffer: *mut byte, nbits: ::libc::c_int, out: *mut byte);
}
extern "C" {
    pub fn cryptopro_key_meshing(ctx: *mut gost_ctx, iv: *mut ::libc::c_uchar);
}
extern "C" {
    pub static mut GostR3411_94_TestParamSet: gost_subst_block;
}
extern "C" {
    pub static mut GostR3411_94_CryptoProParamSet: gost_subst_block;
}
extern "C" {
    pub static mut Gost28147_TestParamSet: gost_subst_block;
}
extern "C" {
    pub static mut Gost28147_CryptoProParamSetA: gost_subst_block;
}
extern "C" {
    pub static mut Gost28147_CryptoProParamSetB: gost_subst_block;
}
extern "C" {
    pub static mut Gost28147_CryptoProParamSetC: gost_subst_block;
}
extern "C" {
    pub static mut Gost28147_CryptoProParamSetD: gost_subst_block;
}
extern "C" {
    pub static mut Gost28147_TC26ParamSetZ: gost_subst_block;
}
extern "C" {
    pub static CryptoProKeyMeshingKey: [byte; 0usize];
}
pub type word32 = ::libc::c_uint;
extern "C" {
    pub fn kboxinit(c: *mut gost_ctx, b: *const gost_subst_block);
}
extern "C" {
    pub fn magma_get_key(c: *mut gost_ctx, k: *mut byte);
}
extern "C" {
    pub fn acpkm_magma_key_meshing(ctx: *mut gost_ctx);
}
pub type ghosthash_len = ::libc::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gost_hash_ctx {
    pub len: ghosthash_len,
    pub cipher_ctx: *mut gost_ctx,
    pub left: ::libc::c_int,
    pub H: [byte; 32usize],
    pub S: [byte; 32usize],
    pub remainder: [byte; 32usize],
}
extern "C" {
    pub fn init_gost_hash_ctx(
        ctx: *mut gost_hash_ctx,
        subst_block: *const gost_subst_block,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn done_gost_hash_ctx(ctx: *mut gost_hash_ctx);
}
extern "C" {
    pub fn start_hash(ctx: *mut gost_hash_ctx) -> ::libc::c_int;
}
extern "C" {
    pub fn hash_block(ctx: *mut gost_hash_ctx, block: *const byte, length: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn finish_hash(ctx: *mut gost_hash_ctx, hashval: *mut byte) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R3410_ec {
    pub nid: ::libc::c_int,
    pub a: *mut ::libc::c_char,
    pub b: *mut ::libc::c_char,
    pub p: *mut ::libc::c_char,
    pub q: *mut ::libc::c_char,
    pub x: *mut ::libc::c_char,
    pub y: *mut ::libc::c_char,
    pub cofactor: *mut ::libc::c_char,
    pub group: *mut EC_GROUP,
}
pub type R3410_ec_params = R3410_ec;
extern "C" {
    pub static mut R3410_2001_paramset: [R3410_ec_params; 0usize];
}
extern "C" {
    pub static mut R3410_2012_256_paramset: *mut R3410_ec_params;
}
extern "C" {
    pub static mut R3410_2012_512_paramset: [R3410_ec_params; 0usize];
}
extern "C" {
    pub fn free_cached_groups();
}
extern "C" {
    pub static gost_cmds: [ENGINE_CMD_DEFN; 0usize];
}
extern "C" {
    pub fn gost_control_func(
        e: *mut ENGINE,
        cmd: ::libc::c_int,
        i: ::libc::c_long,
        p: *mut ::libc::c_void,
        f: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn get_gost_engine_param(param: ::libc::c_int) -> *const ::libc::c_char;
}
extern "C" {
    pub fn gost_set_default_param(
        param: ::libc::c_int,
        value: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_param_free();
}
extern "C" {
    pub static GOST_prov_macs: [OSSL_ALGORITHM; 0usize];
}
extern "C" {
    pub fn GOST_prov_deinit_mac_digests();
}
extern "C" {
    pub fn register_ameth_gost(
        nid: ::libc::c_int,
        ameth: *mut *mut EVP_PKEY_ASN1_METHOD,
        pemstr: *const ::libc::c_char,
        info: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn register_pmeth_gost(
        id: ::libc::c_int,
        pmeth: *mut *mut EVP_PKEY_METHOD,
        flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gost_pmeth_data {
    pub sign_param_nid: ::libc::c_int,
    pub md: *mut EVP_MD,
    pub shared_ukm: [::libc::c_uchar; 32usize],
    pub shared_ukm_size: usize,
    pub peer_key_used: ::libc::c_int,
    pub cipher_nid: ::libc::c_int,
    pub vko_dgst_nid: ::libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gost_mac_pmeth_data {
    pub key_set: ::libc::c_short,
    pub mac_size: ::libc::c_short,
    pub mac_param_nid: ::libc::c_int,
    pub md: *mut EVP_MD,
    pub key: [::libc::c_uchar; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gost_mac_key {
    pub mac_param_nid: ::libc::c_int,
    pub key: [::libc::c_uchar; 32usize],
    pub mac_size: ::libc::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GOST_KEY_INFO {
    pub encrypted_key: *mut ASN1_OCTET_STRING,
    pub imit: *mut ASN1_OCTET_STRING,
}
extern "C" {
    pub fn GOST_KEY_INFO_new() -> *mut GOST_KEY_INFO;
}
extern "C" {
    pub fn GOST_KEY_INFO_free(a: *mut GOST_KEY_INFO);
}
extern "C" {
    pub fn d2i_GOST_KEY_INFO(
        a: *mut *mut GOST_KEY_INFO,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut GOST_KEY_INFO;
}
extern "C" {
    pub fn i2d_GOST_KEY_INFO(
        a: *const GOST_KEY_INFO,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn GOST_KEY_INFO_it() -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GOST_KEY_AGREEMENT_INFO {
    pub cipher: *mut ASN1_OBJECT,
    pub ephem_key: *mut X509_PUBKEY,
    pub eph_iv: *mut ASN1_OCTET_STRING,
}
extern "C" {
    pub fn GOST_KEY_AGREEMENT_INFO_new() -> *mut GOST_KEY_AGREEMENT_INFO;
}
extern "C" {
    pub fn GOST_KEY_AGREEMENT_INFO_free(a: *mut GOST_KEY_AGREEMENT_INFO);
}
extern "C" {
    pub fn d2i_GOST_KEY_AGREEMENT_INFO(
        a: *mut *mut GOST_KEY_AGREEMENT_INFO,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut GOST_KEY_AGREEMENT_INFO;
}
extern "C" {
    pub fn i2d_GOST_KEY_AGREEMENT_INFO(
        a: *const GOST_KEY_AGREEMENT_INFO,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn GOST_KEY_AGREEMENT_INFO_it() -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GOST_KEY_TRANSPORT {
    pub key_info: *mut GOST_KEY_INFO,
    pub key_agreement_info: *mut GOST_KEY_AGREEMENT_INFO,
}
extern "C" {
    pub fn GOST_KEY_TRANSPORT_new() -> *mut GOST_KEY_TRANSPORT;
}
extern "C" {
    pub fn GOST_KEY_TRANSPORT_free(a: *mut GOST_KEY_TRANSPORT);
}
extern "C" {
    pub fn d2i_GOST_KEY_TRANSPORT(
        a: *mut *mut GOST_KEY_TRANSPORT,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut GOST_KEY_TRANSPORT;
}
extern "C" {
    pub fn i2d_GOST_KEY_TRANSPORT(
        a: *const GOST_KEY_TRANSPORT,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn GOST_KEY_TRANSPORT_it() -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GOST_CLIENT_KEY_EXCHANGE_PARAMS {
    pub gkt: *mut GOST_KEY_TRANSPORT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSKeyTransport_st {
    pub psexp: *mut ASN1_OCTET_STRING,
    pub ephem_key: *mut X509_PUBKEY,
    pub ukm: *mut ASN1_OCTET_STRING,
}
pub type PSKeyTransport_gost = PSKeyTransport_st;
extern "C" {
    pub fn PSKeyTransport_gost_new() -> *mut PSKeyTransport_gost;
}
extern "C" {
    pub fn PSKeyTransport_gost_free(a: *mut PSKeyTransport_gost);
}
extern "C" {
    pub fn d2i_PSKeyTransport_gost(
        a: *mut *mut PSKeyTransport_gost,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut PSKeyTransport_gost;
}
extern "C" {
    pub fn i2d_PSKeyTransport_gost(
        a: *const PSKeyTransport_gost,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn PSKeyTransport_gost_it() -> *const ASN1_ITEM;
}
extern "C" {
    pub fn GOST_CLIENT_KEY_EXCHANGE_PARAMS_new() -> *mut GOST_CLIENT_KEY_EXCHANGE_PARAMS;
}
extern "C" {
    pub fn GOST_CLIENT_KEY_EXCHANGE_PARAMS_free(a: *mut GOST_CLIENT_KEY_EXCHANGE_PARAMS);
}
extern "C" {
    pub fn d2i_GOST_CLIENT_KEY_EXCHANGE_PARAMS(
        a: *mut *mut GOST_CLIENT_KEY_EXCHANGE_PARAMS,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut GOST_CLIENT_KEY_EXCHANGE_PARAMS;
}
extern "C" {
    pub fn i2d_GOST_CLIENT_KEY_EXCHANGE_PARAMS(
        a: *const GOST_CLIENT_KEY_EXCHANGE_PARAMS,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn GOST_CLIENT_KEY_EXCHANGE_PARAMS_it() -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GOST_KEY_PARAMS {
    pub key_params: *mut ASN1_OBJECT,
    pub hash_params: *mut ASN1_OBJECT,
    pub cipher_params: *mut ASN1_OBJECT,
}
extern "C" {
    pub fn GOST_KEY_PARAMS_new() -> *mut GOST_KEY_PARAMS;
}
extern "C" {
    pub fn GOST_KEY_PARAMS_free(a: *mut GOST_KEY_PARAMS);
}
extern "C" {
    pub fn d2i_GOST_KEY_PARAMS(
        a: *mut *mut GOST_KEY_PARAMS,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut GOST_KEY_PARAMS;
}
extern "C" {
    pub fn i2d_GOST_KEY_PARAMS(
        a: *const GOST_KEY_PARAMS,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn GOST_KEY_PARAMS_it() -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GOST_CIPHER_PARAMS {
    pub iv: *mut ASN1_OCTET_STRING,
    pub enc_param_set: *mut ASN1_OBJECT,
}
extern "C" {
    pub fn GOST_CIPHER_PARAMS_new() -> *mut GOST_CIPHER_PARAMS;
}
extern "C" {
    pub fn GOST_CIPHER_PARAMS_free(a: *mut GOST_CIPHER_PARAMS);
}
extern "C" {
    pub fn d2i_GOST_CIPHER_PARAMS(
        a: *mut *mut GOST_CIPHER_PARAMS,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut GOST_CIPHER_PARAMS;
}
extern "C" {
    pub fn i2d_GOST_CIPHER_PARAMS(
        a: *const GOST_CIPHER_PARAMS,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn GOST_CIPHER_PARAMS_it() -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GOST2015_CIPHER_PARAMS {
    pub ukm: *mut ASN1_OCTET_STRING,
}
extern "C" {
    pub fn GOST2015_CIPHER_PARAMS_new() -> *mut GOST2015_CIPHER_PARAMS;
}
extern "C" {
    pub fn GOST2015_CIPHER_PARAMS_free(a: *mut GOST2015_CIPHER_PARAMS);
}
extern "C" {
    pub fn d2i_GOST2015_CIPHER_PARAMS(
        a: *mut *mut GOST2015_CIPHER_PARAMS,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut GOST2015_CIPHER_PARAMS;
}
extern "C" {
    pub fn i2d_GOST2015_CIPHER_PARAMS(
        a: *const GOST2015_CIPHER_PARAMS,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn GOST2015_CIPHER_PARAMS_it() -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MASKED_GOST_KEY {
    pub masked_priv_key: *mut ASN1_OCTET_STRING,
    pub public_key: *mut ASN1_OCTET_STRING,
}
extern "C" {
    pub fn MASKED_GOST_KEY_new() -> *mut MASKED_GOST_KEY;
}
extern "C" {
    pub fn MASKED_GOST_KEY_free(a: *mut MASKED_GOST_KEY);
}
extern "C" {
    pub fn d2i_MASKED_GOST_KEY(
        a: *mut *mut MASKED_GOST_KEY,
        in_: *mut *const ::libc::c_uchar,
        len: ::libc::c_long,
    ) -> *mut MASKED_GOST_KEY;
}
extern "C" {
    pub fn i2d_MASKED_GOST_KEY(
        a: *const MASKED_GOST_KEY,
        out: *mut *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn MASKED_GOST_KEY_it() -> *const ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_gost_digest_ctx {
    pub dctx: gost_hash_ctx,
    pub cctx: gost_ctx,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_gost_cipher_ctx {
    pub paramNID: ::libc::c_int,
    pub count: ::libc::c_uint,
    pub key_meshing: ::libc::c_int,
    pub kdf_seed: [::libc::c_uchar; 8usize],
    pub tag: [::libc::c_uchar; 8usize],
    pub cctx: gost_ctx,
    pub omac_ctx: *mut EVP_MD_CTX,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gost_cipher_info {
    pub nid: ::libc::c_int,
    pub sblock: *mut gost_subst_block,
    pub key_meshing: ::libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_gost_imit_ctx {
    pub cctx: gost_ctx,
    pub buffer: [::libc::c_uchar; 8usize],
    pub partial_block: [::libc::c_uchar; 8usize],
    pub count: ::libc::c_uint,
    pub key_meshing: ::libc::c_int,
    pub bytes_left: ::libc::c_int,
    pub key_set: ::libc::c_int,
    pub dgst_size: ::libc::c_int,
}
extern "C" {
    pub fn get_encryption_params(obj: *mut ASN1_OBJECT) -> *const gost_cipher_info;
}
extern "C" {
    pub fn inc_counter(counter: *mut ::libc::c_uchar, counter_bytes: usize);
}
extern "C" {
    pub fn pkey_gost_encrypt(
        pctx: *mut EVP_PKEY_CTX,
        out: *mut ::libc::c_uchar,
        out_len: *mut usize,
        key: *const ::libc::c_uchar,
        key_len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn pkey_gost_decrypt(
        pctx: *mut EVP_PKEY_CTX,
        key: *mut ::libc::c_uchar,
        key_len: *mut usize,
        in_: *const ::libc::c_uchar,
        in_len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn pkey_gost_ec_derive(
        ctx: *mut EVP_PKEY_CTX,
        key: *mut ::libc::c_uchar,
        keylen: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn fill_GOST_EC_params(eckey: *mut EC_KEY, nid: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_ec_keygen(ec: *mut EC_KEY) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_ec_sign(
        dgst: *const ::libc::c_uchar,
        dlen: ::libc::c_int,
        eckey: *mut EC_KEY,
    ) -> *mut ECDSA_SIG;
}
extern "C" {
    pub fn gost_ec_verify(
        dgst: *const ::libc::c_uchar,
        dgst_len: ::libc::c_int,
        sig: *mut ECDSA_SIG,
        ec: *mut EC_KEY,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_ec_compute_public(ec: *mut EC_KEY) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_ec_point_mul(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_id_GostR3410_2001_CryptoPro_A_ParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_g_id_GostR3410_2001_CryptoPro_A_ParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_two_id_GostR3410_2001_CryptoPro_A_ParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_id_GostR3410_2001_CryptoPro_B_ParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_g_id_GostR3410_2001_CryptoPro_B_ParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_two_id_GostR3410_2001_CryptoPro_B_ParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_id_GostR3410_2001_CryptoPro_C_ParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_g_id_GostR3410_2001_CryptoPro_C_ParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_two_id_GostR3410_2001_CryptoPro_C_ParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_id_GostR3410_2001_TestParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_g_id_GostR3410_2001_TestParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_two_id_GostR3410_2001_TestParamSet(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_id_tc26_gost_3410_2012_256_paramSetA(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_g_id_tc26_gost_3410_2012_256_paramSetA(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_two_id_tc26_gost_3410_2012_256_paramSetA(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_id_tc26_gost_3410_2012_512_paramSetA(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_g_id_tc26_gost_3410_2012_512_paramSetA(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_two_id_tc26_gost_3410_2012_512_paramSetA(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_id_tc26_gost_3410_2012_512_paramSetB(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_g_id_tc26_gost_3410_2012_512_paramSetB(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_two_id_tc26_gost_3410_2012_512_paramSetB(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_id_tc26_gost_3410_2012_512_paramSetC(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_g_id_tc26_gost_3410_2012_512_paramSetC(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn point_mul_two_id_tc26_gost_3410_2012_512_paramSetC(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn VKO_compute_key(
        shared_key: *mut ::libc::c_uchar,
        pub_key: *const EC_POINT,
        priv_key: *const EC_KEY,
        ukm: *const ::libc::c_uchar,
        ukm_size: usize,
        vko_dgst_nid: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_kdftree2012_256(
        keyout: *mut ::libc::c_uchar,
        keyout_len: usize,
        key: *const ::libc::c_uchar,
        keylen: usize,
        label: *const ::libc::c_uchar,
        label_len: usize,
        seed: *const ::libc::c_uchar,
        seed_len: usize,
        representation: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_tlstree(
        cipher_nid: ::libc::c_int,
        in_: *const ::libc::c_uchar,
        out: *mut ::libc::c_uchar,
        tlsseq: *const ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_kexp15(
        shared_key: *const ::libc::c_uchar,
        shared_len: ::libc::c_int,
        cipher_nid: ::libc::c_int,
        cipher_key: *const ::libc::c_uchar,
        mac_nid: ::libc::c_int,
        mac_key: *mut ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
        ivlen: usize,
        out: *mut ::libc::c_uchar,
        out_len: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_kimp15(
        expkey: *const ::libc::c_uchar,
        expkeylen: usize,
        cipher_nid: ::libc::c_int,
        cipher_key: *const ::libc::c_uchar,
        mac_nid: ::libc::c_int,
        mac_key: *mut ::libc::c_uchar,
        iv: *const ::libc::c_uchar,
        ivlen: usize,
        shared_key: *mut ::libc::c_uchar,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn store_bignum(
        bn: *const BIGNUM,
        buf: *mut ::libc::c_uchar,
        len: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn pack_sign_cp(
        s: *mut ECDSA_SIG,
        order: ::libc::c_int,
        sig: *mut ::libc::c_uchar,
        siglen: *mut usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn gost_get0_priv_key(pkey: *const EVP_PKEY) -> *mut BIGNUM;
}
extern "C" {
    pub fn decrement_sequence(seq: *mut ::libc::c_uchar, decrement: ::libc::c_int)
        -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gost_cipher_st {
    pub template: *mut gost_cipher_st,
    pub nid: ::libc::c_int,
    pub cipher: *mut EVP_CIPHER,
    pub block_size: ::libc::c_int,
    pub key_len: ::libc::c_int,
    pub iv_len: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut EVP_CIPHER_CTX,
            key: *const ::libc::c_uchar,
            iv: *const ::libc::c_uchar,
            enc: ::libc::c_int,
        ) -> ::libc::c_int,
    >,
    pub do_cipher: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut EVP_CIPHER_CTX,
            out: *mut ::libc::c_uchar,
            in_: *const ::libc::c_uchar,
            inl: usize,
        ) -> ::libc::c_int,
    >,
    pub cleanup:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut EVP_CIPHER_CTX) -> ::libc::c_int>,
    pub ctx_size: ::libc::c_int,
    pub set_asn1_parameters: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut EVP_CIPHER_CTX, arg2: *mut ASN1_TYPE) -> ::libc::c_int,
    >,
    pub get_asn1_parameters: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut EVP_CIPHER_CTX, arg2: *mut ASN1_TYPE) -> ::libc::c_int,
    >,
    pub ctrl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut EVP_CIPHER_CTX,
            type_: ::libc::c_int,
            arg: ::libc::c_int,
            ptr: *mut ::libc::c_void,
        ) -> ::libc::c_int,
    >,
}
pub type GOST_cipher = gost_cipher_st;
extern "C" {
    pub fn GOST_init_cipher(c: *mut GOST_cipher) -> *mut EVP_CIPHER;
}
extern "C" {
    pub fn GOST_deinit_cipher(c: *mut GOST_cipher);
}
extern "C" {
    pub static mut Gost28147_89_cipher: GOST_cipher;
}
extern "C" {
    pub static mut Gost28147_89_cbc_cipher: GOST_cipher;
}
extern "C" {
    pub static mut Gost28147_89_cnt_cipher: GOST_cipher;
}
extern "C" {
    pub static mut Gost28147_89_cnt_12_cipher: GOST_cipher;
}
extern "C" {
    pub static mut magma_ctr_cipher: GOST_cipher;
}
extern "C" {
    pub static mut magma_ctr_acpkm_cipher: GOST_cipher;
}
extern "C" {
    pub static mut magma_ctr_acpkm_omac_cipher: GOST_cipher;
}
extern "C" {
    pub static mut magma_ecb_cipher: GOST_cipher;
}
extern "C" {
    pub static mut magma_cbc_cipher: GOST_cipher;
}
extern "C" {
    pub static mut magma_mgm_cipher: GOST_cipher;
}
extern "C" {
    pub static mut grasshopper_ecb_cipher: GOST_cipher;
}
extern "C" {
    pub static mut grasshopper_cbc_cipher: GOST_cipher;
}
extern "C" {
    pub static mut grasshopper_cfb_cipher: GOST_cipher;
}
extern "C" {
    pub static mut grasshopper_ofb_cipher: GOST_cipher;
}
extern "C" {
    pub static mut grasshopper_ctr_cipher: GOST_cipher;
}
extern "C" {
    pub static mut grasshopper_mgm_cipher: GOST_cipher;
}
extern "C" {
    pub static mut grasshopper_ctr_acpkm_cipher: GOST_cipher;
}
extern "C" {
    pub static mut grasshopper_ctr_acpkm_omac_cipher: GOST_cipher;
}
extern "C" {
    pub static mut magma_kexp15_cipher: GOST_cipher;
}
extern "C" {
    pub static mut kuznyechik_kexp15_cipher: GOST_cipher;
}
extern "C" {
    pub static GOST_prov_ciphers: [OSSL_ALGORITHM; 0usize];
}
extern "C" {
    pub fn GOST_prov_deinit_ciphers();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gost_digest_st {
    pub template: *mut gost_digest_st,
    pub nid: ::libc::c_int,
    pub alias: *const ::libc::c_char,
    pub digest: *mut EVP_MD,
    pub result_size: ::libc::c_int,
    pub input_blocksize: ::libc::c_int,
    pub app_datasize: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub init: ::std::option::Option<unsafe extern "C" fn(ctx: *mut EVP_MD_CTX) -> ::libc::c_int>,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut EVP_MD_CTX,
            data: *const ::libc::c_void,
            count: usize,
        ) -> ::libc::c_int,
    >,
    pub final_: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut EVP_MD_CTX, md: *mut ::libc::c_uchar) -> ::libc::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(to: *mut EVP_MD_CTX, from: *const EVP_MD_CTX) -> ::libc::c_int,
    >,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(ctx: *mut EVP_MD_CTX) -> ::libc::c_int>,
    pub ctrl: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut EVP_MD_CTX,
            cmd: ::libc::c_int,
            p1: ::libc::c_int,
            p2: *mut ::libc::c_void,
        ) -> ::libc::c_int,
    >,
}
pub type GOST_digest = gost_digest_st;
extern "C" {
    pub fn GOST_init_digest(d: *mut GOST_digest) -> *mut EVP_MD;
}
extern "C" {
    pub fn GOST_deinit_digest(d: *mut GOST_digest);
}
extern "C" {
    pub static mut GostR3411_94_digest: GOST_digest;
}
extern "C" {
    pub static mut Gost28147_89_MAC_digest: GOST_digest;
}
extern "C" {
    pub static mut Gost28147_89_mac_12_digest: GOST_digest;
}
extern "C" {
    pub static mut GostR3411_2012_256_digest: GOST_digest;
}
extern "C" {
    pub static mut GostR3411_2012_512_digest: GOST_digest;
}
extern "C" {
    pub static mut magma_mac_digest: GOST_digest;
}
extern "C" {
    pub static mut grasshopper_mac_digest: GOST_digest;
}
extern "C" {
    pub static mut kuznyechik_ctracpkm_omac_digest: GOST_digest;
}
extern "C" {
    pub static GOST_prov_digests: [OSSL_ALGORITHM; 0usize];
}
extern "C" {
    pub fn GOST_prov_deinit_digests();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gost_nid_job {
    pub sn: *const ::libc::c_char,
    pub ln: *const ::libc::c_char,
    pub callback: ::std::option::Option<unsafe extern "C" fn(nid: ::libc::c_int)>,
    pub asn1: *mut ASN1_OBJECT,
}
pub type GOST_NID_JOB = gost_nid_job;
extern "C" {
    pub static mut magma_mgm_NID: GOST_NID_JOB;
}
extern "C" {
    pub static mut kuznyechik_mgm_NID: GOST_NID_JOB;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gost_grasshopper_cipher_ctx {
    pub type_: u8,
    pub master_key: grasshopper_key_t,
    pub key: grasshopper_key_t,
    pub encrypt_round_keys: grasshopper_round_keys_t,
    pub decrypt_round_keys: grasshopper_round_keys_t,
    pub buffer: grasshopper_w128_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gost_grasshopper_cipher_ctx_ctr {
    pub c: gost_grasshopper_cipher_ctx,
    pub partial_buffer: grasshopper_w128_t,
    pub section_size: ::libc::c_uint,
    pub kdf_seed: [::libc::c_uchar; 8usize],
    pub tag: [::libc::c_uchar; 16usize],
    pub omac_ctx: *mut EVP_MD_CTX,
}
extern "C" {
    pub fn cipher_gost_grasshopper_ctracpkm() -> *const EVP_CIPHER;
}
extern "C" {
    pub static mut grasshopper_pil_enc128: [[grasshopper_w128_t; 256usize]; 16usize];
}
extern "C" {
    pub static mut grasshopper_l_dec128: [[grasshopper_w128_t; 256usize]; 16usize];
}
extern "C" {
    pub static mut grasshopper_pil_dec128: [[grasshopper_w128_t; 256usize]; 16usize];
}
extern "C" {
    pub fn grasshopper_set_encrypt_key(
        subkeys: *mut grasshopper_round_keys_t,
        key: *const grasshopper_key_t,
    );
}
extern "C" {
    pub fn grasshopper_set_decrypt_key(
        subkeys: *mut grasshopper_round_keys_t,
        key: *const grasshopper_key_t,
    );
}
extern "C" {
    pub fn grasshopper_encrypt_block(
        subkeys: *mut grasshopper_round_keys_t,
        source: *mut grasshopper_w128_t,
        target: *mut grasshopper_w128_t,
        buffer: *mut grasshopper_w128_t,
    );
}
extern "C" {
    pub fn grasshopper_decrypt_block(
        subkeys: *mut grasshopper_round_keys_t,
        source: *mut grasshopper_w128_t,
        target: *mut grasshopper_w128_t,
        buffer: *mut grasshopper_w128_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::libc::c_char;
